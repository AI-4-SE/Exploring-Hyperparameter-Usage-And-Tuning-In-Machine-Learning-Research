{
    "archive/train_masconcubes.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "mascon_points",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mascon_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mascon_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "mascon_masses",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mascon_masses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mascon_masses)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_42": {
                "variable": {
                    "value": "(X, Y, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(-1, 1, N)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_47": {
                "variable": {
                    "value": "mascon_cube_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, Y, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[mascon_cube_masses]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_66": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params=[mascon_cube_masses], lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_43": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "45",
                            "int"
                        ]
                    ]
                }
            },
            "sum_120": {
                "input": {
                    "value": "best_model * best_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_38": {
                "*size": {
                    "value": "(N * N * N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "predicted * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_encodings.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.sin(np.pi * sp).view(-1, 3), torch.cos(np.pi * sp).view(-1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_62": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_63": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sp[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(sp, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_17": {
                "tensors": {
                    "value": "(unit, torch.norm(sp, dim=1).view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(retval, torch.sin(2 ** i * np.pi * sp).view(-1, 3), torch.cos(2 ** i * np.pi * sp).view(-1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "(r.view(-1, 1), phi.view(-1, 1), theta.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_16": {
                "input": {
                    "value": "sp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_61": {
                "input": {
                    "value": "sp[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "sp[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_17": {
                "input": {
                    "value": "sp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_30": {
                "input": {
                    "value": "np.pi * sp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_31": {
                "input": {
                    "value": "np.pi * sp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_33": {
                "input": {
                    "value": "2 ** i * np.pi * sp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_34": {
                "input": {
                    "value": "2 ** i * np.pi * sp",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_hulls.py": {
        "torch": {
            "cross_167": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ray_d.expand(V, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "edge2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2 - v0",
                            "BinOp"
                        ],
                        [
                            "v2 - v0",
                            "BinOp"
                        ],
                        [
                            "v2 - v0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_169": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bs,bs->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "edge1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v1 - v0",
                            "BinOp"
                        ],
                        [
                            "v1 - v0",
                            "BinOp"
                        ],
                        [
                            "v1 - v0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_not_175": {
                "variable": {
                    "value": "crit1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logical_or(u < 0.0, u > 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_176": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(a + b + c) / 2.0",
                            "BinOp"
                        ],
                        [
                            "ray_o - v0",
                            "BinOp"
                        ],
                        [
                            "ray_o - v0",
                            "BinOp"
                        ],
                        [
                            "ray_o - v0",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "edge1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v1 - v0",
                            "BinOp"
                        ],
                        [
                            "v1 - v0",
                            "BinOp"
                        ],
                        [
                            "v1 - v0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_not_180": {
                "variable": {
                    "value": "crit2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logical_or(v < 0.0, u + v > 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_185": {
                "input": {
                    "value": "crit1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logical_not(np.logical_or(u < 0, u > 1))",
                            "Call"
                        ],
                        [
                            "torch.logical_not(torch.logical_or(u < 0.0, u > 1.0))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "crit2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logical_not(np.logical_or(v < 0, u + v > 1))",
                            "Call"
                        ],
                        [
                            "torch.logical_not(torch.logical_or(v < 0.0, u + v > 1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(points)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_and(torch.logical_and(crit1, crit2), crit3)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_173": {
                "equation": {
                    "value": "bs,bs->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(a + b + c) / 2.0",
                            "BinOp"
                        ],
                        [
                            "ray_o - v0",
                            "BinOp"
                        ],
                        [
                            "ray_o - v0",
                            "BinOp"
                        ],
                        [
                            "ray_o - v0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_or_175": {
                "input": {
                    "value": "u < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "u > 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "einsum_178": {
                "equation": {
                    "value": "bs,bs->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cross(s, edge1)",
                            "Call"
                        ],
                        [
                            "np.cross(s, edge1)",
                            "Call"
                        ],
                        [
                            "torch.cross(s, edge1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_180": {
                "input": {
                    "value": "v < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "u + v > 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "einsum_181": {
                "equation": {
                    "value": "bs,bs->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cross(s, edge1)",
                            "Call"
                        ],
                        [
                            "np.cross(s, edge1)",
                            "Call"
                        ],
                        [
                            "torch.cross(s, edge1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_188": {
                "input": {
                    "value": "a < 1e-07",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "a > -1e-07",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_integration.py": {
        "torch": {
            "sum_54": {
                "variable": {
                    "value": "int_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1] + evaluations[:, :, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ],
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1] + evaluations[:, :, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ],
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1, :] + evaluations[:, :, 1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "int_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[1] / 2 * (int_x[:, 0:-1] + int_x[:, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ],
                        [
                            "h[1] / 2 * (int_x[:, 0:-1] + int_x[:, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ],
                        [
                            "h[1] / 2 * (int_x[:, 0:-1, :] + int_x[:, 1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "int_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[2] / 2 * (int_y[0:-1] + int_y[1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ],
                        [
                            "h[2] / 2 * (int_y[0:-1] + int_y[1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ],
                        [
                            "h[2] / 2 * (int_y[0:-1, :] + int_y[1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_78": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_112": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_159": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_210": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_258": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_309": {
                "variable": {
                    "value": "grid_1d_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "domain[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "domain[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(np.cbrt(N)))",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_311": {
                "variable": {
                    "value": "grid_1d_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "domain[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "domain[1][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(np.cbrt(N)))",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_313": {
                "variable": {
                    "value": "grid_1d_z",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "domain[2][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "domain[2][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(np.cbrt(N)))",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_320": {
                "variable": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "grid_1d_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(domain[0][0], domain[0][1], N, device=os.environ['TORCH_DEVICE'])",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "grid_1d_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(domain[1][0], domain[1][1], N, device=os.environ['TORCH_DEVICE'])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_321": {
                "variable": {
                    "value": "eval_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.flatten(), y.flatten(), z.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_321": {
                "variable": {
                    "value": "eval_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "int_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1] + evaluations[:, :, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ],
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1] + evaluations[:, :, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ],
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1, :] + evaluations[:, :, 1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_184": {
                "variable": {
                    "value": "int_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[1] / 2 * (int_x[:, 0:-1] + int_x[:, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ],
                        [
                            "h[1] / 2 * (int_x[:, 0:-1] + int_x[:, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ],
                        [
                            "h[1] / 2 * (int_x[:, 0:-1, :] + int_x[:, 1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_186": {
                "variable": {
                    "value": "int_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[2] / 2 * (int_y[0:-1] + int_y[1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ],
                        [
                            "h[2] / 2 * (int_y[0:-1] + int_y[1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ],
                        [
                            "h[2] / 2 * (int_y[0:-1, :] + int_y[1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sub_230": {
                "variable": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_point",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "sample_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(N, 3, device=os.environ['TORCH_DEVICE']) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.cuda.FloatTensor(sobol_points[:N, :] * 2 - 1, device=os.environ['TORCH_DEVICE']) + torch.rand(N, 3, device=os.environ['TORCH_DEVICE']) * noise",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(sobol_points[:N, :] * 2 - 1) + torch.rand(N, 3) * noise",
                            "BinOp"
                        ],
                        [
                            "torch.cuda.FloatTensor(sobol_points[:N, :] * 2 - 1, device=os.environ['TORCH_DEVICE']) + torch.rand(N, 3, device=os.environ['TORCH_DEVICE']) * noise",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(sobol_points[:N, :] * 2 - 1) + torch.rand(N, 3) * noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sub_274": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_point",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "sample_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(N, 3, device=os.environ['TORCH_DEVICE']) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.cuda.FloatTensor(sobol_points[:N, :] * 2 - 1, device=os.environ['TORCH_DEVICE']) + torch.rand(N, 3, device=os.environ['TORCH_DEVICE']) * noise",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(sobol_points[:N, :] * 2 - 1) + torch.rand(N, 3) * noise",
                            "BinOp"
                        ],
                        [
                            "torch.cuda.FloatTensor(sobol_points[:N, :] * 2 - 1, device=os.environ['TORCH_DEVICE']) + torch.rand(N, 3, device=os.environ['TORCH_DEVICE']) * noise",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(sobol_points[:N, :] * 2 - 1) + torch.rand(N, 3) * noise",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_283": {
                "variable": {
                    "value": "int_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1] + evaluations[:, :, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ],
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1] + evaluations[:, :, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ],
                        [
                            "h[0] / 2 * (evaluations[:, :, 0:-1, :] + evaluations[:, :, 1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_x, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_285": {
                "variable": {
                    "value": "int_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[1] / 2 * (int_x[:, 0:-1] + int_x[:, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ],
                        [
                            "h[1] / 2 * (int_x[:, 0:-1] + int_x[:, 1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ],
                        [
                            "h[1] / 2 * (int_x[:, 0:-1, :] + int_x[:, 1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_287": {
                "variable": {
                    "value": "int_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[2] / 2 * (int_y[0:-1] + int_y[1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ],
                        [
                            "h[2] / 2 * (int_y[0:-1] + int_y[1:])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ],
                        [
                            "h[2] / 2 * (int_y[0:-1, :] + int_y[1:, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(int_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_365": {
                "input": {
                    "value": "nn_inputs != nn_inputs",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rand_81": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(np.cbrt(N)))",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "rho / torch.norm(target_point - sample_points, dim=1).view(-1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "sobol_points[:N, :] * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "rho / torch.norm(target_point - sample_points, dim=1).view(-1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_175": {
                "input": {
                    "value": "target_point - sample_points",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "data": {
                    "value": "sobol_points[:N, :] * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "rho / torch.pow(torch.norm(dr, dim=1), 3).view(-1, 1) * dr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_326": {
                "*size": {
                    "value": "N ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_120": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(np.cbrt(N)))",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_123": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(np.cbrt(N)))",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_220": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(np.cbrt(N)))",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_223": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(np.cbrt(N)))",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "3000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_276": {
                "input": {
                    "value": "torch.norm(distance, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_89": {
                "input": {
                    "value": "target_point - sample_points",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_131": {
                "input": {
                    "value": "target_point - sample_points",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_232": {
                "input": {
                    "value": "torch.norm(dr, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_276": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sub(target_point, sample_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_232": {
                "input": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sub(target_point, sample_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_io.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "mascon_points",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mascon_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mascon_points)",
                            "Call"
                        ],
                        [
                            "mascon_points.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "mascon_masses_u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mascon_masses_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mascon_masses_u)",
                            "Call"
                        ],
                        [
                            "mascon_masses_u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'last_model.mdl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "mascon_masses_nu",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mascon_masses_nu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(mascon_masses_nu)",
                            "Call"
                        ],
                        [
                            "mascon_masses_nu.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gravann/_losses.py": {
        "torch": {
            "sum_21": {
                "variable": {
                    "value": "acceleration_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(labels - c * predicted)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_39": {
                "variable": {
                    "value": "acceleration_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "acceleration_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(labels - c * predicted)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_75": {
                "variable": {
                    "value": "norm_T1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_T1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predicted_T1.transpose(0, 1) / norm_T1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_76": {
                "variable": {
                    "value": "norm_T2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_T2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predicted_T2.transpose(0, 1) / norm_T2).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_77": {
                "variable": {
                    "value": "norm_LT1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_T1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels_T1.transpose(0, 1) / norm_LT1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_78": {
                "variable": {
                    "value": "norm_LT2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_T2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels_T2.transpose(0, 1) / norm_LT2).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_87": {
                "variable": {
                    "value": "pred_dots",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bs,bs->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "predicted_T1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predicted_T1.transpose(0, 1) / norm_T1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_88": {
                "variable": {
                    "value": "labels_dots",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bs,bs->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "labels_T1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels_T1.transpose(0, 1) / norm_LT1).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_91": {
                "variable": {
                    "value": "pred_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bs,bs->b', predicted_T1, predicted_T2)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_92": {
                "variable": {
                    "value": "label_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_dots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bs,bs->b', labels_T1, labels_T2)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_111": {
                "variable": {
                    "value": "acceleration_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_116": {
                "variable": {
                    "value": "acceleration_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels - c * predicted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_134": {
                "variable": {
                    "value": "acceleration_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "acceleration_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(labels - c * predicted)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_163": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(torch.sub(labels.view(-1), c * predicted.view(-1)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_166": {
                "variable": {
                    "value": "contrastive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_angular_difference(predicted[::2], predicted[1::2], labels[::2], labels[1::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_23": {
                "input": {
                    "value": "torch.mean(acceleration_err ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "input": {
                    "value": "torch.mean((acceleration_err / acceleration_norm) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_59": {
                "input": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_95": {
                "input": {
                    "value": "pred_angles - label_angles",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "acceleration_err / acceleration_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_141": {
                "input": {
                    "value": "acceleration_err / acceleration_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "torch.mul(labels.view(-1), predicted.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "torch.pow(predicted.view(-1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_21": {
                "input": {
                    "value": "labels - c * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_23": {
                "input": {
                    "value": "acceleration_err ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "torch.mul(labels.view(-1), predicted.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "torch.pow(predicted.view(-1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "labels - c * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "(acceleration_err / acceleration_norm) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "torch.mul(labels.view(-1), predicted.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "torch.pow(predicted.view(-1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "torch.mul(labels.view(-1), predicted.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "torch.pow(predicted.view(-1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_139": {
                "input": {
                    "value": "labels - c * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "torch.mul(labels.view(-1), predicted.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "torch.pow(predicted.view(-1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_164": {
                "input": {
                    "value": "torch.sub(labels.view(-1), c * predicted.view(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_181": {
                "input": {
                    "value": "torch.mul(labels, predicted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "torch.pow(predicted, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "torch.pow(torch.sub(labels, c * predicted), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_195": {
                "input": {
                    "value": "torch.mul(labels, predicted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_196": {
                "input": {
                    "value": "torch.pow(predicted, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_197": {
                "input": {
                    "value": "torch.abs(torch.sub(labels, c * predicted))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "torch.mul(labels, predicted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_210": {
                "input": {
                    "value": "torch.pow(predicted, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_211": {
                "input": {
                    "value": "torch.sqrt(torch.abs(torch.sub(labels, c * predicted)) + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_18": {
                "input": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_19": {
                "input": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_41": {
                "input": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_42": {
                "input": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_113": {
                "input": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_114": {
                "input": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_136": {
                "input": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_137": {
                "input": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_160": {
                "input": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_161": {
                "input": {
                    "value": "predicted.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sub_164": {
                "input": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "c * predicted.view(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_181": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_182": {
                "input": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_183": {
                "input": {
                    "value": "torch.sub(labels, c * predicted)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_195": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_196": {
                "input": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_197": {
                "input": {
                    "value": "torch.sub(labels, c * predicted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_209": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_210": {
                "input": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_211": {
                "input": {
                    "value": "torch.abs(torch.sub(labels, c * predicted)) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sub_183": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "c * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sub_197": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "c * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_211": {
                "input": {
                    "value": "torch.sub(labels, c * predicted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sub_211": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "c * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_mascon_labels.py": {
        "torch": {
            "empty_35": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_63": {
                "variable": {
                    "value": "retval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_38": {
                "variable": {
                    "value": "retval[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mascon_masses / torch.norm(torch.sub(mascon_points, target_point), dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "mm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 / len(mascon_points)] * len(mascon_points)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sub_66": {
                "variable": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mascon_points",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_point",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "retval[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mm / torch.pow(torch.norm(dr, dim=1), 3).view(-1, 1) * dr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "mm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[mascon_masses] * len(mascon_points)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_39": {
                "input": {
                    "value": "torch.sub(mascon_points, target_point)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sub_39": {
                "input": {
                    "value": "mascon_points",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_point",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_68": {
                "input": {
                    "value": "torch.norm(dr, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_68": {
                "input": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sub(mascon_points, target_point)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_mesh_conversion.py": {
        "torch": {
            "tensor_201": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "remaining_points + stepsize * target_direction[point_to_compute]",
                            "BinOp"
                        ],
                        [
                            "remaining_points + stepsize * target_direction[point_to_compute]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(new_points, dtype=torch.float, device=os.environ['TORCH_DEVICE'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_plots.py": {
        "torch": {
            "linspace_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "1500",
                            "Method Argument"
                        ],
                        [
                            "2500",
                            "Method Argument"
                        ],
                        [
                            "2500",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_246": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "1500",
                            "Method Argument"
                        ],
                        [
                            "2500",
                            "Method Argument"
                        ],
                        [
                            "2500",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_247": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "1500",
                            "Method Argument"
                        ],
                        [
                            "2500",
                            "Method Argument"
                        ],
                        [
                            "2500",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_248": {
                "variable": {
                    "value": "(X, Y, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "nn_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X.reshape(-1, 1), Y.reshape(-1, 1), Z.reshape(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_718": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z - offset < mascon_slice_thickness",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "z - offset > -mascon_slice_thickness",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_739": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - offset < mascon_slice_thickness",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "y - offset > -mascon_slice_thickness",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_760": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - offset < mascon_slice_thickness",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "x - offset > -mascon_slice_thickness",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_842": {
                "variable": {
                    "value": "model_values_left",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(points_left), 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_843": {
                "variable": {
                    "value": "model_values_right",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(points_right), 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_845": {
                "variable": {
                    "value": "label_values_left",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(points_left), 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_846": {
                "variable": {
                    "value": "label_values_right",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(points_right), 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_892": {
                "variable": {
                    "value": "label_values_left",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_values_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(points_left), 3])",
                            "Call"
                        ],
                        [
                            "torch.cat(label_values_left)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_893": {
                "variable": {
                    "value": "model_values_left",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "model_values_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(points_left), 3])",
                            "Call"
                        ],
                        [
                            "torch.cat(model_values_left)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_894": {
                "variable": {
                    "value": "label_values_right",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_values_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(points_right), 3])",
                            "Call"
                        ],
                        [
                            "torch.cat(label_values_right)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_895": {
                "variable": {
                    "value": "model_values_right",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "model_values_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(points_right), 3])",
                            "Call"
                        ],
                        [
                            "torch.cat(model_values_right)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_143": {
                "obj": {
                    "value": "mascon_points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(1 - RHO, 1 - RHO, 1 - RHO, RHO)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_328": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_508": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_638": {
                "variable": {
                    "value": "normalized_masses",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 / len(mascon_points)] * len(mascon_points)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_644": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "get_target_point_sampler(N, method='altitude', bounds=[altitude], limit_shape_to_asteroid=sample, replace=False)()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "model(inp) * c",
                            "BinOp"
                        ],
                        [
                            "rho + torch.unsqueeze(torch.tensor(outside_mask).float() * add_const_density, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_533": {
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "get_target_point_sampler(N, method='altitude', bounds=[altitude], limit_shape_to_asteroid=sample, replace=False)()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_534": {
                "tensors": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "model(inp) * c",
                            "BinOp"
                        ],
                        [
                            "rho + torch.unsqueeze(torch.tensor(outside_mask).float() * add_const_density, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bitwise_not_658": {
                "variable": {
                    "value": "outside_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_outside_torch(candidates, triangles)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_677": {
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(points, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "get_target_point_sampler(N, method='altitude', bounds=[altitude], limit_shape_to_asteroid=sample, replace=False)()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_678": {
                "tensors": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rho, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "model(inp) * c",
                            "BinOp"
                        ],
                        [
                            "rho + torch.unsqueeze(torch.tensor(outside_mask).float() * add_const_density, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_878": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_889": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1036": {
                "data": {
                    "value": "newp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.dot(Rm.transpose(), p[i, :]) for i in range(N ** 2)]",
                            "ListComp"
                        ],
                        [
                            "newp + section * offset",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1044": {
                "input": {
                    "value": "torch.tensor(outside_mask).float() * add_const_density",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1110": {
                "data": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv.Plotter(shape=(1, 2))",
                            "Call"
                        ],
                        [
                            "pvqt.BackgroundPlotter()",
                            "Call"
                        ],
                        [
                            "pv.Plotter()",
                            "Call"
                        ],
                        [
                            "ax.scatter(X_left, Y_left, c=relative_error_left, cmap='plasma', alpha=1.0, s=int(N * 0.0005 + 0.5), norm=norm)",
                            "Call"
                        ],
                        [
                            "ax.scatter(X_right, Y_right, c=relative_error_right, cmap='plasma', alpha=1.0, s=int(N * 0.0005 + 0.5), norm=norm)",
                            "Call"
                        ],
                        [
                            "np.zeros((N ** 2, 3))",
                            "Call"
                        ],
                        [
                            "ax.contourf(X, Y, Z, cmap='YlOrRd', levels=levels)",
                            "Call"
                        ],
                        [
                            "ax.contour(X, Y, Z, cmap=cmap, levels=levels)",
                            "Call"
                        ],
                        [
                            "np.zeros((N ** 2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1135": {
                "data": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv.Plotter(shape=(1, 2))",
                            "Call"
                        ],
                        [
                            "pvqt.BackgroundPlotter()",
                            "Call"
                        ],
                        [
                            "pv.Plotter()",
                            "Call"
                        ],
                        [
                            "ax.scatter(X_left, Y_left, c=relative_error_left, cmap='plasma', alpha=1.0, s=int(N * 0.0005 + 0.5), norm=norm)",
                            "Call"
                        ],
                        [
                            "ax.scatter(X_right, Y_right, c=relative_error_right, cmap='plasma', alpha=1.0, s=int(N * 0.0005 + 0.5), norm=norm)",
                            "Call"
                        ],
                        [
                            "np.zeros((N ** 2, 3))",
                            "Call"
                        ],
                        [
                            "ax.contourf(X, Y, Z, cmap='YlOrRd', levels=levels)",
                            "Call"
                        ],
                        [
                            "ax.contour(X, Y, Z, cmap=cmap, levels=levels)",
                            "Call"
                        ],
                        [
                            "np.zeros((N ** 2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1160": {
                "data": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv.Plotter(shape=(1, 2))",
                            "Call"
                        ],
                        [
                            "pvqt.BackgroundPlotter()",
                            "Call"
                        ],
                        [
                            "pv.Plotter()",
                            "Call"
                        ],
                        [
                            "ax.scatter(X_left, Y_left, c=relative_error_left, cmap='plasma', alpha=1.0, s=int(N * 0.0005 + 0.5), norm=norm)",
                            "Call"
                        ],
                        [
                            "ax.scatter(X_right, Y_right, c=relative_error_right, cmap='plasma', alpha=1.0, s=int(N * 0.0005 + 0.5), norm=norm)",
                            "Call"
                        ],
                        [
                            "np.zeros((N ** 2, 3))",
                            "Call"
                        ],
                        [
                            "ax.contourf(X, Y, Z, cmap='YlOrRd', levels=levels)",
                            "Call"
                        ],
                        [
                            "ax.contour(X, Y, Z, cmap=cmap, levels=levels)",
                            "Call"
                        ],
                        [
                            "np.zeros((N ** 2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_157": {
                "obj": {
                    "value": "mascon_masses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_346": {
                "data": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ],
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ],
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_526": {
                "data": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ],
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ],
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "unsqueeze_660": {
                "input": {
                    "value": "outside_mask.float() * add_const_density",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_663": {
                "input": {
                    "value": "rho_candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(nn_inputs).detach() * c",
                            "BinOp"
                        ],
                        [
                            "rho_candidates[mask]",
                            "Subscript"
                        ],
                        [
                            "model(nn_inputs).detach() * c",
                            "BinOp"
                        ],
                        [
                            "rho_candidates[mask]",
                            "Subscript"
                        ],
                        [
                            "model(nn_inputs).detach() * c",
                            "BinOp"
                        ],
                        [
                            "rho_candidates + torch.unsqueeze(outside_mask.float() * add_const_density, 1)",
                            "BinOp"
                        ],
                        [
                            "rho_candidates[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_670": {
                "data": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ],
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ],
                        [
                            "torch.rand(batch_size, 3) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "[[it[0].item(), it[1].item(), it[2].item()] for (it, m) in zip(candidates, mask) if m]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "rand_336": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_339": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_516": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_519": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_652": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_663": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_945": {
                "input": {
                    "value": "torch.sum(torch.abs(model_values_left), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_970": {
                "input": {
                    "value": "torch.sum(torch.abs(model_values_right), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1044": {
                "data": {
                    "value": "outside_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bitwise_not(is_outside_torch(candidates, triangles))",
                            "Call"
                        ],
                        [
                            "np.invert(is_outside(newp, np.asarray(mesh_vertices), np.asarray(mesh_triangles)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_898": {
                "input": {
                    "value": "torch.abs(model_values_left - label_values_left)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_899": {
                "input": {
                    "value": "torch.abs(label_values_left + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_900": {
                "input": {
                    "value": "torch.abs(model_values_right - label_values_right)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_901": {
                "input": {
                    "value": "torch.abs(label_values_right + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_898": {
                "input": {
                    "value": "model_values_left - label_values_left",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_899": {
                "input": {
                    "value": "label_values_left + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_900": {
                "input": {
                    "value": "model_values_right - label_values_right",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_901": {
                "input": {
                    "value": "label_values_right + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_943": {
                "input": {
                    "value": "torch.sum(torch.abs(label_values_left), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_968": {
                "input": {
                    "value": "torch.sum(torch.abs(label_values_right), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_946": {
                "input": {
                    "value": "torch.abs(model_values_left)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_971": {
                "input": {
                    "value": "torch.abs(model_values_right)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_946": {
                "input": {
                    "value": "model_values_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(points_left), 3])",
                            "Call"
                        ],
                        [
                            "torch.cat(model_values_left)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_971": {
                "input": {
                    "value": "model_values_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(points_right), 3])",
                            "Call"
                        ],
                        [
                            "torch.cat(model_values_right)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_943": {
                "input": {
                    "value": "torch.abs(label_values_left)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_968": {
                "input": {
                    "value": "torch.abs(label_values_right)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_943": {
                "input": {
                    "value": "label_values_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(points_left), 3])",
                            "Call"
                        ],
                        [
                            "torch.cat(label_values_left)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_968": {
                "input": {
                    "value": "label_values_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(points_right), 3])",
                            "Call"
                        ],
                        [
                            "torch.cat(label_values_right)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gravann/_sample_observation_points.py": {
        "torch": {
            "zeros_232": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N + sample_step_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_267": {
                "variable": {
                    "value": "grid_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pi / (N + 2)",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "torch.pi - offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mesh_vertices)",
                            "Call"
                        ],
                        [
                            "int(np.round(np.sqrt(N)))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_269": {
                "variable": {
                    "value": "(phi, theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "grid_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(offset, torch.pi - offset, N, device=os.environ['TORCH_DEVICE'])",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "grid_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(offset, torch.pi - offset, N, device=os.environ['TORCH_DEVICE'])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_273": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.flatten(), y.flatten(), z.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_273": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_or_288": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points[:, 0] < domain[0][0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "points[:, 0] > domain[0][1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_or_290": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points[:, 1] < domain[1][0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "points[:, 1] > domain[1][1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_or_292": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points[:, 2] < domain[2][0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "points[:, 2] > domain[2][1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_or_294": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(points[:, 0] < domain[0][0], points[:, 0] > domain[0][1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_or(points[:, 1] < domain[1][0], points[:, 1] > domain[1][1])",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_312": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - 2.0 * torch.rand(N, 1, device=os.environ['TORCH_DEVICE'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_326": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.flatten(), y.flatten(), z.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_326": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_14": {
                "input": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_spherical_grid(N)",
                            "Call"
                        ],
                        [
                            "np.zeros([steps * N, 3])",
                            "Call"
                        ],
                        [
                            "torch.zeros([N + sample_step_size, 3], device=os.environ['TORCH_DEVICE'])",
                            "Call"
                        ],
                        [
                            "torch.stack((x.flatten(), y.flatten(), z.flatten())).transpose(0, 1).to(os.environ['TORCH_DEVICE'])",
                            "Call"
                        ],
                        [
                            "torch.stack((x.flatten(), y.flatten(), z.flatten())).transpose(0, 1).to(os.environ['TORCH_DEVICE'])",
                            "Call"
                        ],
                        [
                            "(torch.rand(approx_necessary_samples, 3, device=os.environ['TORCH_DEVICE']) * 2 - 1) * scale_bounds[1]",
                            "BinOp"
                        ],
                        [
                            "_limit_to_domain(points, domain)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "data": {
                    "value": "points_at_altitude[np.random.choice(points_at_altitude.shape[0], N, replace=replace), :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_270": {
                "input": {
                    "value": "2 * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_271": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(1.0 - 2.0 * torch.rand(N, 1, device=os.environ['TORCH_DEVICE']))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_272": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(1.0 - 2.0 * torch.rand(N, 1, device=os.environ['TORCH_DEVICE']))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_308": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mesh_vertices)",
                            "Call"
                        ],
                        [
                            "int(np.round(np.sqrt(N)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_320": {
                "input": {
                    "value": "uni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minimal_radius_scale + (1.0 - minimal_radius_scale) * torch.rand(N, 1, device=os.environ['TORCH_DEVICE'])",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1 / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_322": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * torch.pi * torch.rand(N, 1, device=os.environ['TORCH_DEVICE'])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_323": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(1.0 - 2.0 * torch.rand(N, 1, device=os.environ['TORCH_DEVICE']))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_324": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(1.0 - 2.0 * torch.rand(N, 1, device=os.environ['TORCH_DEVICE']))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_354": {
                "data": {
                    "value": "[[-1, 1], [-1, 1], [-1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_270": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(1.0 - 2.0 * torch.rand(N, 1, device=os.environ['TORCH_DEVICE']))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_319": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mesh_vertices)",
                            "Call"
                        ],
                        [
                            "int(np.round(np.sqrt(N)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_322": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(1.0 - 2.0 * torch.rand(N, 1, device=os.environ['TORCH_DEVICE']))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_14": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_312": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mesh_vertices)",
                            "Call"
                        ],
                        [
                            "int(np.round(np.sqrt(N)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_350": {
                "*size": {
                    "value": "approx_necessary_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(2 * N * (1.0 / (1.0 - approx)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "points_at_altitude",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centers + altitude * mesh['Normals']",
                            "BinOp"
                        ],
                        [
                            "points_at_altitude[distance_correct]",
                            "Subscript"
                        ],
                        [
                            "points_at_altitude[is_outside_torch(torch.tensor(points_at_altitude).float().detach(), triangles).detach().cpu().numpy()]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "gravann/_stokes.py": {
        "torch": {
            "norm_113": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r * np.sin(theta) * np.cos(phi)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arccos_114": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 2].view(-1, 1) / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_115": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_117": {
                "tensors": {
                    "value": "(r, theta, phi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_138": {
                "input": {
                    "value": "m * sph[:, 2].view(-1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_161": {
                "input": {
                    "value": "m * sph[:, 2].view(-1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_204": {
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_137": {
                "input": {
                    "value": "sph[:, 1].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_160": {
                "input": {
                    "value": "sph[:, 1].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_208": {
                "input": {
                    "value": "1.0 - x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_train.py": {
        "torch": {
            "tensor_111": {
                "variable": {
                    "value": "vision_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_180": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "vision_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_L1_loss(c * predictions_at_vision_targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "predicted * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_283": {
                "f": {
                    "value": "run_folder + 'best_model.mdl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_350": {
                "f": {
                    "value": "folderpath + 'best_model.mdl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "encoding.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "n_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "n_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_utils.py": {
        "torch": {
            "tensor_49": {
                "variable": {
                    "value": "mesh_vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mesh_vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(mesh_vertices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mesh_vertices).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "mesh_triangles",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mesh_triangles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mesh_triangles)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "v0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(mesh_triangles), 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(mesh_triangles), 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(mesh_triangles), 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "os.environ['TORCH_DEVICE']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_99": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points - points[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_101": {
                "variable": {
                    "value": "distances[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(points - points[i], dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_102": {
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(points))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_78": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_folder + 'best_model.mdl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_14": {
                "obj": {
                    "value": "obj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_validation.py": {
        "torch": {
            "cat_137": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_L(target_points, mascon_points, mascon_masses)",
                            "Call"
                        ],
                        [
                            "ACC_L(target_points, mascon_points, mascon_masses)",
                            "Call"
                        ],
                        [
                            "ACC_L_differential(target_points, mascon_points, mascon_masses, mascon_masses_nu)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_L(target_points, mascon_points, mascon_masses)",
                            "Call"
                        ],
                        [
                            "ACC_L(target_points, mascon_points, mascon_masses)",
                            "Call"
                        ],
                        [
                            "ACC_L_differential(target_points, mascon_points, mascon_masses, mascon_masses_nu)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_211": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_L(target_points, mascon_points, mascon_masses)",
                            "Call"
                        ],
                        [
                            "ACC_L(target_points, mascon_points, mascon_masses)",
                            "Call"
                        ],
                        [
                            "ACC_L_differential(target_points, mascon_points, mascon_masses, mascon_masses_nu)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "predicted * predicted",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_143": {
                "input": {
                    "value": "loss_fn(pred, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_146": {
                "input": {
                    "value": "loss_fn(pred.view(-1), labels.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_179": {
                "input": {
                    "value": "loss_fn(pred, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_182": {
                "input": {
                    "value": "loss_fn(pred.view(-1), labels.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_216": {
                "input": {
                    "value": "loss_fn(pred, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_219": {
                "input": {
                    "value": "loss_fn(pred.view(-1), labels.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/_validation_mascon.py": {
        "torch": {
            "cat_100": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_101": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_152": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_201": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_112": {
                "input": {
                    "value": "loss_fn(pred, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_116": {
                "input": {
                    "value": "loss_fn(pred.view(-1), labels.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_163": {
                "input": {
                    "value": "loss_fn(pred, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_167": {
                "input": {
                    "value": "loss_fn(pred.view(-1), labels.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_213": {
                "input": {
                    "value": "loss_fn(pred, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_217": {
                "input": {
                    "value": "loss_fn(pred.view(-1), labels.view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/networks/_abs_layer.py": {
        "torch": {
            "abs_13": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/networks/_nerf.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, identity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gravann/networks/_siren.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sin_40": {
                "input": {
                    "value": "self.omega_0 * self.linear(input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "final_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_45": {
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.omega_0 * self.linear(input)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_benchmark.py": {
        "torch": {}
    }
}