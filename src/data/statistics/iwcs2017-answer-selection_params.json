{
    "experiment/qa/model/__init__.py": {
        "tensorflow": {
            "l2_normalize_105": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, dim=1)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_106": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, dim=1)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_107": {
                "variable": {
                    "value": "euclidean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((a - b) ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "mm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.batch_matmul(tf.reshape(a, [-1, 1, tf.shape(a)[1]]), tf.transpose(tf.reshape(b, [-1, 1, tf.shape(a)[1]]), [0, 2, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_118": {
                "variable": {
                    "value": "sigmoid_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * (mm + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.input_question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.question_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.input_answer_good",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.answer_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.input_answer_bad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.answer_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "dropout_multiplicators",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "question_good * 0.0 + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_regularizer(1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_91": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_95": {
                "x": {
                    "value": "tf.reduce_sum(tf.mul(a, b), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.mul(tf.sqrt(tf.reduce_sum(tf.square(a), 1)), tf.sqrt(tf.reduce_sum(tf.square(b), 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_123": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add(tf.sub(margin, similarity_good_tensor), similarity_bad_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_28": {
                "variable": {
                    "value": "embeddings_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "embeddings_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "data.embeddings.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embeddings_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(data.embeddings)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "self.trainable_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_33": {
                "variable": {
                    "value": "self.embeddings_question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddings', data.embeddings.shape, dtype=tf.float32, initializer=embeddings_init, trainable=self.trainable_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_question",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_34": {
                "variable": {
                    "value": "self.embeddings_answer_good",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddings', data.embeddings.shape, dtype=tf.float32, initializer=embeddings_init, trainable=self.trainable_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_answer_good",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_35": {
                "variable": {
                    "value": "self.embeddings_answer_bad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddings', data.embeddings.shape, dtype=tf.float32, initializer=embeddings_init, trainable=self.trainable_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_answer_bad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "tf.mul(a, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "(a - b) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_125": {
                "x": {
                    "value": "tf.sub(margin, similarity_good_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "similarity_bad_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity_bad_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_27": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_69": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_70": {
                "input_tensor": {
                    "value": "self.loss_individual",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_91": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_98": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(a), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_99": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(b), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, dim=1)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(a)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "a": {
                    "value": "tf.reshape(b, [-1, 1, tf.shape(a)[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.square(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "tf.square(b)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, dim=1)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(a)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_98": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, dim=1)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_99": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, dim=1)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_110": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, dim=1)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_112": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, dim=1)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiment/qa/model/cnn.py": {
        "tensorflow": {
            "expand_dims_65": {
                "variable": {
                    "value": "cnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bias_add_67": {
                "variable": {
                    "value": "convoluted",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(cnn_input, self.W_conv1, strides=[1, 1, self.embedding_size, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b_conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "convoluted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(cnn_input, self.W_conv1, strides=[1, 1, self.embedding_size, 1], padding='SAME'), self.b_conv1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, self.n_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "input": {
                    "value": "cnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(item, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, self.embedding_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/qa/model/cnn_lstm.py": {
        "tensorflow": {
            "tanh_21": {
                "x": {
                    "value": "raw_representation_question",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_representation_raw(self.embeddings_question, self.question_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_26": {
                "x": {
                    "value": "raw_representation_answer_good",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_representation_raw(self.embeddings_answer_good, self.answer_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_31": {
                "x": {
                    "value": "raw_representation_answer_bad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_representation_raw(self.embeddings_answer_bad, self.answer_length)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiment/qa/model/helper/lw.py": {
        "tensorflow": {
            "to_int64_32": {
                "variable": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tensor_non_zero_token, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "flat_lstm_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, lstm_outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.lw_cell_size + self.lw_cell_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "dense_mul_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flat_lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(lstm_output, [-1, self.lw_cell_size + self.lw_cell_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "dense_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense_weighting_Q",
                            "Attribute"
                        ],
                        [
                            "self.dense_weighting_A",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "h1_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense_mul_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(flat_lstm_output, dense_weight)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(raw_representation)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_35": {
                "variable": {
                    "value": "(lstm_outputs, _last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstm_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_cell_weighting_Q_fw",
                            "Attribute"
                        ],
                        [
                            "self.lstm_cell_weighting_A_fw",
                            "Attribute"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstm_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_cell_weighting_Q_bw",
                            "Attribute"
                        ],
                        [
                            "self.lstm_cell_weighting_A_bw",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "raw_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_representation",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int64(tf.reduce_sum(tensor_non_zero_token, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_43": {
                "variable": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "lstm_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(lstm_cell_fw, lstm_cell_bw, raw_representation, dtype=tf.float32, sequence_length=sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_61": {
                "variable": {
                    "value": "self.lstm_cell_weighting_Q_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "cell_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lw_cell_size",
                            "Attribute"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_64": {
                "variable": {
                    "value": "self.lstm_cell_weighting_Q_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "cell_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lw_cell_size",
                            "Attribute"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_67": {
                "variable": {
                    "value": "self.lstm_cell_weighting_A_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "cell_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lw_cell_size",
                            "Attribute"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_70": {
                "variable": {
                    "value": "self.lstm_cell_weighting_A_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "cell_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lw_cell_size",
                            "Attribute"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_31": {
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_32": {
                "input_tensor": {
                    "value": "tensor_non_zero_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "non_zero_tokens(tf.to_float(indices))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "'lstm_{}'.format(item_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "re_use",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item_type in self.__lstm_history",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "lstm_cell_weighting_Q_fw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "lstm_cell_weighting_Q_bw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "lstm_cell_weighting_A_fw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "lstm_cell_weighting_A_bw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_48": {
                "input": {
                    "value": "raw_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_representation",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiment/qa/model/helper/pooling_helper.py": {
        "tensorflow": {
            "transpose_41": {
                "variable": {
                    "value": "answer_transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "raw_answer_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_answer_rep",
                            "Method Argument"
                        ],
                        [
                            "raw_answer_rep",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "raw_question_rep_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "raw_question_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_question_rep",
                            "Method Argument"
                        ],
                        [
                            "raw_question_rep",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(raw_question_rep)[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "QU_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "raw_question_rep_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(raw_question_rep, [-1, tf.shape(raw_question_rep)[2]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "U_AP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_AP",
                            "Method Argument"
                        ],
                        [
                            "U_AP",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "QU",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "QU_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(raw_question_rep_flat, U_AP)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(raw_question_rep)[1], tf.shape(raw_question_rep)[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "QUA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.batch_matmul(QU, answer_transposed)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "additions_G_question",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape((tokens_question_non_zero - 1) * 2, [-1, 1, tf.shape(tokens_question_non_zero)[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "additions_G_answer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "(tokens_answer_non_zero - 1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(tokens_answer_non_zero)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(attention) * indices_non_zero",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "additions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "(non_zero - 1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, tf.shape(tokens)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_94": {
                "variable": {
                    "value": "tanh_item",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item",
                            "Method Argument"
                        ],
                        [
                            "item",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_118": {
                "variable": {
                    "value": "tokens_question_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tokens_question",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens_question",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_119": {
                "variable": {
                    "value": "tokens_answer_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tokens_answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens_answer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_125": {
                "variable": {
                    "value": "maxpool_GQ",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(QUA)",
                            "Call"
                        ],
                        [
                            "soft_alignment(U_AP, raw_question_rep, raw_answer_rep, tokens_question_non_zero, tokens_answer_non_zero)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_126": {
                "variable": {
                    "value": "maxpool_GA",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(QUA)",
                            "Call"
                        ],
                        [
                            "soft_alignment(U_AP, raw_question_rep, raw_answer_rep, tokens_question_non_zero, tokens_answer_non_zero)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "tensor": {
                    "value": "pooled_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.batch_matmul(tf.reshape(positional_weighting_non_zero, [-1, 1, tf.shape(positional_weighting)[1]]), raw_representation)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(raw_representation)[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ceil_28": {
                "x": {
                    "value": "tokens / tf.reduce_max(tokens, [1], keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_101": {
                "input_tensor": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item",
                            "Method Argument"
                        ],
                        [
                            "item",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "tensor": {
                    "value": "positional_weighting_non_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "non_zero_tokens(tf.to_float(tokens)) * positional_weighting",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(positional_weighting)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "(tokens_question_non_zero - 1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, tf.shape(tokens_question_non_zero)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_74": {
                "x": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_87": {
                "x": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_13": {
                "x": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_28": {
                "input_tensor": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_18": {
                "input": {
                    "value": "raw_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_representation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "raw_question_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_question_rep",
                            "Method Argument"
                        ],
                        [
                            "raw_question_rep",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_48": {
                "input": {
                    "value": "raw_question_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_question_rep",
                            "Method Argument"
                        ],
                        [
                            "raw_question_rep",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_59": {
                "input": {
                    "value": "tokens_answer_non_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "non_zero_tokens(tokens_answer_float)",
                            "Call"
                        ],
                        [
                            "tokens_answer_non_zero",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_90": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_15": {
                "input": {
                    "value": "positional_weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positional_weighting",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_56": {
                "input": {
                    "value": "tokens_question_non_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "non_zero_tokens(tokens_question_float)",
                            "Call"
                        ],
                        [
                            "tokens_question_non_zero",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiment/qa/model/lstm.py": {
        "tensorflow": {
            "to_int64_73": {
                "variable": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tensor_non_zero_token, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_58": {
                "variable": {
                    "value": "self.lstm_cell_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.lstm_cell_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_60": {
                "variable": {
                    "value": "self.lstm_cell_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.lstm_cell_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_76": {
                "variable": {
                    "value": "(output, _last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self.lstm_cell_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self.lstm_cell_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int64(tf.reduce_sum(tensor_non_zero_token, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_42": {
                "x": {
                    "value": "self.input_question",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_43": {
                "x": {
                    "value": "self.input_answer_good",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_44": {
                "x": {
                    "value": "self.input_answer_bad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "lstm_cell_fw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "lstm_cell_bw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_72": {
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "tensor_non_zero_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "non_zero_tokens(tf.to_float(indices))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lstm'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "re_use_lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "re_use_lstm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_84": {
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(self.lstm_cell_forward, self.lstm_cell_backward, item, dtype=tf.float32, sequence_length=sequence_length)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiment/qa/train/__init__.py": {
        "tensorflow": {
            "placeholder_158": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SummaryWriter_48": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_361": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "AdamOptimizer_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_165": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/qa/train/no_training.py": {
        "tensorflow": {
            "initialize_all_variables_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_experiment.py": {
        "tensorflow": {
            "ConfigProto_39": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_45": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_47": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/run_hyperparameter_optimization.py": {
        "tensorflow": {
            "ConfigProto_15": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_29": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_87": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/experiment/qa/model/test_pooling_helper.py": {
        "tensorflow": {
            "InteractiveSession_13": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_19": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[24.0, 22.0, 11234.0, 0.0, 0.0], [31.0, 0.0, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "vector_in",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 2.0, 1.0, 2.0], [0.3, 0.2, 0.9, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0, 1.0, 0.0], [1.0, 1.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "U_AP",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0], [1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "raw_question_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.2, 0.7], [0.4, 0.8], [0.1, 0.9], [0.7, 0.8]]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_65": {
                "variable": {
                    "value": "raw_answer_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.3, 0.9], [0.5, 0.9], [0.7, 0.6], [0.9, 0.7]]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "tokens_question_non_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0, 0.0, 0.0]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "tokens_answer_non_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0, 1.0, 0.0]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_114": {
                "variable": {
                    "value": "U_AP",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0], [1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_120": {
                "variable": {
                    "value": "raw_question_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.2, 0.7], [0.4, 0.8], [0.1, 0.9], [0.7, 0.8]]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_128": {
                "variable": {
                    "value": "raw_answer_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.3, 0.9], [0.5, 0.9], [0.7, 0.6], [0.9, 0.7]]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_136": {
                "variable": {
                    "value": "tokens_question",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[123, 6, 0.0, 0.0]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_141": {
                "variable": {
                    "value": "tokens_answer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[33, 1, 12, 0.0]] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}