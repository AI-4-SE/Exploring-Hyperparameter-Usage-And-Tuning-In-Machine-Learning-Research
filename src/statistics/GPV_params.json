{
    "evaluate.py": {
        "sklearn": {
            "confusion_matrix_340": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "speech_frame_ground_truth",
                    "possible_values": [
                        [
                            "np.concatenate(speech_frame_ground_truth, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "speech_frame_predictions",
                    "possible_values": [
                        [
                            "np.concatenate(speech_frame_predictions, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_347": {
                "variable": {
                    "value": "(precision, recall, f1, _)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "speech_frame_ground_truth",
                    "possible_values": [
                        [
                            "np.concatenate(speech_frame_ground_truth, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "speech_frame_predictions",
                    "possible_values": [
                        [
                            "np.concatenate(speech_frame_predictions, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "avgtype",
                    "possible_values": [
                        [
                            "('micro', 'macro', 'binary')",
                            "Tuple"
                        ]
                    ]
                }
            },
            "roc_auc_score_344": {
                "y_true": {
                    "value": "speech_frame_ground_truth",
                    "possible_values": [
                        [
                            "np.concatenate(speech_frame_ground_truth, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "speech_frame_prob_predictions",
                    "possible_values": [
                        [
                            "np.concatenate(speech_frame_prob_predictions, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_23": {
                "variable": {
                    "value": "DEVICE",
                    "possible_values": []
                },
                "type": {
                    "value": "DEVICE",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "'cuda'",
                            "Constant"
                        ],
                        [
                            "torch.device(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_230": {
                "variable": {
                    "value": "encoder",
                    "possible_values": []
                },
                "f": {
                    "value": "model_kwargs_pack['encoder']",
                    "possible_values": []
                }
            },
            "DataLoader_251": {
                "variable": {
                    "value": "dloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "possible_values": [
                        [
                            "OnlineLogMelDataset(data['filename'].values.tolist(), hop_length=args.hop_length, n_fft=args.n_fft, win_length=args.win_length, n_mels=args.n_mels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "as_tensor_270": {
                "variable": {
                    "value": "feature",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "possible_values": [
                        [
                            "torch.as_tensor(feature).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "forward.py": {
        "sklearn": {},
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "possible_values": []
                },
                "type": {
                    "value": "DEVICE",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "'cuda'",
                            "Constant"
                        ],
                        [
                            "torch.device(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "dloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "possible_values": [
                        [
                            "OnlineLogMelDataset(wavlist, **LMS_ARGS)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_133": {
                "variable": {
                    "value": "encoder",
                    "possible_values": []
                },
                "f": {
                    "value": "model_kwargs_pack['encoder']",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "as_tensor_148": {
                "variable": {
                    "value": "feature",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "possible_values": [
                        [
                            "torch.as_tensor(feature).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "binarize_20": {
                "X": {
                    "value": "x",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "binarize_18": {
                "X": {
                    "value": "sub",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "models.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(__file__).parent / pretrained_file",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.block",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(cin)",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.features",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block2D(1, 32)",
                    "possible_values": []
                }
            },
            "GRU_111": {
                "variable": {
                    "value": "self.gru",
                    "possible_values": []
                },
                "*args": {
                    "value": "rnn_input_dim",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.outputlayer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outputdim",
                    "possible_values": [
                        [
                            "527",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "decision_time",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputlayer(x)",
                    "possible_values": []
                }
            },
            "clamp_129": {
                "variable": {
                    "value": "decision_time",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-07",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "decision_time",
                    "possible_values": []
                },
                "input": {
                    "value": "decision_time.transpose(1, 2)",
                    "possible_values": []
                },
                "size": {
                    "value": "time",
                    "possible_values": []
                },
                "mode": {
                    "value": "linear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "transpose_130": {
                "variable": {
                    "value": "decision_time",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_55": {
                "input": {
                    "value": "decision",
                    "possible_values": [
                        [
                            "self.temp_pool(x, decision_time).clamp(1e-07, 1.0).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.pooldim",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "cin",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "cin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "LPPool2d_97": {
                "norm_type": {
                    "value": "4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 4)",
                    "possible_values": []
                }
            },
            "LPPool2d_100": {
                "norm_type": {
                    "value": "4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 4)",
                    "possible_values": []
                }
            },
            "LPPool2d_103": {
                "norm_type": {
                    "value": "4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "p": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_107": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "500",
                    "possible_values": []
                },
                "layout": {
                    "value": "inputdim",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}