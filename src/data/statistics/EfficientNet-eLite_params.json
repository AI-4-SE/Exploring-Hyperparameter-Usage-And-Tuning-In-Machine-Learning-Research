{
    "EfficientNet-eLite/FastAutoAugment/lr_scheduler.py": {
        "torch": {}
    },
    "EfficientNet-eLite/FastAutoAugment/tf_port/rmsprop.py": {
        "torch": {
            "ones_like_80": {
                "variable": {
                    "value": "state[ms]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "state[mom]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_93": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.add(group['weight_decay'], p.data)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.add(group['weight_decay'], p.data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "EfficientNet-eLite/FastAutoAugment/tf_port/tpu_bn.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_38": {
                "variable": {
                    "value": "shard_square_of_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shard_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "shard_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_45": {
                "input": {
                    "value": "group_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shard_mean.clone().detach()",
                            "Call"
                        ],
                        [
                            "group_mean.detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "group_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shard_mean.clone().detach()",
                            "Call"
                        ],
                        [
                            "group_mean.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_56": {
                "input": {
                    "value": "group_vars.view(1, group_vars.shape[0], 1, 1) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_initialized_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_31": {
                "input": {
                    "value": "self.running_var.view(1, self.running_var.shape[0], 1, 1) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}