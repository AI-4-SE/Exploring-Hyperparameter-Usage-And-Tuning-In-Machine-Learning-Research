{
    "MAGAN/model.py": {
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "self.xb1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.dim_b1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "xb1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.xb2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.dim_b2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "xb2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_58": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_79": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "restore_folder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "import_meta_graph_80": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "'{}.meta'.format(ckpt.model_checkpoint_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "self.loss_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tns.name[:-2].replace('loss_', '').split('/')[-1] for tns in tf.get_collection('losses')]",
                            "ListComp"
                        ],
                        [
                            "self.sess.run(ls, feed_dict=feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_145": {
                "variable": {
                    "value": "self.loss_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tns.name[:-2].replace('loss_', '').split('/')[-1] for tns in tf.get_collection('losses')]",
                            "ListComp"
                        ],
                        [
                            "self.sess.run(ls, feed_dict=feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_152": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_45": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_46": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_118": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_119": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_157": {
                "variable": {
                    "value": "optG",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_161": {
                "variable": {
                    "value": "optD",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_223": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "h1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_224": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, 200, activation=self.activation, reuse=reuse, name='h1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 800, activation=self.activation, reuse=reuse, name='h1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "h2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_225": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(h1, 100, activation=self.activation, reuse=reuse, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h1, 400, activation=self.activation, reuse=reuse, name='h2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "h3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_227": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(h2, 50, activation=self.activation, reuse=reuse, name='h3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h2, 200, activation=self.activation, reuse=reuse, name='h3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_244": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "800",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "h1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_245": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, 200, activation=self.activation, reuse=reuse, name='h1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 800, activation=self.activation, reuse=reuse, name='h1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "h2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_246": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(h1, 100, activation=self.activation, reuse=reuse, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h1, 400, activation=self.activation, reuse=reuse, name='h2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "h3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_247": {
                "variable": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(h2, 50, activation=self.activation, reuse=reuse, name='h3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h2, 200, activation=self.activation, reuse=reuse, name='h3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "h4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_248": {
                "variable": {
                    "value": "h5",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(h3, 100, activation=self.activation, reuse=reuse, name='h4')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "h5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(h4, 50, activation=self.activation, reuse=reuse, name='h5')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GPUOptions_48": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "limit_gpu_fraction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConfigProto_49": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=limit_gpu_fraction)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_50": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_52": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_125": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D1_probs_z, labels=tf.ones_like(self.D1_probs_z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D2_probs_z, labels=tf.ones_like(self.D2_probs_z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D1_probs_G, labels=tf.zeros_like(self.D1_probs_G))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D2_probs_G, labels=tf.zeros_like(self.D2_probs_G))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D1_probs_G, labels=tf.ones_like(self.D1_probs_G))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_137": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D2_probs_G, labels=tf.ones_like(self.D2_probs_G))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "input_tensor": {
                    "value": "(self.xb1 - self.xb1_reconstructed) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_140": {
                "input_tensor": {
                    "value": "(self.xb2 - self.xb2_reconstructed) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_156": {
                "control_inputs": {
                    "value": "G_update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[op for op in update_ops if 'G12' in op.name or 'G21' in op.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_160": {
                "control_inputs": {
                    "value": "D_update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[op for op in update_ops if 'D1' in op.name or 'D2' in op.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_125": {
                "logits": {
                    "value": "self.D1_probs_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(self.D1_probs_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_126": {
                "logits": {
                    "value": "self.D2_probs_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(self.D2_probs_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_128": {
                "logits": {
                    "value": "self.D1_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(self.D1_probs_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_129": {
                "logits": {
                    "value": "self.D2_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(self.D2_probs_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_136": {
                "logits": {
                    "value": "self.D1_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(self.D1_probs_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_137": {
                "logits": {
                    "value": "self.D2_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(self.D2_probs_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "self.correspondence_loss(self.xb1, self.Gb2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "input_tensor": {
                    "value": "self.correspondence_loss(self.xb2, self.Gb1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_191": {
                "key": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_200": {
                "key": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "self.D1_probs_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_126": {
                "input": {
                    "value": "self.D2_probs_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "input": {
                    "value": "self.D1_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "input": {
                    "value": "self.D2_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_136": {
                "input": {
                    "value": "self.D1_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_137": {
                "input": {
                    "value": "self.D2_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MAGAN/train.py": {
        "tensorflow": {
            "constant_35": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "(b1[:, c1] - b2[:, c2]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MAGAN/utils.py": {
        "tensorflow": {
            "identity_17": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(op, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_13": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}