{
    "models/__init__.py": {
        "torch": {
            "load_238": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, '%s_%s_%s.pth.tar' % (dataset_name, model.name, uid))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, '%s_%s_%s.pth.tar' % (dataset_name, model.name, uid))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_232": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'name': model.name, 'state_dict': model.state_dict() if type(model) is not nn.DataParallel else model.module.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, '%s_%s_%s.pth.tar' % (dataset_name, model.name, uid))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, '%s_%s_%s.pth.tar' % (dataset_name, model.name, uid))",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_261": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_215": {
                "*size": {
                    "value": "[3, 3, 224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_217": {
                "*size": {
                    "value": "[3, 3, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/alexnet.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layer0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layer1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layer2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.classifier",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if stem else 2",
                            "IfExp"
                        ],
                        [
                            "3 if stem else 2",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if stem else 2",
                            "IfExp"
                        ],
                        [
                            "3 if stem else 2",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if stem else 2",
                            "IfExp"
                        ],
                        [
                            "3 if stem else 2",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_48": {
                "output_size": {
                    "value": "(out_size, out_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/alexnet_dnn_block.py": {
        "torch": {}
    },
    "models/alexnet_mcdo_block.py": {
        "torch": {
            "dropout_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/classifier_block.py": {
        "torch": {
            "AdaptiveAvgPool2d_12": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_30": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_74": {
                "variable": {
                    "value": "self.gmp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_107": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_124": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_94": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.dense1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.dense2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.dense3(x)",
                            "Call"
                        ],
                        [
                            "self.gmp(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], x.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(x, k=int(x.size()[2] / 2), dim=2)[0][:, :, -1]",
                            "Subscript"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "self.temp * (F.sigmoid(x / self.temp) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.dense1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.dense2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.dense3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "int(x.size()[2] / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "input": {
                    "value": "x / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/ensemble.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_18": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model(x) for model in self.models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "logsumexp_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([model(x) for model in self.models])",
                            "Call"
                        ],
                        [
                            "xs - torch.logsumexp(xs, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_19": {
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([model(x) for model in self.models])",
                            "Call"
                        ],
                        [
                            "xs - torch.logsumexp(xs, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_36": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, self.pad_size, mode=self.pad_mode)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.filter, groups=x.size()[1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.pad_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.pad_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "self.filter_proto",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_71": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "i, j -> i j",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.filter_proto",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, self.pad_size, mode=self.pad_mode)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.filter, groups=x.size()[1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, self.pad_size, mode=self.pad_mode)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.filter, groups=x.size()[1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-(-x.size()[2] // self.strides[0]), -(-x.size()[3] // self.strides[1]))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/preresnet.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layer0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/preresnet_dnn_block.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.shortcut",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.shortcut",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/preresnet_mcdo_block.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.shortcut",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "skip + x",
                            "BinOp"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "skip + x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.shortcut",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "dropout_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "skip + x",
                            "BinOp"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "skip + x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/prevggnet.py": {
        "torch": {}
    },
    "models/prevggnet_dnn_block.py": {
        "torch": {}
    },
    "models/prevggnet_mcdo_block.py": {
        "torch": {
            "dropout_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layer0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.classifier",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_45": {
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_dnn_block.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.shortcut",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.shortcut",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_mcdo_block.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.shortcut",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "skip + x",
                            "BinOp"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "skip + x",
                            "BinOp"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.shortcut",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "skip + x",
                            "BinOp"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "skip + x",
                            "BinOp"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/smoothing_block.py": {
        "torch": {
            "Tanh_13": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_35": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_57": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_76": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_97": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temp * self.tanh(x / self.temp)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.temp * self.tanh(x / self.temp)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.temp * self.tanh(x / self.temp)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "4 * self.temp * (self.sigmoid(x / self.temp) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.temp * self.softmax(x / self.temp)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, 0.0, self.temp)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x / self.temp",
                            "BinOp"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x / self.temp",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, 0.0, self.thr)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temp * self.tanh(x / self.temp)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.temp * self.tanh(x / self.temp)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.temp * self.tanh(x / self.temp)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "4 * self.temp * (self.sigmoid(x / self.temp) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.temp * self.softmax(x / self.temp)",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, 0.0, self.temp)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x / self.temp",
                            "BinOp"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x / self.temp",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, 0.0, self.thr)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "self.thr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/vggnet.py": {
        "torch": {
            "Sequential_38": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.classifier",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_34": {
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/vggnet_dnn_block.py": {
        "torch": {}
    },
    "models/vggnet_mcdo_block.py": {
        "torch": {
            "dropout_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.rate)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ops/cifarp.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / 255.0",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).float()",
                            "Call"
                        ],
                        [
                            "(x - mean) / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mean.reshape((1, 3, 1, 1))",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.std.reshape((1, 3, 1, 1))",
                            "Call"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ops/datasets.py": {
        "torch": {}
    },
    "ops/loss_landscapes.py": {
        "torch": {
            "norm_14": {
                "variable": {
                    "value": "ws_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_15": {
                "variable": {
                    "value": "bs_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "ignored_ws[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "ws[k].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ws[k].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_32": {
                "size": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda' if gpu else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "torch.stack([g[k] for g in gs])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_59": {
                "tensors": {
                    "value": "[g[k] for g in gs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "ops/norm.py": {
        "torch": {
            "tensor_5": {
                "variable": {
                    "value": "l1_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "l2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_9": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_19": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ops/schedulers.py": {
        "torch": {}
    },
    "ops/tests.py": {
        "torch": {
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.softmax(model(xs), dim=1) for _ in range(n_ff)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack([model(xs) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.softmax(ys_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.reshape([b, -1, 10])",
                            "Call"
                        ],
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.argsort(axis=1)[:, -k:][:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(ys_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model(xs) for _ in range(n_ff)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack([model(xs) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.softmax(ys_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.reshape([b, -1, 10])",
                            "Call"
                        ],
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.argsort(axis=1)[:, -k:][:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(ys_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack([model(xs) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.softmax(ys_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.reshape([b, -1, 10])",
                            "Call"
                        ],
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.argsort(axis=1)[:, -k:][:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(ys_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_161": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack([model(xs) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.softmax(ys_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.reshape([b, -1, 10])",
                            "Call"
                        ],
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.argsort(axis=1)[:, -k:][:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(ys_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_163": {
                "variable": {
                    "value": "cons",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cons.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_180": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_184": {
                "variable": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.softmax(model(xs), dim=1) for _ in range(n_ff)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_185": {
                "variable": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack([model(xs) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.softmax(ys_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.reshape([b, -1, 10])",
                            "Call"
                        ],
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.argsort(axis=1)[:, -k:][:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(ys_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_167": {
                "input": {
                    "value": "ys_pred[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_168": {
                "input": {
                    "value": "cec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys_pred[:, 1:] * torch.log(ys_pred[:, :-1])",
                            "BinOp"
                        ],
                        [
                            "-torch.mean(cec, dim=-1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "synchronize_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_54": {
                "input": {
                    "value": "ys_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(xs, ys)",
                            "Call"
                        ],
                        [
                            "ys",
                            "variable"
                        ],
                        [
                            "ys_t.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_62": {
                "input": {
                    "value": "model(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "input": {
                    "value": "model(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "ys_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack([model(xs) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.softmax(ys_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.reshape([b, -1, 10])",
                            "Call"
                        ],
                        [
                            "torch.stack([F.softmax(model(xs), dim=1) for _ in range(n_ff)])",
                            "Call"
                        ],
                        [
                            "torch.mean(ys_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "ys_pred.argsort(axis=1)[:, -k:][:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(ys_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ],
                        [
                            "ys_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ops/trains.py": {
        "torch": {
            "CrossEntropyLoss_83": {
                "variable": {
                    "value": "nll_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_17": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_25": {
                "variable": {
                    "value": "train_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), **kwargs)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), **kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}