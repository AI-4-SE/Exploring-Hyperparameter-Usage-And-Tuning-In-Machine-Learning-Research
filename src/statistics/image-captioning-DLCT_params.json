{
    "data/__init__.py": {
        "torch": {}
    },
    "data/dataset.py": {
        "torch": {}
    },
    "data/field.py": {
        "torch": {
            "tensor_324": {
                "variable": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(lengths, dtype=self.dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[self.vocab.stoi[x] for x in ex] for ex in arr]",
                            "ListComp"
                        ],
                        [
                            "self.postprocessing(arr, self.vocab)",
                            "Call"
                        ],
                        [
                            "[[self.vectors[x] for x in ex] for ex in arr]",
                            "ListComp"
                        ],
                        [
                            "[numericalization_func(x) if isinstance(x, six.string_types) else x for x in arr]",
                            "ListComp"
                        ],
                        [
                            "self.postprocessing(arr, None)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_352": {
                "tensors": {
                    "value": "[a.unsqueeze(0) for a in ar]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_352": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data/vocab.py": {
        "torch": {
            "Tensor_171": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_331": {
                "variable": {
                    "value": "vector",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_286": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_294": {
                "variable": {
                    "value": "(self.itos, self.stoi, self.vectors, self.dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path_pt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cache, os.path.basename(name)) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "path + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_291": {
                "obj": {
                    "value": "(self.itos, self.stoi, self.vectors, self.dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path_pt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cache, os.path.basename(name)) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "path + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_201": {}
        }
    },
    "eval.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_132": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT/attention.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_70": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_141": {
                "variable": {
                    "value": "w_mn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(w_g, min=1e-06)) + w_a",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(w_mn, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_145": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_160": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_161": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_199": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_200": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "self.running_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_keys, keys]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "self.running_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_values, values]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "self.running_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_keys, keys]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "self.running_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_values, values]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_140": {
                "input": {
                    "value": "torch.clamp(w_g, min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_140": {
                "input": {
                    "value": "w_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "box_relation_embed_matrix",
                            "Name"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_181": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, box_relation_embed_matrix, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, box_relation_embed_matrix, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_220": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, box_relation_embed_matrix, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, box_relation_embed_matrix, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/DLCT/decoders.py": {
        "torch": {
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_23": {
                "variable": {
                    "value": "self.lnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_26": {
                "variable": {
                    "value": "self.lnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_68": {
                "variable": {
                    "value": "mask_self_attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((seq_len, seq_len), dtype=torch.uint8, device=input.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_78": {
                "variable": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "self.running_mask_self_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_mask_self_attention.type_as(mask_self_attention), mask_self_attention]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_101": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_emb(input) + self.pos_emb(seq)",
                            "BinOp"
                        ],
                        [
                            "l(out, encoder_output, mask_queries, mask_self_attention, mask_encoder, pos=pos)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "(1, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT/encoders.py": {
        "torch": {
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_18": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_50": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.layers_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SelfAtt(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.layers_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SelfAtt(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.region2grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LCCA(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.grid2region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LCCA(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.WGs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(64, 1, bias=True) for _ in range(h)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_135": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "n_regions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "regions.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "out_region.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_139": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "n_grids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grids.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "out_region.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "pos_cross",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_region, out_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask_region, attention_mask_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.fc_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_178": {
                "variable": {
                    "value": "self.dropout_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_179": {
                "variable": {
                    "value": "self.layer_norm_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_182": {
                "variable": {
                    "value": "self.dropout_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_183": {
                "variable": {
                    "value": "self.layer_nrom_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "out_region",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_region(regions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_194": {
                "variable": {
                    "value": "out_grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_grid(grids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "out_all",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_region, out_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "[tmp_mask, aligns]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[aligns.permute(0, 1, 3, 2), tmp_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_186": {
                "input": {
                    "value": "regions",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "grids",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "regions == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "grids == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT/transformer.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.box_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "region_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "region_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.box_embedding(boxes)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(region_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "grid_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.grid_embedding(grids.view(bs, 7, 7, -1))",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(grid_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "torch.cat(out_ensemble, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "(b_s, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "out_ensemble",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.region_embed, self.grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "weight_files[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT/utils.py": {
        "torch": {
            "arange_8": {
                "variable": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "d_model // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_9": {
                "variable": {
                    "value": "sin",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input / 10000 ** (2 * dim / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_10": {
                "variable": {
                    "value": "cos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input / 10000 ** (2 * dim / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input.shape[0], d_model)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_19": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_39": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_44": {
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((input.shape[0], d_model), device=input.device)",
                            "Call"
                        ],
                        [
                            "position_embedding(pos, d_model)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(input)",
                            "Call"
                        ],
                        [
                            "self.fc2(self.dropout_2(F.relu(self.fc1(out))))",
                            "Call"
                        ],
                        [
                            "input + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.fc2(self.dropout_2(F.relu(self.fc1(input))))",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(input + out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.fc1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT_Qalpha/attention.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_v(values), m_v], 1).view(b_s, nk + self.m, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_75": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.m_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, m, h * d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.m_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, m, h * d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.fc_k(keys), m_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_138": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.fc_v(values), m_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_140": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_v(values), m_v], 1).view(b_s, nk + self.m, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_149": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_165": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "self.running_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_keys, keys]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "self.running_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_values, values]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_k(keys), m_k], 1).view(b_s, nk + self.m, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_143": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_k(keys), m_k], 1).view(b_s, nk + self.m, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_185": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/DLCT_Qalpha/decoders.py": {
        "torch": {
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_24": {
                "variable": {
                    "value": "self.lnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_27": {
                "variable": {
                    "value": "self.lnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.region_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "region_alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.region_alpha(self_att)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_70": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_88": {
                "variable": {
                    "value": "mask_self_attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((seq_len, seq_len), dtype=torch.uint8, device=input.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "self.running_mask_self_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_mask_self_attention.type_as(mask_self_attention), mask_self_attention]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_121": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_emb(input) + self.pos_emb(seq)",
                            "BinOp"
                        ],
                        [
                            "l(out, encoder_output, mask_queries, mask_self_attention, mask_encoder, pos_enc=pos)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "(1, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT_Qalpha/encoders.py": {
        "torch": {
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_18": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_50": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.layers_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.layers_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.region2grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CrossEncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.grid2region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CrossEncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.WGs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(64, 1, bias=True) for _ in range(h)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_135": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "n_regions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "regions.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "out_region.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_139": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "n_grids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grids.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "out_region.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "pos_cross",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_region, out_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask_region, attention_mask_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.fc_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_178": {
                "variable": {
                    "value": "self.dropout_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_179": {
                "variable": {
                    "value": "self.layer_norm_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_182": {
                "variable": {
                    "value": "self.dropout_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_183": {
                "variable": {
                    "value": "self.layer_nrom_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "out_region",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_region(regions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_194": {
                "variable": {
                    "value": "out_grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_grid(grids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "out_all",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_region, out_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "[tmp_mask, aligns]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[aligns.permute(0, 1, 3, 2), tmp_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_186": {
                "input": {
                    "value": "regions",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "grids",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "regions == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "grids == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT_Qalpha/transformer.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.box_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "region_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "region_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.box_embedding(boxes)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(region_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "grid_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.grid_embedding(grids.view(bs, 7, 7, -1))",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(grid_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "torch.cat(out_ensemble, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "(b_s, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "out_ensemble",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.region_embed, self.grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "weight_files[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT_Qalpha/utils.py": {
        "torch": {
            "arange_8": {
                "variable": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "d_model // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_9": {
                "variable": {
                    "value": "sin",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input / 10000 ** (2 * dim / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_10": {
                "variable": {
                    "value": "cos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input / 10000 ** (2 * dim / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input.shape[0], d_model)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_19": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_39": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_44": {
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((input.shape[0], d_model), device=input.device)",
                            "Call"
                        ],
                        [
                            "position_embedding(pos, d_model)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(input)",
                            "Call"
                        ],
                        [
                            "self.fc2(self.dropout_2(F.relu(self.fc1(out))))",
                            "Call"
                        ],
                        [
                            "input + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.fc2(self.dropout_2(F.relu(self.fc1(input))))",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(input + out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.fc1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT_Qalpha2/attention.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_v(values), m_v], 1).view(b_s, nk + self.m, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_75": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.m_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, m, h * d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.m_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, m, h * d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.fc_k(keys), m_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_138": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.fc_v(values), m_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_140": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_v(values), m_v], 1).view(b_s, nk + self.m, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_149": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_165": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "self.running_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_keys, keys]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "self.running_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_values, values]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_k(keys), m_k], 1).view(b_s, nk + self.m, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_143": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_k(keys), m_k], 1).view(b_s, nk + self.m, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_185": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/DLCT_Qalpha2/decoders.py": {
        "torch": {
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_24": {
                "variable": {
                    "value": "self.lnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_27": {
                "variable": {
                    "value": "self.lnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.region_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "region_alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.region_alpha(self_att)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_70": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_88": {
                "variable": {
                    "value": "mask_self_attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((seq_len, seq_len), dtype=torch.uint8, device=input.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "self.running_mask_self_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_mask_self_attention.type_as(mask_self_attention), mask_self_attention]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_121": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_emb(input) + self.pos_emb(seq)",
                            "BinOp"
                        ],
                        [
                            "l(out, encoder_output, mask_queries, mask_self_attention, mask_encoder, pos_enc=pos)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "(1, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT_Qalpha2/encoders.py": {
        "torch": {
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_18": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_50": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.layers_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.layers_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.region2grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CrossEncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.grid2region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CrossEncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.WGs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(64, 1, bias=True) for _ in range(h)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_135": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "n_regions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "regions.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "out_region.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_139": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "n_grids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grids.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "out_region.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "pos_cross",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_region, out_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask_region, attention_mask_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.fc_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_178": {
                "variable": {
                    "value": "self.dropout_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_179": {
                "variable": {
                    "value": "self.layer_norm_region",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_182": {
                "variable": {
                    "value": "self.dropout_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_183": {
                "variable": {
                    "value": "self.layer_nrom_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "out_region",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_region(regions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_194": {
                "variable": {
                    "value": "out_grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_grid(grids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "out_all",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_region, out_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "[tmp_mask, aligns]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[aligns.permute(0, 1, 3, 2), tmp_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_186": {
                "input": {
                    "value": "regions",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "grids",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "regions == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "grids == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT_Qalpha2/transformer.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.box_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "region_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "region_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.box_embedding(boxes)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(region_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "grid_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.grid_embedding(grids.view(bs, 7, 7, -1))",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(grid_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_embed, grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "torch.cat(out_ensemble, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "(b_s, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "out_ensemble",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.region_embed, self.grid_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "weight_files[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/DLCT_Qalpha2/utils.py": {
        "torch": {
            "arange_8": {
                "variable": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "d_model // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_9": {
                "variable": {
                    "value": "sin",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input / 10000 ** (2 * dim / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_10": {
                "variable": {
                    "value": "cos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input / 10000 ** (2 * dim / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input.shape[0], d_model)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_19": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_39": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_44": {
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((input.shape[0], d_model), device=input.device)",
                            "Call"
                        ],
                        [
                            "position_embedding(pos, d_model)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(input)",
                            "Call"
                        ],
                        [
                            "self.fc2(self.dropout_2(F.relu(self.fc1(out))))",
                            "Call"
                        ],
                        [
                            "input + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.fc2(self.dropout_2(F.relu(self.fc1(input))))",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(input + out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.fc1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/GET/attention.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_v(values), m_v], 1).view(b_s, nk + self.m, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_68": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h * d_v, 2 * d_model)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_v(values), m_v], 1).view(b_s, nk + self.m, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_134": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_157": {
                "variable": {
                    "value": "self.m_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, m, h * d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.m_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, m, h * d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.fc_k(keys), m_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_197": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.fc_v(values), m_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_199": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "att * attention_weights",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(attention_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]], -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(att, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_v(values).view(b_s, nk, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_v(values), m_v], 1).view(b_s, nk + self.m, self.h, self.d_v).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_208": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_223": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_224": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_262": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_263": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att[:, :, :, :nk] * attention_weights, att[:, :, :, nk:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "self.running_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_keys, keys]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "self.running_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_values, values]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "self.running_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_keys, keys]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "self.running_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_values, values]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_k(keys), m_k], 1).view(b_s, nk + self.m, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_126": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_k(keys), m_k], 1).view(b_s, nk + self.m, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_202": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.fc_q(queries).view(b_s, nq, self.h, self.d_k).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.fc_k(keys).view(b_s, nk, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.fc_k(keys), m_k], 1).view(b_s, nk + self.m, self.h, self.d_k).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "*size": {
                    "value": "(0, d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_244": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_283": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "torch.matmul(att, v).permute(0, 2, 1, 3).contiguous().view(b_s, nq, self.h * self.d_v)",
                            "Call"
                        ],
                        [
                            "self.fc_o(out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ],
                        [
                            "self.attention(q_norm, k_norm, v_norm, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "queries + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.attention(queries, keys, values, attention_mask, attention_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(queries + out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/GET/decoders.py": {
        "torch": {
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_26": {
                "variable": {
                    "value": "self.lnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_29": {
                "variable": {
                    "value": "self.lnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_53": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_71": {
                "variable": {
                    "value": "mask_self_attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((seq_len, seq_len), dtype=torch.uint8, device=input.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_80": {
                "variable": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "self.running_mask_self_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_mask_self_attention.type_as(mask_self_attention), mask_self_attention]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_91": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_emb(input) + self.pos_emb(seq)",
                            "BinOp"
                        ],
                        [
                            "l(out, encoder_output, mask_queries, mask_self_attention, mask_encoder)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "(1, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/GET/encoders.py": {
        "torch": {
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_18": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_k, d_v, h, d_ff, dropout, identity_map_reordering=identity_map_reordering, attention_module=attention_module, attention_module_kwargs=attention_module_kwargs) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_79": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_44": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_model",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "global_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "global_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_59": {
                "variable": {
                    "value": "global_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_global.unsqueeze(1), out[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/GET/transformer.py": {
        "torch": {
            "cat_36": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fc_feats, images]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_88": {
                "input": {
                    "value": "torch.cat(out_ensemble, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "(b_s, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "out_ensemble",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "visual",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fc_feats, visual]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "weight_files[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([fc_feats, images], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "visual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([fc_feats, visual], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/GET/utils.py": {
        "torch": {
            "arange_8": {
                "variable": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "d_model // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_9": {
                "variable": {
                    "value": "sin",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input / 10000 ** (2 * dim / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_10": {
                "variable": {
                    "value": "cos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input / 10000 ** (2 * dim / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input.shape[0], d_model)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_19": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_39": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_44": {
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((input.shape[0], d_model), device=input.device)",
                            "Call"
                        ],
                        [
                            "position_embedding(pos, d_model)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(input)",
                            "Call"
                        ],
                        [
                            "self.fc2(self.dropout_2(F.relu(self.fc1(out))))",
                            "Call"
                        ],
                        [
                            "input + self.dropout(torch.relu(out))",
                            "BinOp"
                        ],
                        [
                            "self.fc2(self.dropout_2(F.relu(self.fc1(input))))",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(input + out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.fc1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/beam_search/beam_search.py": {
        "torch": {
            "ones_61": {
                "variable": {
                    "value": "self.seq_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.b_s, self.beam_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "self.seq_logprob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.b_s, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_74": {
                "variable": {
                    "value": "(seq_logprob, sort_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.seq_logprob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(outputs, 1, sort_idxs.expand(self.b_s, self.beam_size, self.max_len))",
                            "Call"
                        ],
                        [
                            "outputs.contiguous()[:, :out_size]",
                            "Subscript"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "list((torch.gather(o, 1, selected_beam.unsqueeze(-1)) for o in outputs))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_76": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(outputs, 1, sort_idxs.expand(self.b_s, self.beam_size, self.max_len))",
                            "Call"
                        ],
                        [
                            "outputs.contiguous()[:, :out_size]",
                            "Subscript"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "list((torch.gather(o, 1, selected_beam.unsqueeze(-1)) for o in outputs))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_idxs.expand(self.b_s, self.beam_size, self.max_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_78": {
                "variable": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(self.log_probs, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_probs, 1, sort_idxs.expand(self.b_s, self.beam_size, self.max_len))",
                            "Call"
                        ],
                        [
                            "log_probs.contiguous()[:, :out_size]",
                            "Subscript"
                        ],
                        [
                            "log_probs.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_idxs.expand(self.b_s, self.beam_size, self.max_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_97": {
                "variable": {
                    "value": "(selected_logprob, selected_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_logprob.view(self.b_s, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_125": {
                "variable": {
                    "value": "self.seq_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.seq_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "selected_beam.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_135": {
                "variable": {
                    "value": "this_word_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "word_logprob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.step(t, self.selected_words, visual, None, mode='feedback', **kwargs)",
                            "Call"
                        ],
                        [
                            "word_logprob.view(self.b_s, cur_beam_size, -1)",
                            "Call"
                        ],
                        [
                            "word_logprob * self.seq_mask.expand_as(word_logprob)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "selected_beam.unsqueeze(-1).expand(self.b_s, self.beam_size, word_logprob.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_138": {
                "variable": {
                    "value": "this_word_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "this_word_logprob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(word_logprob, 1, selected_beam.unsqueeze(-1).expand(self.b_s, self.beam_size, word_logprob.shape[-1]))",
                            "Call"
                        ],
                        [
                            "torch.gather(this_word_logprob, 2, selected_words.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "selected_words.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_26": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s.view(*[self.b_s, cur_beam_size] + shape[1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beam.expand(*[self.b_s, self.beam_size] + shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_42": {
                "variable": {
                    "value": "visual",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "visual_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "visual.view(visual_exp_shape)",
                            "Call"
                        ],
                        [
                            "im.view(visual_exp_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "selected_beam_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "selected_beam.view(selected_beam_red_size).expand(selected_beam_exp_size)",
                            "Call"
                        ],
                        [
                            "selected_beam.view(selected_beam_red_size).expand(selected_beam_exp_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "all_log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.all_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_81": {
                "variable": {
                    "value": "all_log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(self.all_log_probs, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(all_log_probs, 1, sort_idxs.unsqueeze(-1).expand(self.b_s, self.beam_size, self.max_len, all_log_probs.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_idxs.unsqueeze(-1).expand(self.b_s, self.beam_size, self.max_len, all_log_probs.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_53": {
                "variable": {
                    "value": "new_im",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "visual_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "visual.view(visual_exp_shape)",
                            "Call"
                        ],
                        [
                            "im.view(visual_exp_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "selected_beam_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "selected_beam.view(selected_beam_red_size).expand(selected_beam_exp_size)",
                            "Call"
                        ],
                        [
                            "selected_beam.view(selected_beam_red_size).expand(selected_beam_exp_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_126": {
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "selected_beam.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_140": {
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "selected_beam.unsqueeze(-1).expand(self.b_s, self.beam_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/captioning_model.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.unsqueeze(1) for o in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b_s,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "utils.get_device(visual)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_60": {
                "variable": {
                    "value": "distr",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "out[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.max(log_probs_t, -1)[1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.step(t, out, visual, None, mode='feedback', **kwargs)",
                            "Call"
                        ],
                        [
                            "distr.sample().unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "log_probs_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.step(t, out, visual, None, mode='feedback', **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/containers.py": {
        "torch": {}
    },
    "models/position_encoding.py": {
        "torch": {
            "arange_38": {
                "variable": {
                    "value": "dim_t",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "pos_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, 0::2].sin(), pos_x[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "variable": {
                    "value": "pos_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "pos_y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, 0::2].sin(), pos_y[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_44": {
                "variable": {
                    "value": "pos_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.row_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_pos_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.col_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_pos_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_67": {
                "variable": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_68": {
                "variable": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_emb.unsqueeze(0).repeat(h, 1, 1), y_emb.unsqueeze(1).repeat(1, w, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_71": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/relative_embedding.py": {
        "torch": {
            "chunk_19": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "Name",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_28": {
                "variable": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_31": {
                "variable": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_32": {
                "variable": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_34": {
                "variable": {
                    "value": "delta_w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_35": {
                "variable": {
                    "value": "delta_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "position_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_66": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_80": {
                "variable": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_81": {
                "variable": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_85": {
                "variable": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_87": {
                "variable": {
                    "value": "delta_w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_88": {
                "variable": {
                    "value": "delta_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "position_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_118": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "chunk_143": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "Name",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "x_min",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_min, grid_x_min]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "y_min",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_min, grid_y_min]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "x_max",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_max, grid_x_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "y_max",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_max, grid_y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_158": {
                "variable": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_159": {
                "variable": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_162": {
                "variable": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_163": {
                "variable": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ],
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_165": {
                "variable": {
                    "value": "delta_w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_166": {
                "variable": {
                    "value": "delta_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "position_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_46": {
                "variable": {
                    "value": "feat_range",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_56": {
                "variable": {
                    "value": "sin_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_57": {
                "variable": {
                    "value": "cos_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_58": {
                "variable": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_99": {
                "variable": {
                    "value": "feat_range",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_109": {
                "variable": {
                    "value": "sin_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_110": {
                "variable": {
                    "value": "cos_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_111": {
                "variable": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_177": {
                "variable": {
                    "value": "feat_range",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_187": {
                "variable": {
                    "value": "sin_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_188": {
                "variable": {
                    "value": "cos_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ],
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_189": {
                "variable": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "all_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_min, y_min, x_max, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_27": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_31": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_80": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_84": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_158": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_162": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_48": {
                "input": {
                    "value": "wave_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ],
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ],
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_101": {
                "input": {
                    "value": "wave_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ],
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ],
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_179": {
                "input": {
                    "value": "wave_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ],
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ],
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "others/extract_region_feature.py": {
        "torch": {
            "AdaptiveAvgPool2d_131": {
                "variable": {
                    "value": "pooling",
                    "type": "Name",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_56": {
                "obj": {
                    "value": "outputs.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_160": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SummaryWriter_197": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.logs_folder, args.exp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_291": {
                "variable": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LambdaLR_292": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=1, betas=(0.9, 0.98))",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=1)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=1)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "NLLLoss_293": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "text_field.vocab.stoi['<pad>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "reward",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cider.compute_score(caps_gt, caps_gen)[1].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(reward).to(device).view(detections.shape[0], beam_size)",
                            "Call"
                        ],
                        [
                            "running_reward / len(dataloader)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_139": {
                "variable": {
                    "value": "reward_baseline",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cider.compute_score(caps_gt, caps_gen)[1].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(reward).to(device).view(detections.shape[0], beam_size)",
                            "Call"
                        ],
                        [
                            "running_reward / len(dataloader)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_307": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'saved_models/%s_last.pth' % args.exp_name",
                            "BinOp"
                        ],
                        [
                            "'saved_models/%s_best.pth' % args.exp_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_419": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_models/%s_best.pth' % args.exp_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_428": {
                "obj": {
                    "value": "{'torch_rng_state': torch.get_rng_state(), 'cuda_rng_state': torch.cuda.get_rng_state(), 'numpy_rng_state': np.random.get_state(), 'random_rng_state': random.getstate(), 'epoch': e, 'val_loss': val_loss, 'val_cider': val_cider, 'state_dict': model.state_dict(), 'optimizer': optim.state_dict(), 'scheduler': scheduler.state_dict(), 'patience': patience, 'best_cider': best_cider, 'use_rl': use_rl}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_models/%s_last.pth' % args.exp_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_94": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_fn(out.view(-1, len(text_field.vocab)), captions.view(-1))",
                            "Call"
                        ],
                        [
                            "loss_fn(out.view(-1, len(text_field.vocab)), captions_gt.view(-1))",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "running_loss / len(dataloader)",
                            "BinOp"
                        ],
                        [
                            "-torch.mean(log_probs, -1) * (reward - reward_baseline)",
                            "BinOp"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "running_loss / len(dataloader)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_rng_state_308": {
                "new_state": {
                    "value": "data['torch_rng_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_rng_state_309": {
                "new_state": {
                    "value": "data['cuda_rng_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LambdaLR_319": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=1, betas=(0.9, 0.98))",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=1)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=1)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rl_lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Adam_399": {
                "variable": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LambdaLR_400": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=1, betas=(0.9, 0.98))",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=1)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=1)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rl_lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Adam_409": {
                "variable": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LambdaLR_410": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=1, betas=(0.9, 0.98))",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=1)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=1)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rl_lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "set_rng_state_420": {
                "new_state": {
                    "value": "data['torch_rng_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_rng_state_421": {
                "new_state": {
                    "value": "data['cuda_rng_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_140": {
                "input": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/typing.py": {
        "torch": {}
    }
}