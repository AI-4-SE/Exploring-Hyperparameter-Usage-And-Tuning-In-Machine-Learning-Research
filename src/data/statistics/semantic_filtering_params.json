{
    "check_results/BBBC026_hepatocytes/create_fig.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_58": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/BBBC026' / bn / f'checkpoint-{n_epochs}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xn[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC026_hepatocytes/from_generator.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path('/Volumes/loco/workspace/denoising/results/') / bn.split('_')[0] / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FluoSyntheticFlow(root_dir=root_dir, bgnd_prefix=bgnd_prefix, fgnd_prefix=fgnd_prefix, crop_size=(256, 256), is_log_transform=is_log_transform, int_scale=int_scale, img_ext='*.png', is_timeseries_dir=False, n_cells_per_crop=10, int_factor=(0.5, 2.0), bgnd_sigma_range=(0.0, 1.2), frac_crop_valid=0.8, zoom_range=(0.75, 1.25), poisson_noise_range=(0.0, 5.0), rotate_range=(0, 90), bngd_base_range=(10, 40), is_return_clean=True)",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow(root_dir=root_dir, epoch_size=4096, crop_size=(128, 128), is_log_transform=False, int_scale=(0, 255), fgnd_prefix='foreground', bgnd_prefix='background', img_ext='*.tif', is_timeseries_dir=False, n_cells_per_crop=3, int_factor=(0.8, 1.2), bgnd_sigma_range=(0.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_99": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_102": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path('/Volumes/loco/workspace/denoising/results/') / bn.split('_')[0] / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_170": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FluoSyntheticFlow(root_dir=root_dir, bgnd_prefix=bgnd_prefix, fgnd_prefix=fgnd_prefix, crop_size=(256, 256), is_log_transform=is_log_transform, int_scale=int_scale, img_ext='*.png', is_timeseries_dir=False, n_cells_per_crop=10, int_factor=(0.5, 2.0), bgnd_sigma_range=(0.0, 1.2), frac_crop_valid=0.8, zoom_range=(0.75, 1.25), poisson_noise_range=(0.0, 5.0), rotate_range=(0, 90), bngd_base_range=(10, 40), is_return_clean=True)",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow(root_dir=root_dir, epoch_size=4096, crop_size=(128, 128), is_log_transform=False, int_scale=(0, 255), fgnd_prefix='foreground', bgnd_prefix='background', img_ext='*.tif', is_timeseries_dir=False, n_cells_per_crop=3, int_factor=(0.8, 1.2), bgnd_sigma_range=(0.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC026_hepatocytes/from_images.py": {
        "torch": {
            "load_38": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/BBBC026' / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ],
                        [
                            "Path.home() / 'workspace/denoising/results/BBBC026' / bn / 'checkpoint-24.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC026_hepatocytes/from_images_folds.py": {
        "torch": {
            "load_174": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/' / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC026_hepatocytes/from_images_folds_figs.py": {
        "torch": {
            "load_158": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/' / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC026_hepatocytes/from_images_old.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/_old_BBBC026' / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ],
                        [
                            "Path.home() / 'workspace/denoising/results/_old_BBBC026' / bn / 'checkpoint-24.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC026_hepatocytes/get_accuracy.py": {
        "torch": {
            "device_129": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_132": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/BBBC026' / bn / f'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xn[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC026_hepatocytes/get_counts.py": {
        "torch": {
            "device_101": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_104": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/BBBC026' / bn / f'checkpoint-{n_epochs}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xn[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC042_astrocytes/_old/create_fig.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/BBBC042' / bn / f'checkpoint-{n_epochs}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC042_astrocytes/_old/from_generator.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_55": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results' / bn.split('_')[0] / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BFFlow(epoch_size=20480, root_dir=root_dir, crop_size=(256, 256), is_log_transform=False, int_scale=(0, 255), fgnd_prefix='foreground', bgnd_prefix='background', img_ext='*.tif', is_timeseries_dir=False, n_cells_per_crop=3, int_factor=(1.0, 1.0), bgnd_sigma_range=(0.0, 1.0), merge_type='replace', frac_crop_valid=0.0, is_return_clean=True, noise_range=(0.0, 10.0))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC042_astrocytes/_old/from_images.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC042_astrocytes/_old/get_bboxes.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_66": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/BBBC042' / bn / f'checkpoint-{n_epochs}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC042_astrocytes/_old/score_bboxes.py": {
        "torch": {}
    },
    "check_results/BBBC042_astrocytes/_old/segmentation_training_set.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/BBBC042' / bn / f'checkpoint-{n_epochs}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC042_astrocytes/from_images_colour.py": {
        "torch": {
            "load_104": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results' / subdir / bn / f'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "(x - int_scale[0]) / (int_scale[1] - int_scale[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/BBBC042_astrocytes/get_scores.py": {
        "torch": {
            "stack_32": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(X)",
                            "Call"
                        ],
                        [
                            "X.to(device)",
                            "Call"
                        ],
                        [
                            "0.299 * X[0] + 0.587 * X[1] + 0.114 * X[2]",
                            "BinOp"
                        ],
                        [
                            "1 - X.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataFlow(data_dir, files2check)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_simple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "(x - self.int_scale[0]) / (self.int_scale[1] - self.int_scale[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_281": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dir / f'checkpoint-{n_epoch}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/fasterrccn_validation/get_scores.py": {
        "torch": {
            "device_70": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BBBC042Dataset(data_dir, set_type=set_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_simple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/localization/results/bbox_detection' / model_name / bn / 'model_best.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/fasterrccn_validation/models/backbone_utils.py": {
        "torch": {
            "tensor_74": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "check_results/fasterrccn_validation/models/retinanet.py": {
        "torch": {
            "DataLoader_344": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BBBC042Dataset(data_dir, max_samples=10, roi_size=roi_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_simple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_139": {
                "variable": {
                    "value": "loc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_preds[pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "loc_target[pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes if i == 0 else 256",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_per_image['labels']",
                            "Subscript"
                        ],
                        [
                            "torch.cat(gt_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.box_coder.encode(matched_gt_boxes, anchors)",
                            "Call"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_115": {
                "n": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_122": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.num_classes + 1)[targets]",
                            "Subscript"
                        ],
                        [
                            "target_onehot[:, 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "target_onehot.to(targets.device)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "check_results/fasterrccn_validation/plot_results.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/localization/results/bbox_detection' / model_name / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "flow_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BBBC042Dataset(data_dir, set_type='test', max_samples=12)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_simple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/fasterrccn_validation/score_models.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "flow_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BBBC042Dataset(data_dir, set_type='val', transforms=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_simple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(model_paths)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/fasterrccn_validation/train_fasterrcnn.py": {
        "torch": {
            "device_156": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_199": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_271": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "flow_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BBBC042Dataset(data_dir, set_type='train', max_samples=max_samples, transforms=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_simple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_278": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "flow_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BBBC042Dataset(data_dir, set_type='val', transforms=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_simple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LambdaLR_98": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model_params, lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model_params, lr=lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(save_dir) / filename",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_293": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_295": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StepLR_310": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model_params, lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model_params, lr=lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(step_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/fasterrccn_validation/transforms.py": {
        "torch": {
            "from_numpy_119": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "image[::-1, :]",
                            "Subscript"
                        ],
                        [
                            "image.T",
                            "Attribute"
                        ],
                        [
                            "np.rollaxis(image, 2, 0).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "target[boxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target['boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "target[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "check_results/from_movies/check_results.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results' / bn.split('_')[0] / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/microglia/create_figure.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/microglia' / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/microglia/from_generator.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_dir.glob('checkpoint*.pth.tar')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FluoMergedFlow(root_dir=root_dir, is_return_truth=True, epoch_size=epoch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/microglia/from_images.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/microglia' / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/microglia/from_images_old.py": {
        "torch": {
            "load_62": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path('/Volumes/loco/') / 'workspace/denoising/results' / 'microglia' / bn / 'checkpoint-299.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/mnistfashion/_old/check_results_mnistfashion.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir_root_dflt / bn.split('_')[0] / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xin[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/mnistfashion/_old/check_results_mnistfashion_bgnd.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir_root_dflt / bn.split('_')[0] / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xin[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/mnistfashion/_old/check_results_mnistfashion_separated.py": {
        "torch": {
            "load_33": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir_root_dflt / 'fmnist' / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xin[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/mnistfashion/from_generator.py": {
        "torch": {
            "load_68": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results/fmnist_v2' / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xin[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/nanoscopy_vesicles/from_images.py": {
        "torch": {
            "load_48": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'workspace/denoising/results' / bn.split('_')[0] / bn / 'checkpoint-5.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/worms/check_results_worms.py": {
        "torch": {
            "load_33": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'/Volumes/rescomp1/data/denoising/results/worms-divergent/{bn}/checkpoint.pth.tar'",
                            "JoinedStr"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/worms/compare_results_worms.py": {
        "torch": {
            "load_128": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results_root / bn / 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "check_results/worms/validation_vs_median.py": {
        "torch": {
            "load_62": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'/Volumes/rescomp1/data/denoising/results/worms-divergent/{bn}/checkpoint.pth.tar'",
                            "JoinedStr"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x[None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "collect/fminist.py": {
        "torch": {}
    },
    "scripts/_old/train_fmnist.py": {
        "torch": {
            "DataLoader_120": {
                "variable": {
                    "value": "loader_validation",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "gen_validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTFashionFlow(is_clean_output=True, **test_params)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_model.py": {
        "torch": {
            "Adam_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StepLR_87": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model_params, lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(step_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_filtering/_old_trainer.py": {
        "torch": {
            "device_312": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_316": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BasicFlow(_get_dir(src_dir), is_log_transform=False, scale_int=(0, 255), samples_per_epoch=2790, max_samples_per_set=max_samples_per_set)",
                            "Call"
                        ],
                        [
                            "FromTableFlow(_get_dir(src_dir), is_log_transform=False, scale_int=(0, 255))",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow()",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow(fgnd_prefix='cell_images_dilated')",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow(is_return_clean=True)",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow(is_return_clean=True, fgnd_prefix='cell_images_dilated')",
                            "Call"
                        ],
                        [
                            "BFFlow(epoch_size=20480, root_dir=root_dir, crop_size=(256, 256), is_log_transform=False, int_scale=(0, 255), fgnd_prefix='foreground', bgnd_prefix='background', img_ext='*.tif', is_timeseries_dir=False, n_cells_per_crop=3, int_factor=(1.0, 1.0), bgnd_sigma_range=(0.0, 1.0), merge_type='replace', frac_crop_valid=0.0, is_return_clean=False, noise_range=(0.0, 10.0))",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow(root_dir=root_dir, epoch_size=20480, bgnd_path_size=(128, 128), is_log_transform=False, fgnd_prefix='foreground', bgnd_prefix='background', img_ext='*.tif', is_timeseries_dir=False, n_cells_per_crop=16, int_scale=(0, 2 ** 16 - 1), bgnd_sigma_range=(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow(root_dir=root_dir, crop_size=(256, 256), is_log_transform=is_log_transform, int_scale=int_scale, fgnd_prefix='foreground', bgnd_prefix='background', img_ext='*.png', is_timeseries_dir=False, n_cells_per_crop=10, int_factor=(0.5, 2.0), bgnd_sigma_range=(0.0, 1.2), frac_crop_valid=0.8, zoom_range=(0.75, 1.25), noise_range=(0.0, 10.0), rotate_range=(0, 90), is_return_clean=False)",
                            "Call"
                        ],
                        [
                            "FluoMergedFlow(root_dir=root_dir, epoch_size=20480, bgnd_path_size=(128, 128), fgnd_prefix='foreground', bgnd_prefix='background', img_ext='*.tif', is_timeseries_dir=False, n_cells_per_crop=16, is_log_transform=True, int_scale=(0, np.log(2 ** 16)), bgnd_sigma_range=(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "FluoSyntheticFlow(epoch_size=20480, root_dir=root_dir, bgnd_prefix=bgnd_prefix, fgnd_prefix=fgnd_prefix, crop_size=(256, 256), is_log_transform=is_log_transform, int_scale=int_scale, img_ext='*.png', is_timeseries_dir=False, n_cells_per_crop=10, int_factor=(0.5, 2.0), bgnd_sigma_range=(0.0, 1.2), frac_crop_valid=0.8, zoom_range=(0.75, 1.25), noise_range=(0.0, 10.0), rotate_range=(0, 90), bngd_base_range=(10, 40), is_return_clean=False)",
                            "Call"
                        ],
                        [
                            "MNISTFashionFlow(is_fix_bg=False, **mnistfashion_params)",
                            "Call"
                        ],
                        [
                            "FromMoviesFlow(frame_gap=frame_gap)",
                            "Call"
                        ],
                        [
                            "MNISTFashionFlow(is_fix_bg=True, **mnistfashion_params)",
                            "Call"
                        ],
                        [
                            "FromMoviesFlow(frame_gap=frame_gap)",
                            "Call"
                        ],
                        [
                            "MNISTFashionFlow(is_clean_output=True, **mnistfashion_params)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_333": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_29": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(str(init_model_path), map_location=dev_str)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch + epoch_init, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, filename)",
                            "Call"
                        ],
                        [
                            "log_dir / f'checkpoint-{epoch}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "L1Loss_36": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_320": {
                "variable": {
                    "value": "loader_validation",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "gen_validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "MNISTFashionFlow(is_clean_output=True, **test_params)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_345": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(init_model_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "SmoothL1Loss_38": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_40": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_440": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(str(init_model_path), map_location=dev_str)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch + epoch_init, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, filename)",
                            "Call"
                        ],
                        [
                            "log_dir / f'checkpoint-{epoch}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "semantic_filtering/flow/basic_flow.py": {
        "torch": {}
    },
    "semantic_filtering/flow/fluo_merged_flow.py": {
        "torch": {}
    },
    "semantic_filtering/flow/from_movies.py": {
        "torch": {}
    },
    "semantic_filtering/flow/from_table_flow.py": {
        "torch": {}
    },
    "semantic_filtering/flow/mnist_flow.py": {
        "torch": {}
    },
    "semantic_filtering/models/hourglass.py": {
        "torch": {
            "pad_36": {
                "variable": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_to_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(-c3, -c4, -c1, -c2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_174": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 540, 600)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_71": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_conv3x3(n_channels, 48)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_conv3x3(48, 48)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, n_classes, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_143": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x_input, pad_, 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(int(math.floor(x / 2)), int(math.ceil(x / 2))) for x in ss]",
                            "ListComp"
                        ],
                        [
                            "[x for d in pad_[::-1] for x in d]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x2, x1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.up5(x6, x4)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x3)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up1(x, x_input)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "self._unet(x_input)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad_inv_)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_inv_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-x for x in pad_]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_51": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_68": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_filtering/models/losses.py": {
        "torch": {
            "pow_35": {
                "variable": {
                    "value": "mat_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_v - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_37": {
                "variable": {
                    "value": "(out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(input_v - target, 2)",
                            "Call"
                        ],
                        [
                            "mat_l2.view(mat_l2.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_43": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_45": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_47": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "semantic_filtering/models/unet.py": {
        "torch": {
            "pad_36": {
                "variable": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_to_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(-c3, -c4, -c1, -c2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_160": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 540, 600)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.conv_pooled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_57": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_conv3x3(n_channels, 48)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_conv3x3(48, 48)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, n_classes, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_129": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x_input, pad_, 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(int(math.floor(x / 2)), int(math.ceil(x / 2))) for x in ss]",
                            "ListComp"
                        ],
                        [
                            "[x for d in pad_[::-1] for x in d]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_pooled(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x2, x1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.up5(x6, x4)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x3)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up1(x, x_input)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "self._unet(x_input)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad_inv_)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_inv_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-x for x in pad_]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_filtering/trainer.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(cuda_id)",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_25": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(str(init_model_path), map_location=str(device))",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch + epoch_init, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, filename)",
                            "Call"
                        ],
                        [
                            "log_dir / f'checkpoint-{epoch}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_71": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(init_model_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "str(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(str(init_model_path), map_location=str(device))",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch + epoch_init, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, filename)",
                            "Call"
                        ],
                        [
                            "log_dir / f'checkpoint-{epoch}.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}