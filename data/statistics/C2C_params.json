{
    "C2C/cluster.py": {
        "sklearn": {
            "normalize_49": {
                "variable": {
                    "value": "img_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "img_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im[0]",
                            "Subscript"
                        ],
                        [
                            "normalize(img_embedding).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "tdl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "td",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WSIDataloader(im_list, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "C2C/utils.py": {
        "sklearn": {
            "normalized_mutual_info_score_25": {
                "labels_true": {
                    "value": "li1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(list1, list2)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "li2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(list1, list2)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "load_15": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_10": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pt'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "C2C/dataloader.py": {
        "torch": {
            "stack_64": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_83": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WSIClusterDataloader(train_images, train_images_cluster, train_images_label, num_cluster, num_img_per_cluster, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "DataLoader_85": {
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WSIClusterDataloader(valid_images, valid_images_cluster, valid_images_label, num_cluster, num_img_per_cluster, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "C2C/eval_model.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "attn_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "inputs_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "attn_rep_instance",
                            "variable"
                        ],
                        [
                            "torch.cat((attn_rep, attn_rep_instance))",
                            "Call"
                        ],
                        [
                            "compute_attn_df(tdl, model)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_78": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(attn_rep, 1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(A, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "inputs_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "inp_rep_instance",
                            "variable"
                        ],
                        [
                            "torch.cat((inputs_rep, inp_rep_instance))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "tdl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "td",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WSIDataloader(im_list, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "WSIDataloader(im_list, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "inputs_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_rep, inp_rep_instance)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "attn_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_rep, attn_rep_instance)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "tdl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "td",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WSIDataloader(im_list, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "WSIDataloader(im_list, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_81": {
                "input": {
                    "value": "Y_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier_layer(M)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "C2C/loss.py": {
        "torch": {
            "kl_div_28": {
                "input": {
                    "value": "F.log_softmax(attn_val[index], dim=0)[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones(len(index), 1)[None].to(is_cuda) / len(index)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_28": {
                "input": {
                    "value": "attn_val[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "len(index)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "C2C/models/resnet.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.resnet_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.resnet_tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.L, self.D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.L * self.K, n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.patch_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.L * self.K, n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_unnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(A_unnorm, 1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(A, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_55": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(A_unnorm, 1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(A, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, x.shape[-3], x.shape[-2], x.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.resnet_head(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.resnet_tail(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_head(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.resnet_tail(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_head(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.resnet_tail(x)",
                            "Call"
                        ],
                        [
                            "self.patch_classifier(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_head(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.resnet_tail(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "self.L * self.K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "self.L * self.K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "modules.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(modules.weight.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "modules.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "modules.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "modules.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(modules.weight.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_28": {
                "variable": {
                    "value": "modules.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "modules.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_25": {
                "*size": {
                    "value": "modules.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "modules.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "C2C/train.py": {
        "torch": {
            "max_107": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_123": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_100": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_103": {
                "variable": {
                    "value": "patch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(outputs_patch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "patch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(outputs_patch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}