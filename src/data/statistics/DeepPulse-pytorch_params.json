{
    "PhysNet.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.ConvBlock1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(3, 16, [1, 5, 5], stride=1, padding=[0, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.ConvBlock2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.ConvBlock3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(32, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.ConvBlock4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.ConvBlock5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.ConvBlock6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.ConvBlock7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.ConvBlock8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.ConvBlock9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels=64, out_channels=64, kernel_size=[4, 1, 1], stride=[2, 1, 1], padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels=64, out_channels=64, kernel_size=[4, 1, 1], stride=[2, 1, 1], padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_95": {
                "variable": {
                    "value": "self.ConvBlock10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_97": {
                "variable": {
                    "value": "self.MaxpoolSpa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_98": {
                "variable": {
                    "value": "self.MaxpoolSpaTem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_101": {
                "variable": {
                    "value": "self.poolspa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(frames, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_172": {
                "variable": {
                    "value": "self.decoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "math.ceil(c / reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_173": {
                "variable": {
                    "value": "self.encoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "math.ceil(c / reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_182": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoded(self.relu(torch.layer_norm(decoded, decoded.size()[1:])))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_195": {
                "variable": {
                    "value": "sum_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_196": {
                "variable": {
                    "value": "sum_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_197": {
                "variable": {
                    "value": "sum_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[i] * labels[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_198": {
                "variable": {
                    "value": "sum_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(preds[i], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_199": {
                "variable": {
                    "value": "sum_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(labels[i], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_34": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_35": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_40": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_41": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_45": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_46": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_51": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_52": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_56": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_57": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_61": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_62": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_66": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_67": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_71": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_72": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_76": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_77": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_82": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_84": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_88": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_90": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ConvBlock1(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock2(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock3(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock4(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock5(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock6(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x_visual1616)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock8(F.dropout(x, p=0.2))",
                            "Call"
                        ],
                        [
                            "self.ConvBlock9(F.dropout(x, p=0.2))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.upsample2(x)",
                            "Call"
                        ],
                        [
                            "self.poolspa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock10(F.dropout(x, p=0.5))",
                            "Call"
                        ],
                        [
                            "self.ConvBlock1(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock2(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock3(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock4(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock5(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock6(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock7(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock8(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock9(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.upsample2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_126": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ConvBlock1(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock2(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock3(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock4(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock5(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock6(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x_visual1616)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock8(F.dropout(x, p=0.2))",
                            "Call"
                        ],
                        [
                            "self.ConvBlock9(F.dropout(x, p=0.2))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.upsample2(x)",
                            "Call"
                        ],
                        [
                            "self.poolspa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock10(F.dropout(x, p=0.5))",
                            "Call"
                        ],
                        [
                            "self.ConvBlock1(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock2(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock3(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock4(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock5(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock6(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock7(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock8(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock9(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.upsample2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ConvBlock1(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock2(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock3(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock4(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock5(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock6(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x_visual1616)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock8(F.dropout(x, p=0.2))",
                            "Call"
                        ],
                        [
                            "self.ConvBlock9(F.dropout(x, p=0.2))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.upsample2(x)",
                            "Call"
                        ],
                        [
                            "self.poolspa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock10(F.dropout(x, p=0.5))",
                            "Call"
                        ],
                        [
                            "self.ConvBlock1(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock2(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock3(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock4(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock5(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpaTem(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock6(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock7(x)",
                            "Call"
                        ],
                        [
                            "self.MaxpoolSpa(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock8(x)",
                            "Call"
                        ],
                        [
                            "self.ConvBlock9(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.upsample2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "layer_norm_181": {
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoded(x)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "decoded.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_198": {
                "input": {
                    "value": "preds[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_199": {
                "input": {
                    "value": "labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_202": {
                "input": {
                    "value": "(N * sum_x2 - torch.pow(sum_x, 2)) * (N * sum_y2 - torch.pow(sum_y, 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_202": {
                "input": {
                    "value": "sum_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(labels[i])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PhysNetDil.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.ConvBlock1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(3, 16, [1, 5, 5], stride=1, padding=[0, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.ConvBlock2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.ConvBlock3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(32, 64, [3, 3, 3], stride=1, padding=1, dilation=(1, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.ConvBlock4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1, dilation=(1, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.ConvBlock5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1, dilation=(1, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.ConvBlock6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1, dilation=(1, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.ConvBlock7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1, dilation=(1, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.ConvBlock8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1, dilation=(1, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.ConvBlock9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=(1, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels=64, out_channels=64, kernel_size=[4, 1, 1], stride=[2, 1, 1], padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels=64, out_channels=64, kernel_size=[4, 1, 1], stride=[2, 1, 1], padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_85": {
                "variable": {
                    "value": "self.ConvBlock10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_87": {
                "variable": {
                    "value": "self.MaxpoolSpa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_88": {
                "variable": {
                    "value": "self.MaxpoolSpaTem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_91": {
                "variable": {
                    "value": "self.poolspa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(frames, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_25": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_26": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_31": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_32": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_37": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_42": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_43": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_47": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_48": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_52": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_53": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_57": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_58": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_62": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_63": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_67": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_68": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_73": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_75": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_81": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PhysNetGlobal.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.ConvBlock1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(3, 16, [1, 5, 5], stride=1, padding=[0, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.ConvBlock2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.ConvBlock3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(32, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.ConvBlock4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.ConvBlock5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.ConvBlock6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.ConvBlock7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.ConvBlock8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.ConvBlock9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels=64, out_channels=64, kernel_size=[4, 1, 1], stride=[2, 1, 1], padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels=64, out_channels=64, kernel_size=[4, 1, 1], stride=[2, 1, 1], padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_89": {
                "variable": {
                    "value": "self.ConvBlock10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_91": {
                "variable": {
                    "value": "self.MaxpoolSpa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_92": {
                "variable": {
                    "value": "self.MaxpoolSpaTem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_95": {
                "variable": {
                    "value": "self.poolspa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(frames, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_175": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_input.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_176": {
                "variable": {
                    "value": "self.c12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_input.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "math.ceil(C / reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_177": {
                "variable": {
                    "value": "self.c15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "math.ceil(C / reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_input.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_188": {
                "variable": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(block_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "block_input_flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(block_input)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, C, D, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_191": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(block_input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(attention, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "attention_flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(block_input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(attention, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, D, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_194": {
                "variable": {
                    "value": "c11",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcdf,bdf->bcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "block_input_flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(block_input, [N, C, D, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "c11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bcdf,bdf->bcd', block_input_flattened, attention_flattened)",
                            "Call"
                        ],
                        [
                            "torch.reshape(c11, (N, C, D, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, C, D, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_200": {
                "variable": {
                    "value": "cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(block_input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c15",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c15(self.relu(torch.layer_norm(c12, c12.size()[1:])))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_28": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_29": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_34": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_35": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_39": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_40": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_45": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_46": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_50": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_51": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_55": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_56": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_60": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_61": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_65": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_66": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_70": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_71": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_76": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_78": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_82": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_84": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "layer_norm_199": {
                "input": {
                    "value": "c12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c12(c11)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "c12.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "PhysNet_SpaTemp.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.ConvBlock1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(3, 16, [1, 5, 5], stride=1, padding=[0, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.ConvBlock2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, [1, 3, 3], stride=1, padding=[0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.ConvBlock3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(32, 32, [3, 1, 1], stride=1, padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.ConvBlock4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(32, 32, [1, 3, 3], stride=1, padding=[0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.ConvBlock5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(32, 32, [3, 1, 1], stride=1, padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.ConvBlock6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(32, 64, [1, 3, 3], stride=1, padding=[0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.ConvBlock7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 1, 1], stride=1, padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.ConvBlock8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [1, 3, 3], stride=1, padding=[0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.ConvBlock9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 1, 1], stride=1, padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.ConvBlock10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [1, 3, 3], stride=1, padding=[0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.ConvBlock11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 1, 1], stride=1, padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.ConvBlock12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [1, 3, 3], stride=1, padding=[0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.ConvBlock13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 1, 1], stride=1, padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.ConvBlock14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [1, 3, 3], stride=1, padding=[0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.ConvBlock15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(64, 64, [3, 1, 1], stride=1, padding=[1, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_112": {
                "variable": {
                    "value": "self.ConvBlock16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool3d_114": {
                "variable": {
                    "value": "self.AvgpoolSpa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool3d_115": {
                "variable": {
                    "value": "self.AvgpoolSpa2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_116": {
                "variable": {
                    "value": "self.MaxpoolSpa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_26": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_27": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_32": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_33": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_37": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_38": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_43": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_44": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_49": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_50": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_55": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_56": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_60": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_61": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_66": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_67": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_73": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_79": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_83": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_84": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_89": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_90": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_95": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_96": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_101": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_102": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_108": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "PhysNet_test.py": {
        "torch": {
            "DataParallel_29": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhysNet(seq_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pulse_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PulseDataset(sequence_list, root_dir, seq_len=seq_len, length=len(sampler_test), transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PulseSampler(end_indexes_test, seq_len, False)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ],
                        [
                            "(outputs - torch.mean(outputs)) / torch.std(outputs)",
                            "BinOp"
                        ],
                        [
                            "outputs.tolist()",
                            "Call"
                        ],
                        [
                            "np.array(outputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reference_)",
                            "Call"
                        ],
                        [
                            "(reference_ - torch.mean(reference_)) / torch.std(reference_)",
                            "BinOp"
                        ],
                        [
                            "reference_.tolist()",
                            "Call"
                        ],
                        [
                            "np.array(reference_)",
                            "Call"
                        ],
                        [
                            "torch.tensor(reference_)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reference_)",
                            "Call"
                        ],
                        [
                            "(reference_ - torch.mean(reference_)) / torch.std(reference_)",
                            "BinOp"
                        ],
                        [
                            "reference_.tolist()",
                            "Call"
                        ],
                        [
                            "np.array(reference_)",
                            "Call"
                        ],
                        [
                            "torch.tensor(reference_)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ],
                        [
                            "(outputs - torch.mean(outputs)) / torch.std(outputs)",
                            "BinOp"
                        ],
                        [
                            "outputs.tolist()",
                            "Call"
                        ],
                        [
                            "np.array(outputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_182": {
                "variable": {
                    "value": "criterionMSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_183": {
                "variable": {
                    "value": "criterionMAE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_185": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterionMSE(reference_, outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save_temp/checkpoint.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "std_104": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ],
                        [
                            "(outputs - torch.mean(outputs)) / torch.std(outputs)",
                            "BinOp"
                        ],
                        [
                            "outputs.tolist()",
                            "Call"
                        ],
                        [
                            "np.array(outputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_108": {
                "input": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reference_)",
                            "Call"
                        ],
                        [
                            "(reference_ - torch.mean(reference_)) / torch.std(reference_)",
                            "BinOp"
                        ],
                        [
                            "reference_.tolist()",
                            "Call"
                        ],
                        [
                            "np.array(reference_)",
                            "Call"
                        ],
                        [
                            "torch.tensor(reference_)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_187": {
                "input": {
                    "value": "outputs - reference_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ],
                        [
                            "(outputs - torch.mean(outputs)) / torch.std(outputs)",
                            "BinOp"
                        ],
                        [
                            "outputs.tolist()",
                            "Call"
                        ],
                        [
                            "np.array(outputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_108": {
                "input": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reference_)",
                            "Call"
                        ],
                        [
                            "(reference_ - torch.mean(reference_)) / torch.std(reference_)",
                            "BinOp"
                        ],
                        [
                            "reference_.tolist()",
                            "Call"
                        ],
                        [
                            "np.array(reference_)",
                            "Call"
                        ],
                        [
                            "torch.tensor(reference_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PhysNet_train.py": {
        "torch": {
            "DataParallel_265": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhysNet(seq_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_324": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pulse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pulse_dataset_3d.PulseDataset(train_sequence_list, root_dir, seq_len=seq_len, length=len(sampler), transform=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PulseSampler(end_indexes, seq_len, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pulse_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pulse_dataset_3d.PulseDataset(test_sequence_list, root_dir, seq_len=seq_len, length=len(sampler_test), transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PulseSampler(end_indexes_test, seq_len, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_342": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_169": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_272": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_80": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "std_81": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_80": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_134": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "std_135": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_134": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "grad_cam.py": {
        "torch": {
            "DataParallel_27": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HrCNN(True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "PhysNet()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "PhysNet(seq_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pulse_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pulse_dataset_2d.PulseDataset('sequence_test.txt', 'E:/Datasets_PULSE/set_all/', transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "PulseDataset(sequence_list, root_dir, seq_len=seq_len, length=len(sampler_test), transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_46": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_112": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HrCNN(True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "PhysNet()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "PhysNet(seq_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pulse_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pulse_dataset_2d.PulseDataset('sequence_test.txt', 'E:/Datasets_PULSE/set_all/', transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "PulseDataset(sequence_list, root_dir, seq_len=seq_len, length=len(sampler_test), transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PulseSampler(end_indexes_test, seq_len, False)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save_temp/model_checkpoint.tar'",
                            "Constant"
                        ],
                        [
                            "'save_temp/checkpoint.tar'",
                            "Constant"
                        ],
                        [
                            "'save_temp/checkpoint_9.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "mean_60": {
                "variable": {
                    "value": "pooled_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.get_activations_gradient()",
                            "Call"
                        ],
                        [
                            "model.module.get_activations_gradient()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.get_activations(net_input).detach()",
                            "Call"
                        ],
                        [
                            "model.module.get_activations(net_input).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save_temp/model_checkpoint.tar'",
                            "Constant"
                        ],
                        [
                            "'save_temp/checkpoint.tar'",
                            "Constant"
                        ],
                        [
                            "'save_temp/checkpoint_9.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "mean_171": {
                "variable": {
                    "value": "pooled_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.get_activations_gradient()",
                            "Call"
                        ],
                        [
                            "model.module.get_activations_gradient()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_179": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.get_activations(net_input).detach()",
                            "Call"
                        ],
                        [
                            "model.module.get_activations(net_input).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_266": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HrCNN(True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "PhysNet()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "PhysNet(seq_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_200": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.get_activations(net_input).detach()",
                            "Call"
                        ],
                        [
                            "model.module.get_activations(net_input).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_200": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_272": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save_temp/model_checkpoint.tar'",
                            "Constant"
                        ],
                        [
                            "'save_temp/checkpoint.tar'",
                            "Constant"
                        ],
                        [
                            "'save_temp/checkpoint_9.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "min_75": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), np.exp(heatmap.cpu()) - 1)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[j, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[6, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_75": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), np.exp(heatmap.cpu()) - 1)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[j, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[6, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_84": {
                "input": {
                    "value": "net_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_input.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "(net_input - torch.min(net_input)) / (torch.max(net_input) - torch.min(net_input))",
                            "BinOp"
                        ],
                        [
                            "net_input.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "(net_input - torch.min(net_input)) / (torch.max(net_input) - torch.min(net_input))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_84": {
                "input": {
                    "value": "net_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_input.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "(net_input - torch.min(net_input)) / (torch.max(net_input) - torch.min(net_input))",
                            "BinOp"
                        ],
                        [
                            "net_input.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "(net_input - torch.min(net_input)) / (torch.max(net_input) - torch.min(net_input))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_208": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), np.exp(heatmap.cpu()) - 1)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[j, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[6, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_208": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), np.exp(heatmap.cpu()) - 1)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[j, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[6, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_210": {
                "input": {
                    "value": "net_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_input.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "(net_input - torch.min(net_input)) / (torch.max(net_input) - torch.min(net_input))",
                            "BinOp"
                        ],
                        [
                            "net_input.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "(net_input - torch.min(net_input)) / (torch.max(net_input) - torch.min(net_input))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_210": {
                "input": {
                    "value": "net_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_input.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "(net_input - torch.min(net_input)) / (torch.max(net_input) - torch.min(net_input))",
                            "BinOp"
                        ],
                        [
                            "net_input.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "(net_input - torch.min(net_input)) / (torch.max(net_input) - torch.min(net_input))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_192": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), np.exp(heatmap.cpu()) - 1)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[j, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[6, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_192": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), np.exp(heatmap.cpu()) - 1)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[j, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(activations, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "heatmap[6, :]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(heatmap.cpu(), 0)",
                            "Call"
                        ],
                        [
                            "(heatmap - torch.min(heatmap)) / (torch.max(heatmap) - torch.min(heatmap))",
                            "BinOp"
                        ],
                        [
                            "heatmap.squeeze().cpu()",
                            "Call"
                        ],
                        [
                            "cv2.resize(h, (img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hr_cnn.py": {
        "torch": {
            "AdaptiveAvgPool2d_20": {
                "variable": {
                    "value": "self.ada_avg_pool2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(192, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb",
                            "Name"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv_00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb",
                            "Name"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.max_pool2d_00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn_00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv_01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb",
                            "Name"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_41": {
                "variable": {
                    "value": "self.max_pool2d_01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn_01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv_10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb",
                            "Name"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_48": {
                "variable": {
                    "value": "self.max_pool2d_10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn_10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv_20",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb",
                            "Name"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(12, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "self.max_pool2d_20",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn_20",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb",
                            "Name"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.c12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "math.ceil(c / reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.c15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "math.ceil(c / reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "variable": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(block_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "block_input_flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(block_input)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, C, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_132": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(block_input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(attention, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "attention_flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(block_input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(attention, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_135": {
                "variable": {
                    "value": "c11",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcf,bf->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "block_input_flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(block_input, [N, C, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "c11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bcf,bf->bc', block_input_flattened, attention_flattened)",
                            "Call"
                        ],
                        [
                            "torch.reshape(c11, (N, C, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, C, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_142": {
                "variable": {
                    "value": "cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(block_input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c15",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c15(self.relu(torch.layer_norm(c12, c12.size()[1:])))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_157": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.decoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "math.ceil(c / reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.encoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "math.ceil(c / reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoded(self.relu(torch.layer_norm(decoded, decoded.size()[1:])))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout2d_81": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.gcb(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x_features)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.gcb(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x_features)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "layer_norm_141": {
                "input": {
                    "value": "c12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c12(c11)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "c12.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "layer_norm_167": {
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoded(xx)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "decoded.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout2d_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.gcb(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x_features)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.gcb(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x_features)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_76": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.gcb(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x_features)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout2d_101": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.gcb(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x_features)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_102": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.gcb(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x_features)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_103": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.gcb(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x_features)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hr_cnn_dil.py": {
        "torch": {
            "AdaptiveAvgPool2d_10": {
                "variable": {
                    "value": "self.ada_avg_pool2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(192, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.rgb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv_00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgb",
                            "Attribute"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "variable": {
                    "value": "self.max_pool2d_00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn_00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgb",
                            "Attribute"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(8, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "variable": {
                    "value": "self.max_pool2d_01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn_01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv_10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgb",
                            "Attribute"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(8, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "variable": {
                    "value": "self.max_pool2d_10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn_10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv_20",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgb",
                            "Attribute"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(12, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "variable": {
                    "value": "self.max_pool2d_20",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn_20",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgb",
                            "Attribute"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout2d_66": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.conv_20(F.dropout2d(x, p=0.2, training=self.training))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.conv_20(F.dropout2d(x, p=0.2, training=self.training))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout2d_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.conv_20(F.dropout2d(x, p=0.2, training=self.training))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_64": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.conv_20(F.dropout2d(x, p=0.2, training=self.training))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_65": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.conv_20(F.dropout2d(x, p=0.2, training=self.training))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout2d_90": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.conv_20(F.dropout2d(x, p=0.2, training=self.training))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_91": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.conv_20(F.dropout2d(x, p=0.2, training=self.training))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_92": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "self.conv_20(F.dropout2d(x, p=0.2, training=self.training))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_20(self.max_pool2d_20(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_last(F.dropout(x, p=0.5, training=self.training))",
                            "Call"
                        ],
                        [
                            "self.ada_avg_pool2d(x)",
                            "Call"
                        ],
                        [
                            "self.bn_input(x)",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_00(self.max_pool2d_00(self.conv_00(F.dropout2d(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_01(self.max_pool2d_01(self.conv_01(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ],
                        [
                            "nonlin(self.bn_10(self.max_pool2d_10(self.conv_10(F.dropout(x, p=0.0, training=self.training)))))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hr_cnn_train.py": {
        "torch": {
            "DataParallel_200": {
                "variable": {
                    "value": "extractor_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "extractor_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HrCNN(3)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(extractor_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_234": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pulse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pulse_dataset_2d.PulseDataset('transfer_train.txt', seq_dir, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_240": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pulse_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pulse_dataset_2d.PulseDataset('seq_test.txt', seq_dir, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_247": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_250": {
                "variable": {
                    "value": "extractor_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "extractor_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "median_118": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.median(target).cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_158": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hr_cnn_valid.py": {
        "torch": {
            "DataParallel_20": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HrCNN(3)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_40": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pulse_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pulse_dataset_2d.PulseDataset('sequence_test.txt', 'E:/Datasets_PULSE/set_all/', transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_45": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reference_)",
                            "Call"
                        ],
                        [
                            "reference_.tolist()",
                            "Call"
                        ],
                        [
                            "(reference_ - np.min(reference_)) / (np.max(reference_) - np.min(reference_))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(reference_)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_69": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ],
                        [
                            "(outputs - torch.mean(outputs)) / torch.std(outputs)",
                            "BinOp"
                        ],
                        [
                            "outputs.tolist()",
                            "Call"
                        ],
                        [
                            "torch.tensor(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reference_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reference_)",
                            "Call"
                        ],
                        [
                            "reference_.tolist()",
                            "Call"
                        ],
                        [
                            "(reference_ - np.min(reference_)) / (np.max(reference_) - np.min(reference_))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(reference_)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ],
                        [
                            "(outputs - torch.mean(outputs)) / torch.std(outputs)",
                            "BinOp"
                        ],
                        [
                            "outputs.tolist()",
                            "Call"
                        ],
                        [
                            "torch.tensor(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "yr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "yr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "butter_bandpass_filter(outputs, lowcut, highcut, fs, order=4)",
                            "Call"
                        ],
                        [
                            "(yr - np.mean(yr)) / np.std(yr)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(yr)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_115": {
                "variable": {
                    "value": "criterionMSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_116": {
                "variable": {
                    "value": "criterionMAE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterionMSE(reference_, outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_30": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save_temp/model_path.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "std_70": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ],
                        [
                            "(outputs - torch.mean(outputs)) / torch.std(outputs)",
                            "BinOp"
                        ],
                        [
                            "outputs.tolist()",
                            "Call"
                        ],
                        [
                            "torch.tensor(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_120": {
                "input": {
                    "value": "outputs - reference_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_70": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ],
                        [
                            "(outputs - torch.mean(outputs)) / torch.std(outputs)",
                            "BinOp"
                        ],
                        [
                            "outputs.tolist()",
                            "Call"
                        ],
                        [
                            "torch.tensor(outputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pulse_dataset_2d.py": {
        "torch": {
            "tensor_78": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.frames_list.iloc[idx, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_80": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(img_name)",
                            "Call"
                        ],
                        [
                            "image.resize((self.img_w, self.img_h))",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(image)",
                            "Call"
                        ],
                        [
                            "(image - torch.mean(image)) / torch.std(image) * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_tensor_64": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "std_81": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(img_name)",
                            "Call"
                        ],
                        [
                            "image.resize((self.img_w, self.img_h))",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(image)",
                            "Call"
                        ],
                        [
                            "(image - torch.mean(image)) / torch.std(image) * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_81": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(img_name)",
                            "Call"
                        ],
                        [
                            "image.resize((self.img_w, self.img_h))",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(image)",
                            "Call"
                        ],
                        [
                            "(image - torch.mean(image)) / torch.std(image) * 255",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pulse_dataset_3d.py": {
        "torch": {
            "stack_82": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(frames)",
                            "Call"
                        ],
                        [
                            "frames.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(frames, dim=1)",
                            "Call"
                        ],
                        [
                            "(frames - torch.mean(frames)) / torch.std(frames) * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(frames)",
                            "Call"
                        ],
                        [
                            "frames.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(frames, dim=1)",
                            "Call"
                        ],
                        [
                            "(frames - torch.mean(frames)) / torch.std(frames) * 255",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(self.frames_list.iloc[idx:idx + self.seq_len, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_69": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "std_85": {
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(frames)",
                            "Call"
                        ],
                        [
                            "frames.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(frames, dim=1)",
                            "Call"
                        ],
                        [
                            "(frames - torch.mean(frames)) / torch.std(frames) * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_85": {
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(frames)",
                            "Call"
                        ],
                        [
                            "frames.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(frames, dim=1)",
                            "Call"
                        ],
                        [
                            "(frames - torch.mean(frames)) / torch.std(frames) * 255",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pulse_sampler.py": {
        "torch": {
            "cat_23": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indices)",
                            "Call"
                        ],
                        [
                            "self.indices[torch.randperm(len(self.indices))]",
                            "Subscript"
                        ],
                        [
                            "self.indices",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_21": {
                "start": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_idx[i]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_idx[i] + end_idx[i + 1] - seq_len",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_34": {
                "n": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "MSELoss_21": {
                "variable": {
                    "value": "criterionMSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_24": {
                "input": {
                    "value": "torch.tensor(1) / mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}