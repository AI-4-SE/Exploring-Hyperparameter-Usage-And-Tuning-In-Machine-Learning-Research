{
    "base_trainer.py": {
        "torch": {
            "cat_187": {
                "variable": {
                    "value": "visuals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "visuals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "visuals + vis_extra",
                            "BinOp"
                        ],
                        [
                            "[x.float() for x in visuals]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(visuals, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_222": {
                "variable": {
                    "value": "(masks_conf, masks_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsize(F.softmax(logits['logits_up'], 1)).cpu()",
                            "Call"
                        ],
                        [
                            "downsize(vlogits)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "x_all_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_34": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_35": {
                "variable": {
                    "value": "self.writer_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.logdir, 'train_target')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "upd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(cfg.BETA1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor.clone() for _ in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_236": {
                "variable": {
                    "value": "mask_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(im.convert('RGB'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "error_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmap(error_np)[:, :, :, :3]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(error_rgb, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "upd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "cfg.OPT_NESTEROV",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, self.cfg.TB.IM_SIZE, mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, self.cfg.TB.IM_SIZE, mode=mode, align_corners=True)",
                            "Call"
                        ],
                        [
                            "-(x * torch.log(1e-08 + x)).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "(x - x_min) / (x_max - x_min)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "self.cfg.TB.IM_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, self.cfg.TB.IM_SIZE, mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, self.cfg.TB.IM_SIZE, mode=mode, align_corners=True)",
                            "Call"
                        ],
                        [
                            "-(x * torch.log(1e-08 + x)).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "(x - x_min) / (x_max - x_min)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "self.cfg.TB.IM_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "vlogits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(vlogits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_223": {
                "input": {
                    "value": "masks_conf - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "masks_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_211": {
                "obj": {
                    "value": "el",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Name"
                        ],
                        [
                            "el.clone().cpu() if torch.is_tensor(el) else el",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_134": {
                "input": {
                    "value": "logits['logits_up']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_245": {
                "input": {
                    "value": "1e-08 + mask_conf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "ndarray": {
                    "value": "im_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(im).astype(np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_112": {
                "input": {
                    "value": "1e-08 + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/__init__.py": {
        "torch": {
            "DistributedSampler_43": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DLSeg(cfg, task, renorm=cfg.DATASET.RENORM_SOURCE)",
                            "Call"
                        ],
                        [
                            "DLSeg(cfg, val_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_44": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DLSeg(cfg, task, renorm=cfg.DATASET.RENORM_SOURCE)",
                            "Call"
                        ],
                        [
                            "DLSeg(cfg, val_set)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg.TRAIN.BATCH_SIZE / ngpus_per_node)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/dataloader_base.py": {
        "torch": {}
    },
    "datasets/dataloader_infer.py": {
        "torch": {
            "from_numpy_92": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/dataloader_seg.py": {
        "torch": {}
    },
    "datasets/dataloader_target.py": {
        "torch": {
            "zeros_222": {
                "variable": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.cfg.TRAIN.GROUP_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "images1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(0) for x in images1]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "images2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(0) for x in images2]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(0) for x in masks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[prior_weight * prior for _ in range(num_samples)]",
                            "ListComp"
                        ],
                        [
                            "[prior for _ in range(num_samples)]",
                            "ListComp"
                        ],
                        [
                            "[prior for _ in range(num_samples)]",
                            "ListComp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/tf_seg.py": {
        "torch": {
            "from_numpy_36": {
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/tf_target.py": {
        "torch": {
            "from_numpy_36": {
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "infer_val.py": {
        "torch": {
            "DataParallel_150": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(cfg.MODEL, 0, num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "infer_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "infer_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataloader(args.dataloader, cfg, args.infer_list)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "masks_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/basenet.py": {
        "torch": {
            "interpolate_143": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "y.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/deeplabv2.py": {
        "torch": {
            "randn_318": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_319": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_319": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_126": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_200": {
                "variable": {
                    "value": "weights_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_217": {
                "variable": {
                    "value": "logits_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(im)",
                            "Call"
                        ],
                        [
                            "self._backbone(im)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "orig_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.size()[-2:]",
                            "Subscript"
                        ],
                        [
                            "im.size()[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_262": {
                "variable": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_302": {
                "variable": {
                    "value": "logits_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(im)",
                            "Call"
                        ],
                        [
                            "self._backbone(im)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "orig_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.size()[-2:]",
                            "Subscript"
                        ],
                        [
                            "im.size()[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_176": {
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_264": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_265": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "fan_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_251": {
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/fcn.py": {
        "torch": {
            "randn_153": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.score_pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.score_pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_140": {
                "variable": {
                    "value": "logits_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._backbone(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "orig_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.vgg_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 4096, 7, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.vgg_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 4096, 7, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(inp)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_40": {
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_52": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_56": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_63": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_66": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/sac.py": {
        "torch": {
            "zeros_53": {
                "variable": {
                    "value": "running_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kwargs['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_121": {
                "variable": {
                    "value": "loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "pseudo_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - self.running_conf.clamp(0.0)) ** p",
                            "BinOp"
                        ],
                        [
                            "(1 - self.running_conf.clamp(0.0)) ** p",
                            "BinOp"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_136": {
                "variable": {
                    "value": "loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "pseudo_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - self.running_conf.clamp(0.0)) ** p",
                            "BinOp"
                        ],
                        [
                            "(1 - self.running_conf.clamp(0.0)) ** p",
                            "BinOp"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "probs_peaks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gather(probs, T)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_275": {
                "variable": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(pred_logits, (h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_276": {
                "variable": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(pred_logits, (h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_289": {
                "variable": {
                    "value": "affine_grid_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "pred_probs.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_290": {
                "variable": {
                    "value": "pred_probs_aligned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pred_logits, 1)",
                            "Call"
                        ],
                        [
                            "pred_probs * (1 - ignore_mask[:, None].type_as(pred_probs))",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "affine_grid_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affine, size=pred_probs.size(), align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_299": {
                "variable": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_probs_aligned",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(pred_probs, affine_grid_probs, align_corners=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "affine_grid_300": {
                "variable": {
                    "value": "affine_grid_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "valid_probs.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_301": {
                "variable": {
                    "value": "valid_aligned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(pred_probs_aligned)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "affine_grid_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_inv, size=valid_probs.size(), align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_309": {
                "variable": {
                    "value": "refined",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_aligned",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "affine_grid_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_inv, size=valid_probs.size(), align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_310": {
                "variable": {
                    "value": "refined_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "affine_grid_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_inv, size=valid_probs.size(), align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_126": {
                "variable": {
                    "value": "loss_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_141": {
                "variable": {
                    "value": "loss_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "affine_grid_295": {
                "variable": {
                    "value": "affine_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "frames.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_296": {
                "variable": {
                    "value": "diags[frames_aligned]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "affine_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affine, size=frames.size(), align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_91": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slow_net_dict[key] - val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_152": {
                "input": {
                    "value": "-self.running_conf / self.cfg.THRESHOLD_BETA",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_214": {
                "tensors": {
                    "value": "out_list[index:index_end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_207": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_191": {
                "input": {
                    "value": "probs_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(probs + eps) / (1 + eps)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "opts.py": {
        "torch": {
            "is_available_83": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/compute_IS_weights.py": {
        "torch": {
            "save_98": {
                "obj": {
                    "value": "mask_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_count_550": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_104": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_device_102": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_546": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_547": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_548": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_194": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.cuda(self.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_368": {
                "input": {
                    "value": "logits_raw",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_85": {
                "log_dir": {
                    "value": "logdir_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, val_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_89": {
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/checkpoints.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_full_path(suffix)",
                            "Call"
                        ],
                        [
                            "self._get_full_path(suffix)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "location",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "{'model': self.models['model'].state_dict(), 'opt': self.models['opt'].state_dict(), 'score': score, 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_full_path(suffix)",
                            "Call"
                        ],
                        [
                            "self._get_full_path(suffix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/metrics.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "self.tps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "self.fps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "self.fns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "jaccards",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}