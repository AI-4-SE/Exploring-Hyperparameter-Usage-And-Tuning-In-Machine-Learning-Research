{
    "util/sc_vgg_metric.py": {
        "sklearn": {
            "normalize_180": {
                "X": {
                    "value": "mean_2.unsqueeze(0).cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_16": {
                "variable": {
                    "value": "tensor_bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor[:, 2:3, :, :], tensor[:, 1:2, :, :], tensor[:, 0:1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_172": {
                "variable": {
                    "value": "label_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "Image.open(self.label_paths[index]).convert('L').resize((256, 256), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "self.transform_label(label) * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out[r11]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "out[r12]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(out['r11'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out[r21]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(out['p1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "out[r22]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(out['r21'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "out[r31]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_1(out['p2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "out[r32]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_2(out['r31'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "out[r33]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_3(out['r32'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "out[r34]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_4(out['r33'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "out[r41]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_1(out['p3'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "out[r42]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_2(out['r41'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out[r43]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_3(out['r42'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out[r44]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_4(out['r43'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "out[r51]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_1(out['p4'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "out[r52]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_2(out['r51'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out[r53]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_3(out['r52'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "out[r54]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_4(out['r53'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_176": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "Image.open(self.label_paths[index]).convert('L').resize((256, 256), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "self.transform_label(label) * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_196": {
                "f": {
                    "value": "bs_dir + 'models/vgg19_conv.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_214": {
                "variable": {
                    "value": "img_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_features[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_214": {
                "variable": {
                    "value": "img_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_215": {
                "variable": {
                    "value": "gen_img_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_img_features[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "gen_img_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_55": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_56": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_57": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_58": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_59": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/celebahqedge_dataset.py": {
        "torch": {
            "cat_116": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor_edges_all, tensors_dist, tensor_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "[tensors_dist, tensor_dist]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/deepfashion_dataset.py": {
        "torch": {
            "cat_170": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor_pose, tensors_dist)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "[tensors_dist, tensor_dist]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "data/pix2pix_dataset.py": {
        "torch": {
            "zeros_like_115": {
                "variable": {
                    "value": "self_ref_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "transform_image(image_ref)",
                            "Call"
                        ],
                        [
                            "transform_image(image)",
                            "Call"
                        ],
                        [
                            "transform_image(image_ref)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_142": {
                "variable": {
                    "value": "self_ref_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "transform_image(image_ref)",
                            "Call"
                        ],
                        [
                            "transform_image(image)",
                            "Call"
                        ],
                        [
                            "transform_image(image_ref)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/__init__.py": {
        "torch": {}
    },
    "models/networks/ContextualLoss.py": {
        "torch": {
            "zeros_366": {
                "variable": {
                    "value": "X_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_367": {
                "variable": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "feature_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X_features.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_71": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - d_norm) / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_75": {
                "variable": {
                    "value": "CX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(A_ij, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_128": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - d_norm) / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_132": {
                "variable": {
                    "value": "CX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(A_ij, dim=-1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_167": {
                "variable": {
                    "value": "X_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "X_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(X_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(X_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "X_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "X_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "X_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(X_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(X_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(X_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(X_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(patch_size // 2, patch_size // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_170": {
                "variable": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(patch_size // 2, patch_size // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_182": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - d_norm) / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unfold_215": {
                "variable": {
                    "value": "X_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "X_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(X_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(X_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "X_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "X_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "X_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(X_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(X_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(X_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(X_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(patch_size // 2, patch_size // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_218": {
                "variable": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(patch_size // 2, patch_size // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_227": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_features_permute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_279": {
                "variable": {
                    "value": "image_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(image_x, size=(feature_size, feature_size), mode='bilinear').view(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "image_x.view(batch_size, 3, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(image_x, size=(feature_size, feature_size), mode='bilinear').view(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "image_x.view(batch_size, 3, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(feature_size, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_280": {
                "variable": {
                    "value": "image_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(image_y, size=(feature_size, feature_size), mode='bilinear').view(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "image_y.view(batch_size, 3, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(image_y, size=(feature_size, feature_size), mode='bilinear').view(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "image_y.view(batch_size, 3, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(feature_size, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_283": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_features_permute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_187": {
                "variable": {
                    "value": "CX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(A_ij, dim=-1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_189": {
                "variable": {
                    "value": "CX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(A_ij, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_223": {
                "variable": {
                    "value": "image_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(image_x, size=(feature_size, feature_size), mode='bilinear').view(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "image_x.view(batch_size, 3, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(image_x, size=(feature_size, feature_size), mode='bilinear').view(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "image_x.view(batch_size, 3, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(feature_size, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "image_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(image_y, size=(feature_size, feature_size), mode='bilinear').view(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "image_y.view(batch_size, 3, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(image_y, size=(feature_size, feature_size), mode='bilinear').view(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "image_y.view(batch_size, 3, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(feature_size, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_231": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(X_features - Y_features_in.detach()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_234": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(X_features - Y_features[:, :, NN_index].detach()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_286": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(X_features - Y_features_in.detach()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_289": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(X_features - Y_features[:, :, NN_index].detach()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "input": {
                    "value": "X_features_permute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_72": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ],
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ],
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_76": {
                "input": {
                    "value": "CX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.max(A_ij, dim=1)[0], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=-1)[0], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=-1)[0], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=1)[0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_121": {
                "input": {
                    "value": "X_features_permute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_129": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ],
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ],
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "CX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.max(A_ij, dim=1)[0], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=-1)[0], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=-1)[0], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=1)[0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "input": {
                    "value": "X_features_permute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "X_features.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, feature_depth, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ],
                        [
                            "Y_features - Y_features.mean(dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "Y_features - Y_features.view(batch_size, feature_depth, -1).mean(dim=-1).unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "feature_normalize(Y_features)",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "F.unfold(Y_features, kernel_size=(patch_size, patch_size), stride=(1, 1), padding=(patch_size // 2, patch_size // 2))",
                            "Call"
                        ],
                        [
                            "feature_normalize(Y_features).view(batch_size, feature_depth, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_183": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ],
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ],
                        [
                            "torch.exp((1 - d_norm) / h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_191": {
                "input": {
                    "value": "CX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.max(A_ij, dim=1)[0], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=-1)[0], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=-1)[0], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.max(A_ij, dim=1)[0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_75": {
                "input": {
                    "value": "A_ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_132": {
                "input": {
                    "value": "A_ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_68": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_125": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_179": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.matmul(X_features_permute, Y_features)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_187": {
                "input": {
                    "value": "A_ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_189": {
                "input": {
                    "value": "A_ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "w / torch.sum(w, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/Synchronized-BatchNorm-PyTorch/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_71": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/Synchronized-BatchNorm-PyTorch/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/Synchronized-BatchNorm-PyTorch/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "models/networks/Synchronized-BatchNorm-PyTorch/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/Synchronized-BatchNorm-PyTorch/tests/test_numeric_batchnorm.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "a_std2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "handy_var(a_var2, unbias=False).clamp(min=1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/Synchronized-BatchNorm-PyTorch/tests/test_numeric_batchnorm_v2.py": {
        "torch": {
            "BatchNorm2d_30": {
                "variable": {
                    "value": "batchnorm1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "CHANNELS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_31": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "batchnorm1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_36": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "batchnorm2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "CHANNELS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/Synchronized-BatchNorm-PyTorch/tests/test_sync_batchnorm.py": {
        "torch": {
            "BatchNorm1d_68": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_77": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_87": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_97": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_107": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/__init__.py": {
        "torch": {
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/architecture.py": {
        "torch": {
            "ReflectionPad2d_31": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ch // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ch // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_198": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_199": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(theta.transpose(1, 2), phi)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_267": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_98": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_112": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_176": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "spectral_norm_188": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_189": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_190": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_191": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_48": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_49": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_129": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_130": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bmm_205": {
                "input": {
                    "value": "theta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.phi(x), [2, 2])",
                            "Call"
                        ],
                        [
                            "phi.view(-1, self.ch // 8, x.shape[2] * x.shape[3] // 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_207": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.g(x), [2, 2])",
                            "Call"
                        ],
                        [
                            "g.view(-1, self.ch // 2, x.shape[2] * x.shape[3] // 4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "beta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_218": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_221": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_269": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_270": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_51": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_132": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_222": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/base_network.py": {
        "torch": {}
    },
    "models/networks/correspondence.py": {
        "torch": {
            "ReflectionPad2d_19": {
                "variable": {
                    "value": "self.padding1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_22": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_23": {
                "variable": {
                    "value": "self.padding2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(activation_max, index_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_57": {
                "variable": {
                    "value": "output_max_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input == activation_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "input_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_73": {
                "variable": {
                    "value": "mask_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input == activation_max).type(torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_77": {
                "variable": {
                    "value": "grad_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_small_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(mask) * 0.0001",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.conv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "out[r11]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "out[r12]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(out['r11'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "out[r21]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(out['p1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "out[r22]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(out['r21'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "out[r31]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_1(out['p2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "out[r32]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_2(out['r31'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "out[r33]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_3(out['r32'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "out[r34]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_4(out['r33'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "out[r41]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_1(out['p3'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "out[r42]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_2(out['r41'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "out[r43]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_3(out['r42'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "out[r44]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_4(out['r43'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "out[r51]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_1(out['p4'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "out[r52]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_2(out['r51'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "out[r53]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_3(out['r52'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "out[r54]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_4(out['r53'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualBlock(self.feat_ch * 4 + label_nc + coord_c, self.feat_ch * 4 + label_nc + coord_c, kernel_size=3, padding=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualBlock(self.feat_ch * 4 + label_nc + coord_c, self.feat_ch * 4 + label_nc + coord_c, kernel_size=3, padding=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_ch * 4 + label_nc + coord_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cor_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_ch * 4 + label_nc + coord_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cor_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "self.phi6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_ch * 4 + label_nc + coord_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cor_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "variable": {
                    "value": "self.theta6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_ch * 4 + label_nc + coord_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cor_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "variable": {
                    "value": "self.phi_conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_ch * 4 + label_nc + coord_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cor_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.theta_conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_ch * 4 + label_nc + coord_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cor_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_208": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_242": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "adp_feat_seg.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_243": {
                "variable": {
                    "value": "ref_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "adp_feat_img.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_245": {
                "variable": {
                    "value": "seg6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "adp_feat_seg6.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_246": {
                "variable": {
                    "value": "ref_seg6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "adp_feat_img6.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unfold_264": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(theta)",
                            "Call"
                        ],
                        [
                            "F.unfold(theta, kernel_size=self.opt.match_kernel, padding=int(self.opt.match_kernel // 2))",
                            "Call"
                        ],
                        [
                            "util.mean_normalize(theta, dim_mean=dim_mean)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.opt.match_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(self.opt.match_kernel // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unfold_269": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(phi)",
                            "Call"
                        ],
                        [
                            "F.unfold(phi, kernel_size=self.opt.match_kernel, padding=int(self.opt.match_kernel // 2))",
                            "Call"
                        ],
                        [
                            "util.mean_normalize(phi, dim_mean=dim_mean)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.opt.match_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(self.opt.match_kernel // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_290": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_permute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(phi)",
                            "Call"
                        ],
                        [
                            "F.unfold(phi, kernel_size=self.opt.match_kernel, padding=int(self.opt.match_kernel // 2))",
                            "Call"
                        ],
                        [
                            "util.mean_normalize(phi, dim_mean=dim_mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_291": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_293": {
                "variable": {
                    "value": "R_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R.transpose(1, 2) * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_302": {
                "variable": {
                    "value": "conf_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_map * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_307": {
                "variable": {
                    "value": "coor_out[conf_map]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_map_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf_map.view(-1, 1, 64, 64).repeat(1, 3, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_312": {
                "variable": {
                    "value": "ref_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_315": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_img, size=(64, 64), mode='nearest')",
                            "Call"
                        ],
                        [
                            "ref_.view(batch_size, channel_, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_319": {
                "variable": {
                    "value": "coor_out[warp64]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(R[:, :, :, 0], ref_)",
                            "Call"
                        ],
                        [
                            "y_.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel_, 64, 64)",
                            "Call"
                        ],
                        [
                            "y1.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel1, 128, 128)",
                            "Call"
                        ],
                        [
                            "F.unfold(y_, self.down, stride=self.down)",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_322": {
                "variable": {
                    "value": "ref_feat1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_331": {
                "variable": {
                    "value": "coor_out[warp128]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(R[:, :, :, 0], ref_)",
                            "Call"
                        ],
                        [
                            "y_.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel_, 64, 64)",
                            "Call"
                        ],
                        [
                            "y1.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel1, 128, 128)",
                            "Call"
                        ],
                        [
                            "F.unfold(y_, self.down, stride=self.down)",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_333": {
                "variable": {
                    "value": "ref_feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat2, size=(128, 128), mode='nearest')",
                            "Call"
                        ],
                        [
                            "ref_feat2.view(batch_size, channel2, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_340": {
                "variable": {
                    "value": "ref_feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat3, size=(128, 128), mode='nearest')",
                            "Call"
                        ],
                        [
                            "ref_feat3.view(batch_size, channel3, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_347": {
                "variable": {
                    "value": "ref_feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat4, size=(64, 64), mode='nearest')",
                            "Call"
                        ],
                        [
                            "ref_feat4.view(batch_size, channel4, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_350": {
                "variable": {
                    "value": "y4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_feat4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat4, size=(64, 64), mode='nearest')",
                            "Call"
                        ],
                        [
                            "ref_feat4.view(batch_size, channel4, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_354": {
                "variable": {
                    "value": "ref_feat5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat5, size=(64, 64), mode='nearest')",
                            "Call"
                        ],
                        [
                            "ref_feat5.view(batch_size, channel5, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_357": {
                "variable": {
                    "value": "y5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_feat5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat5, size=(64, 64), mode='nearest')",
                            "Call"
                        ],
                        [
                            "ref_feat5.view(batch_size, channel5, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_433": {
                "variable": {
                    "value": "xx_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, h, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_434": {
                "variable": {
                    "value": "xx_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_434": {
                "variable": {
                    "value": "xx_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_435": {
                "variable": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([bs, h, 1], dtype=x.dtype, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "xx_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(w, dtype=x.dtype, device=x.device).unsqueeze(0).repeat([bs, 1]).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_435": {
                "variable": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_437": {
                "variable": {
                    "value": "yy_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, 1, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_438": {
                "variable": {
                    "value": "yy_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_438": {
                "variable": {
                    "value": "yy_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_439": {
                "variable": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(h, dtype=x.dtype, device=x.device).unsqueeze(0).repeat([bs, 1]).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "yy_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([bs, 1, w], dtype=x.dtype, device=x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_439": {
                "variable": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_446": {
                "variable": {
                    "value": "rr_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(xx_channel, 2) + torch.pow(yy_channel, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xx_channel, yy_channel, rr_channel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_110": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_111": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_204": {
                "variable": {
                    "value": "self.upsampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_206": {
                "variable": {
                    "value": "self.upsampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_370": {
                "variable": {
                    "value": "ref_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / self.down",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input == activation_max).type(torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_114": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_115": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_116": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_117": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_118": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_299": {
                "input": {
                    "value": "R[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_388": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / self.down",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_392": {
                "variable": {
                    "value": "warp_mask_to_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_WTA_v / f_WTA_v.sum(-1).view(-1, N, 1)",
                            "BinOp"
                        ],
                        [
                            "f_WTA_v / f_WTA_v.sum(-1).view(-1, N, 1)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(f.transpose(1, 2), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg_map, size=adp_feat_seg.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_map, scale_factor=1 / self.down, mode='nearest')",
                            "Call"
                        ],
                        [
                            "seg.view(batch_size, channel, -1)",
                            "Call"
                        ],
                        [
                            "seg.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_393": {
                "variable": {
                    "value": "warp_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "warp_mask_to_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(f_div_C_v, seg)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_404": {
                "variable": {
                    "value": "f_div_C_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unfold_408": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(R[:, :, :, 0], ref_)",
                            "Call"
                        ],
                        [
                            "y_.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel_, 64, 64)",
                            "Call"
                        ],
                        [
                            "y1.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel1, 128, 128)",
                            "Call"
                        ],
                        [
                            "F.unfold(y_, self.down, stride=self.down)",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_409": {
                "variable": {
                    "value": "warp_cycle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_WTA_v / f_WTA_v.sum(-1).view(-1, N, 1)",
                            "BinOp"
                        ],
                        [
                            "f_WTA_v / f_WTA_v.sum(-1).view(-1, N, 1)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(f.transpose(1, 2), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(R[:, :, :, 0], ref_)",
                            "Call"
                        ],
                        [
                            "y_.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel_, 64, 64)",
                            "Call"
                        ],
                        [
                            "y1.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel1, 128, 128)",
                            "Call"
                        ],
                        [
                            "F.unfold(y_, self.down, stride=self.down)",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "fold_411": {
                "variable": {
                    "value": "warp_cycle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warp_cycle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(f_div_C_v, y_)",
                            "Call"
                        ],
                        [
                            "warp_cycle.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.fold(warp_cycle, 256, self.down, stride=self.down)",
                            "Call"
                        ],
                        [
                            "torch.matmul(f_div_C_v, y_).permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_416": {
                "variable": {
                    "value": "warp_cycle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_WTA_v / f_WTA_v.sum(-1).view(-1, N, 1)",
                            "BinOp"
                        ],
                        [
                            "f_WTA_v / f_WTA_v.sum(-1).view(-1, N, 1)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(f.transpose(1, 2), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(R[:, :, :, 0], ref_)",
                            "Call"
                        ],
                        [
                            "y_.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel_, 64, 64)",
                            "Call"
                        ],
                        [
                            "y1.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel1, 128, 128)",
                            "Call"
                        ],
                        [
                            "F.unfold(y_, self.down, stride=self.down)",
                            "Call"
                        ],
                        [
                            "y_.view(batch_size, channel, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_416": {
                "variable": {
                    "value": "warp_cycle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "(adp_feat_seg, seg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "(adp_feat_img, ref_seg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "tensors": {
                    "value": "(adp_feat_seg6, seg6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "(adp_feat_img6, ref_seg6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_420": {
                "variable": {
                    "value": "real_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(real_img, self.down)",
                            "Call"
                        ],
                        [
                            "real_img.view(batch_size, channel, -1)",
                            "Call"
                        ],
                        [
                            "real_img.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_423": {
                "variable": {
                    "value": "warp_i2r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_WTA_v / f_WTA_v.sum(-1).view(-1, N, 1)",
                            "BinOp"
                        ],
                        [
                            "f_WTA_v / f_WTA_v.sum(-1).view(-1, N, 1)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(f.transpose(1, 2), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "real_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(real_img, self.down)",
                            "Call"
                        ],
                        [
                            "real_img.view(batch_size, channel, -1)",
                            "Call"
                        ],
                        [
                            "real_img.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_423": {
                "variable": {
                    "value": "warp_i2r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_425": {
                "variable": {
                    "value": "warp_i2r2i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "warp_i2r.view(batch_size, channel, -1).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_446": {
                "input": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(yy_range, yy_ones).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "yy_channel.float() / (h - 1)",
                            "BinOp"
                        ],
                        [
                            "2 * yy_channel - 1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_232": {
                "input": {
                    "value": "adp_feat_seg6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.feature_normalize(seg_feat6)",
                            "Call"
                        ],
                        [
                            "self.addcoords(adp_feat_seg6)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "adp_feat_img_pair6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.feature_normalize(adp_feat_img_pair6)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/discriminator.py": {
        "torch": {
            "avg_pool2d_50": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.ndf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.ndf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dec",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "spectral_norm_124": {
                "variable": {
                    "value": "self.gap_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(opt.ndf * mult, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_125": {
                "variable": {
                    "value": "self.gmp_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(opt.ndf * mult, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_155": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "submodel(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([gap, gmp], 1)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(self.conv1x1(intermediate_output))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_160": {
                "variable": {
                    "value": "gmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "cam_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gap_logit, gmp_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gap, gmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.semantic_nc + 3",
                            "BinOp"
                        ],
                        [
                            "opt.label_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_94": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*sequence[n]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "nc_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf_prev",
                            "variable"
                        ],
                        [
                            "int(nc_dec // 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_114": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "opt.ndf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "opt.ndf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "opt.ndf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "opt.ndf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_106": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if n == opt.n_layers_D - 1 else 2",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "nc_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf_prev",
                            "variable"
                        ],
                        [
                            "int(nc_dec // 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(nc_dec // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/generator.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.ref1_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.semantic_nc",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv_img1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_48": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "cmap1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cmap.repeat(1, seg_feat1.shape[1], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_feat1.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "cmap2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cmap.repeat(1, seg_feat2.shape[1], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_feat2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "cmap3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cmap.repeat(1, seg_feat3.shape[1], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_feat3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "cmap4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cmap.repeat(1, seg_feat4.shape[1], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_feat4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_68": {
                "variable": {
                    "value": "cmap5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cmap.repeat(1, seg_feat5.shape[1], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_feat5.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "variable": {
                    "value": "ref_feat1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ref1_init(ref_feat1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(ref_feat1, size=seg_feat1.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_feat1.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_71": {
                "variable": {
                    "value": "ref_feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat2, size=seg_feat2.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_feat2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_72": {
                "variable": {
                    "value": "ref_feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat3, size=seg_feat3.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_feat3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "variable": {
                    "value": "ref_feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat4, size=seg_feat4.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_feat4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "ref_feat5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_feat5, size=seg_feat5.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_feat5.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(seg_feat5, ref_feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((seg_feat5, ref_feat5), 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.G_head_0(x, fusion5)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, fusion5)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, fusion4)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_up_0(x, fusion3)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_up_1(x, fusion3)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_out_0(x, fusion2)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_out_1(x, fusion1)",
                            "Call"
                        ],
                        [
                            "self.conv_img1(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(input)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.deeper2(self.up(x), seg)",
                            "Call"
                        ],
                        [
                            "self.degridding0(x)",
                            "Call"
                        ],
                        [
                            "self.feature(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x.view(x.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((seg_feat5, ref_feat5), 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.G_head_0(x, fusion5)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, fusion5)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, fusion4)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_up_0(x, fusion3)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_up_1(x, fusion3)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_out_0(x, fusion2)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_out_1(x, fusion1)",
                            "Call"
                        ],
                        [
                            "self.conv_img1(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(input)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.deeper2(self.up(x), seg)",
                            "Call"
                        ],
                        [
                            "self.degridding0(x)",
                            "Call"
                        ],
                        [
                            "self.feature(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x.view(x.shape[0], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_134": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_146": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4 * nf, 2 * nf, kw, stride=2, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "leaky_relu_101": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((seg_feat5, ref_feat5), 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.G_head_0(x, fusion5)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, fusion5)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, fusion4)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_up_0(x, fusion3)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_up_1(x, fusion3)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_out_0(x, fusion2)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_out_1(x, fusion1)",
                            "Call"
                        ],
                        [
                            "self.conv_img1(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(input)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.deeper2(self.up(x), seg)",
                            "Call"
                        ],
                        [
                            "self.degridding0(x)",
                            "Call"
                        ],
                        [
                            "self.feature(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x.view(x.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "opt.spade_ic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4 if opt.domain_rela else 3",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ],
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "ndf * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.adaptor_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ],
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4 if opt.domain_rela else 3",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ],
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.adaptor_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ],
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4 if opt.domain_rela else 3",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ],
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "4 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4 if opt.domain_rela else 3",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ],
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_187": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4 if opt.domain_rela else 3",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ],
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_190": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(nf // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4 if opt.domain_rela else 3",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ],
                        [
                            "int((kw - 1.0) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_193": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "int(nf // 2) * 8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_201": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/geomloss/kernel_samples.py": {
        "torch": {
            "matmul_80": {
                "variable": {
                    "value": "a_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(double_grad(x), x.detach(), blur=blur)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "\u03b1.detach().unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "a_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "b_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(double_grad(y), y.detach(), blur=blur)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "\u03b2.detach().unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "b_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "b_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(x, y, blur=blur)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "\u03b2.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "b_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "a_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_xy.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "\u03b1.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "a_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_158": {
                "tensors": {
                    "value": "(x.min(dim=0)[0], y.min(dim=0)[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_158": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_159": {
                "tensors": {
                    "value": "(x.max(dim=0)[0], y.max(dim=0)[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_159": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/geomloss/samples_loss.py": {
        "torch": {
            "ones_123": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_126": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/geomloss/sinkhorn_divergence.py": {
        "torch": {
            "set_grad_enabled_94": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_164": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_13": {
                "tensors": {
                    "value": "(x.min(dim=0)[0], y.min(dim=0)[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_13": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_14": {
                "tensors": {
                    "value": "(x.max(dim=0)[0], y.max(dim=0)[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_14": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_135": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/geomloss/sinkhorn_samples.py": {
        "torch": {}
    },
    "models/networks/geomloss/utils.py": {
        "torch": {
            "dot_8": {
                "input": {
                    "value": "\u03b1.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "f.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/loss.py": {
        "torch": {
            "L1Loss_109": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_93": {
                "variable": {
                    "value": "new_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_63": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_67": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_70": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_74": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_68": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_71": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/normalization.py": {
        "torch": {
            "Sequential_56": {
                "variable": {
                    "value": "self.seg_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.seg_nc, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.ref_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(feat_nc, feat_nc, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.ref_shared2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(feat_nc, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "variable": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg_map, size=(h, w), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "ref_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_map, size=(h, w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.coef * ref_aggr + ref_map",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "conf_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(conf_map, size=(h, w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "conf_map.repeat(1, self.nhidden, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_99": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_feat * (1 - conf_map) + ref_feat * conf_map",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(feat, size=(h, w), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_298": {
                "variable": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_299": {
                "variable": {
                    "value": "warpmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warpmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(warpmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_313": {
                "variable": {
                    "value": "similarity_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(similarity_map, size=gamma.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "similarity_map.detach()",
                            "Call"
                        ],
                        [
                            "F.interpolate(similarity_map, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_146": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_173": {
                "variable": {
                    "value": "similarity_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(similarity_map, size=gamma.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "similarity_map.detach()",
                            "Call"
                        ],
                        [
                            "F.interpolate(similarity_map, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "gamma.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "*args": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.mlp_shared_example",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_266": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_267": {
                "variable": {
                    "value": "self.mlp_gamma_example",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_268": {
                "variable": {
                    "value": "self.mlp_beta_example",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "variable": {
                    "value": "self.mlp_shared_imagine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "variable": {
                    "value": "self.mlp_gamma_imagine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "variable": {
                    "value": "self.mlp_beta_imagine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_278": {
                "variable": {
                    "value": "self.mlp_shared_example",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc_example, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "variable": {
                    "value": "self.mlp_gamma_example",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_283": {
                "variable": {
                    "value": "self.mlp_beta_example",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_285": {
                "variable": {
                    "value": "self.mlp_shared_imagine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc_imagine, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_289": {
                "variable": {
                    "value": "self.mlp_gamma_imagine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_290": {
                "variable": {
                    "value": "self.mlp_beta_imagine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_39": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "self.seg_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "feat_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feat_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "feat_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bmm_85": {
                "variable": {
                    "value": "ref_aggr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat.view(b, self.feat_nc, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "atten_map.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "ref_map_aggr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ref_map, size=(h, w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.coef * ref_aggr + ref_map",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bmm_91": {
                "variable": {
                    "value": "ref_aggr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat.view(b, self.feat_nc, 64 * 64)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "atten_map.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_93": {
                "variable": {
                    "value": "ref_aggr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_aggr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(ref_feat.view(b, self.feat_nc, h * w), atten_map.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "ref_aggr.view(b, self.feat_nc, h, w)",
                            "Call"
                        ],
                        [
                            "torch.bmm(ref_feat.view(b, self.feat_nc, 64 * 64), atten_map.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "ref_aggr.view(b, self.feat_nc, 64, 64)",
                            "Call"
                        ],
                        [
                            "F.interpolate(ref_aggr, size=(h, w), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_124": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_200": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "equal_lr(layer)",
                            "Call"
                        ],
                        [
                            "spectral_norm(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_244": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_334": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_142": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "label_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "label_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_220": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_262": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_263": {
                "in_channels": {
                    "value": "label_nc_example",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_271": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "label_nc_imagine",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "in_channels": {
                    "value": "label_nc_example",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_286": {
                "in_channels": {
                    "value": "label_nc_imagine",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_251": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/ranking_attention.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "topks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "topk_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "topks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "topk_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unfold_86": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, w, w, D).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "input.permute(0, 3, 2, 1).contiguous().view(b, -1, n_patch)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(patch_size ** (1 / 2))",
                            "Call"
                        ],
                        [
                            "int(patch_size ** (1 / 2))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_w",
                            "variable"
                        ],
                        [
                            "patch_w",
                            "variable"
                        ],
                        [
                            "int(self.patch_size ** (1 / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "fold_97": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, w, w, D).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "input.permute(0, 3, 2, 1).contiguous().view(b, -1, n_patch)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(patch_w, patch_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_w",
                            "variable"
                        ],
                        [
                            "patch_w",
                            "variable"
                        ],
                        [
                            "int(self.patch_size ** (1 / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "b_v_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "buvk,bvtd->butkd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(Corr * 1000, dim=-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_113": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "buij,buje->buie",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dots.view(b, patch_num, patch_size, -1, patch_size)",
                            "Call"
                        ],
                        [
                            "(dots_ * 1000).softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_146": {
                "variable": {
                    "value": "b_v_l",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "buikj,bujd->buikd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dots.view(b, patch_num, patch_size, -1, patch_size)",
                            "Call"
                        ],
                        [
                            "(dots_ * 1000).softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_147": {
                "variable": {
                    "value": "b_v_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "buvk,bvikd->buid",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(Corr * 1000, dim=-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_19": {
                "variable": {
                    "value": "topks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_67": {
                "variable": {
                    "value": "Corr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bei,bej->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_q.mean(dim=2).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_70": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Corr * 1000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "R_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Corr.transpose(1, 2) * 1000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "R_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_189": {
                "variable": {
                    "value": "b_k_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "buvk,bvtd->butkd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(Corr * 1000, dim=-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_192": {
                "variable": {
                    "value": "dots_",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "buid,bujkd->buijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "b_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unfold_bucket(self.patch_size, q)",
                            "Call"
                        ],
                        [
                            "unfold_bucket(self.patch_size, q)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_71": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "models/networks/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pix_model.py": {
        "torch": {
            "ModuleDict_22": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.initialize_networks(opt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G_params + [{'params': self.net['netCorr'].parameters(), 'lr': opt.lr * 0.5}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D_params + list(self.net['netDomainClassifier'].parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_412": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_413": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_421": {
                "variable": {
                    "value": "fake_seg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_422": {
                "variable": {
                    "value": "real_seg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_seg[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_424": {
                "variable": {
                    "value": "down_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_424": {
                "variable": {
                    "value": "down_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_425": {
                "variable": {
                    "value": "fake_seg_loss_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "down_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(gt.unsqueeze(1).float(), scale_factor=0.5, mode='nearest').squeeze().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_426": {
                "variable": {
                    "value": "real_seg_loss_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_seg[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "down_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(gt.unsqueeze(1).float(), scale_factor=0.5, mode='nearest').squeeze().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_37": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_38": {
                "variable": {
                    "value": "self.MSE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_288": {
                "variable": {
                    "value": "ref_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / self.opt.warp_stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_288": {
                "variable": {
                    "value": "ref_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_289": {
                "variable": {
                    "value": "gt_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / self.opt.warp_stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_289": {
                "variable": {
                    "value": "gt_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1.0 / 32, 1.0 / 16, 1.0 / 8, 1.0 / 4, 1.0]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(weights, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "fake_cam_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[it[:it.shape[0] // 2] for it in cam_logit]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "real_cam_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[it[it.shape[0] // 2:] for it in cam_logit]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_220": {
                "input": {
                    "value": "self.contextual_forward_loss(source[-1], target[-1].detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_221": {
                "input": {
                    "value": "self.contextual_forward_loss(source[-2], target[-2].detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_222": {
                "input": {
                    "value": "self.contextual_forward_loss(F.avg_pool2d(source[-3], 2), F.avg_pool2d(target[-3].detach(), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_240": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.opt.warp_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_246": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.opt.warp_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_292": {
                "variable": {
                    "value": "ref_label_uniq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_293": {
                "variable": {
                    "value": "gt_label_uniq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_295": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_306": {
                "variable": {
                    "value": "gt_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_semantics.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / self.opt.warp_stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_306": {
                "variable": {
                    "value": "gt_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "models/vgg19_conv.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_224": {
                "input": {
                    "value": "self.contextual_forward_loss(F.avg_pool2d(source[-4], 4), F.avg_pool2d(target[-4].detach(), 4))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_244": {
                "input": {
                    "value": "generate_out['warp_cycle']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(ref_image, self.opt.warp_stride)",
                            "Call"
                        ],
                        [
                            "ref_image",
                            "variable"
                        ]
                    ]
                }
            },
            "avg_pool2d_222": {
                "input": {
                    "value": "target[-3].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_247": {
                "input": {
                    "value": "generate_out['warp_i2r2i']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(real_image, self.opt.warp_stride)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pred[pred.size(0) // 2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_251": {
                "input": {
                    "value": "F.l1_loss(generate_out['warp64'], real_image, reduce=False) * sample_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_252": {
                "input": {
                    "value": "F.l1_loss(generate_out['warp128'], real_image, reduce=False) * sample_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_309": {
                "input": {
                    "value": "generate_out['warp_mask'].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_label.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_224": {
                "input": {
                    "value": "target[-4].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_251": {
                "input": {
                    "value": "generate_out['warp64']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l1_loss_252": {
                "input": {
                    "value": "generate_out['warp128']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nll_loss_311": {
                "input": {
                    "value": "torch.log(generate_out['warp_mask'] + 1e-10)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input_label.float(), scale_factor=1 / self.opt.warp_stride, mode='nearest').long().squeeze(1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input_semantics.float(), scale_factor=1 / self.opt.warp_stride, mode='nearest').long().squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_311": {
                "input": {
                    "value": "generate_out['warp_mask'] + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_199": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "cat_88": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label.cpu(), data_i['ref'].cpu(), trainer.out['warp128'].cpu(), trainer.get_latest_generated().data.cpu(), data_i['image'].cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/pix2pix_trainer.py": {
        "torch": {
            "Adam_151": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': self.pix2pix_model_on_one_gpu.net['netG'].parameters(), 'lr': self.opt.lr * 0.5}]",
                            "List"
                        ],
                        [
                            "G_params + [{'params': self.pix2pix_model_on_one_gpu.net['netCorr'].parameters(), 'lr': self.opt.lr * 0.5}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.lr",
                            "Attribute"
                        ],
                        [
                            "self.opt.lr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "{'G': self.optimizer_G.state_dict(), 'D': self.optimizer_D.state_dict(), 'lr': self.old_lr}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.opt.checkpoints_dir, self.opt.name, 'optimizer.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "util/differentiable_topk.py": {
        "torch": {
            "exp_37": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-C / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, 1, k + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_72": {
                "variable": {
                    "value": "Gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-C + f + g) / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_86": {
                "variable": {
                    "value": "inv_Kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(nu_.squeeze(-2)) - torch.matmul(Gamma_.transpose(-1, -2) * inv_mu.unsqueeze(-2), Gamma_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_164": {
                "variable": {
                    "value": "max_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.clone().detach()",
                            "Call"
                        ],
                        [
                            "scores.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_166": {
                "variable": {
                    "value": "min_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.clone().detach()",
                            "Call"
                        ],
                        [
                            "scores.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_207": {
                "variable": {
                    "value": "max_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.clone().detach()",
                            "Call"
                        ],
                        [
                            "scores.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_209": {
                "variable": {
                    "value": "min_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.clone().detach()",
                            "Call"
                        ],
                        [
                            "scores.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_239": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-C + f + g) / self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "[bs, 1, k_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_60": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, n, 1], requires_grad=False) / n",
                            "BinOp"
                        ],
                        [
                            "mu.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, n], requires_grad=False) / n",
                            "BinOp"
                        ],
                        [
                            "mu.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_61": {
                "input": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([self.k / n, (n - self.k) / n]).view([1, 1, 2])",
                            "Call"
                        ],
                        [
                            "nu.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([self.k / n, (n - self.k) / n]).view([1, 2, 1])",
                            "Call"
                        ],
                        [
                            "nu.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_embed_83": {
                "input": {
                    "value": "nu_.squeeze(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "input": {
                    "value": "Gamma_.transpose(-1, -2) * inv_mu.unsqueeze(-2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "Gamma_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gamma[:, :, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_104": {
                "input": {
                    "value": "inv_Kappa.matmul(g2).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_63": {
                "input": {
                    "value": "-Z / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_66": {
                "input": {
                    "value": "-Z / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_96": {
                "input": {
                    "value": "g1_L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g1.unsqueeze(-2).matmul(L)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_174": {
                "*size": {
                    "value": "[1, n, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_218": {
                "*size": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_228": {
                "input": {
                    "value": "-Z / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_232": {
                "input": {
                    "value": "-Z / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_236": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, n, 1], requires_grad=False) / n",
                            "BinOp"
                        ],
                        [
                            "mu.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, n], requires_grad=False) / n",
                            "BinOp"
                        ],
                        [
                            "mu.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_237": {
                "input": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([self.k / n, (n - self.k) / n]).view([1, 1, 2])",
                            "Call"
                        ],
                        [
                            "nu.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([self.k / n, (n - self.k) / n]).view([1, 2, 1])",
                            "Call"
                        ],
                        [
                            "nu.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "util/retrieve_ref_vgg.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "tensor_bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor[:, 2:3, :, :], tensor[:, 1:2, :, :], tensor[:, 0:1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_141": {
                "device": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out[r11]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "out[r12]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(out['r11'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "out[r21]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(out['p1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out[r22]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(out['r21'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out[r31]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_1(out['p2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out[r32]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_2(out['r31'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out[r33]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_3(out['r32'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "out[r34]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_4(out['r33'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "out[r41]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_1(out['p3'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "out[r42]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_2(out['r41'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out[r43]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_3(out['r42'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "out[r44]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_4(out['r43'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "out[r51]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_1(out['p4'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "out[r52]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_2(out['r51'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "out[r53]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_3(out['r52'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "out[r54]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_4(out['r53'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_144": {
                "f": {
                    "value": "/home/fangneng.zfn/projects/SFERT6/models/vgg19_conv.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2d_39": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_41": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_45": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_46": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_47": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_48": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/sinkhorn.py": {
        "torch": {
            "ones_like_48": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a * nu / torch.bmm(K, v.view(n, out_size, 1)).view(n, in_size)",
                            "BinOp"
                        ],
                        [
                            "u * mask",
                            "BinOp"
                        ],
                        [
                            "K.new_zeros((batch_size, in_size))",
                            "Call"
                        ],
                        [
                            "eps * (a + min_eps(u, v, dim=-1)) + u",
                            "BinOp"
                        ],
                        [
                            "u.masked_fill(~mask, -100000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_51": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(out_size / in_size)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(u).fill_(out_size / in_size)",
                            "Call"
                        ],
                        [
                            "out_size / mask.float().sum(1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.log(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_62": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(K + u.view(batch_size, in_size, 1) + v.view(batch_size, 1, out_size)) / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_77": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bid,bod->bio",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_14": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(K + u.view(batch_size, in_size, 1) + v.view(batch_size, 1, out_size)) / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "[n, out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_25": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(dot / eps)",
                            "Call"
                        ],
                        [
                            "dot",
                            "variable"
                        ],
                        [
                            "u.view(n, in_size, 1) * (K * v.view(n, 1, out_size))",
                            "BinOp"
                        ],
                        [
                            "K / out_size",
                            "BinOp"
                        ],
                        [
                            "torch.exp((K + u.view(batch_size, in_size, 1) + v.view(batch_size, 1, out_size)) / eps)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bid,bod->bio', input, weight)",
                            "Call"
                        ],
                        [
                            "K.reshape(-1, in_size, out_size)",
                            "Call"
                        ],
                        [
                            "log_sinkhorn(K, mask, eps, return_kernel=return_kernel, max_iter=max_iter)",
                            "Call"
                        ],
                        [
                            "torch.exp(K / eps)",
                            "Call"
                        ],
                        [
                            "sinkhorn(K, mask, eps, return_kernel=return_kernel, max_iter=max_iter)",
                            "Call"
                        ],
                        [
                            "K.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v.view(n, out_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_28": {
                "input": {
                    "value": "u.view(n, 1, in_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(dot / eps)",
                            "Call"
                        ],
                        [
                            "dot",
                            "variable"
                        ],
                        [
                            "u.view(n, in_size, 1) * (K * v.view(n, 1, out_size))",
                            "BinOp"
                        ],
                        [
                            "K / out_size",
                            "BinOp"
                        ],
                        [
                            "torch.exp((K + u.view(batch_size, in_size, 1) + v.view(batch_size, 1, out_size)) / eps)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bid,bod->bio', input, weight)",
                            "Call"
                        ],
                        [
                            "K.reshape(-1, in_size, out_size)",
                            "Call"
                        ],
                        [
                            "log_sinkhorn(K, mask, eps, return_kernel=return_kernel, max_iter=max_iter)",
                            "Call"
                        ],
                        [
                            "torch.exp(K / eps)",
                            "Call"
                        ],
                        [
                            "sinkhorn(K, mask, eps, return_kernel=return_kernel, max_iter=max_iter)",
                            "Call"
                        ],
                        [
                            "K.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_44": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(K + u.view(batch_size, in_size, 1) + v.view(batch_size, 1, out_size)) / eps",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "util/sinkhorn_solver.py": {
        "torch": {
            "zeros_like_35": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.8, 0.2]])",
                            "Call"
                        ],
                        [
                            "a.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_36": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.2, 0.2, 0.2, 0.2, 0.2]])",
                            "Call"
                        ],
                        [
                            "b.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_69": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_boltzmann_kernel(u, v, C)",
                            "Call"
                        ],
                        [
                            "self._log_boltzmann_kernel(u, v, C)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_72": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ground_metric(x_ - y_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "mean_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(u - u0), dim=-1) + torch.sum(torch.abs(v - v0), dim=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_11": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "a + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_50": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_boltzmann_kernel(u, v, C)",
                            "Call"
                        ],
                        [
                            "self._log_boltzmann_kernel(u, v, C)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "b + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_55": {
                "input": {
                    "value": "K_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_boltzmann_kernel(u, v, C).transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "torch.abs(v - v0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_59": {
                "input": {
                    "value": "v - v0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "util/sinkhorn_test.py": {
        "torch": {
            "Tensor_19": {
                "variable": {
                    "value": "scores_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_8": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/topk_ranking.py": {
        "torch": {
            "exp_12": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-C / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_43": {
                "variable": {
                    "value": "max_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_45": {
                "variable": {
                    "value": "min_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_11": {
                "*size": {
                    "value": "[bs, 1, k_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "[bs, n, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "div_43": {
                "variable": {
                    "value": "feature_in_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_in",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "feature_in_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(feature_in, 2, 1, keepdim=True) + sys.float_info.epsilon",
                            "BinOp"
                        ],
                        [
                            "torch.div(feature_in, feature_in_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_49": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature - feature.mean(dim=dim_mean, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.div(feature, feature_norm)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "feature_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(feature, 2, 1, keepdim=True) + sys.float_info.epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "tensor_bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor[:, 2:3, :, :], tensor[:, 1:2, :, :], tensor[:, 0:1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_260": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_59": {
                "input": {
                    "value": "(input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_325": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_42": {
                "input": {
                    "value": "feature_in",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_48": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature - feature.mean(dim=dim_mean, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.div(feature, feature_norm)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/utils.py": {
        "torch": {
            "randperm_31": {
                "n": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp.mean()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}