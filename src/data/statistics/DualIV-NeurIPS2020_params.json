{
    "DeepGMM/baselines/agmm/deep_gmm.py": {
        "sklearn": {
            "RandomForestRegressor_86": {
                "variable": {
                    "value": "dtree",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self._num_trees",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_leaf_nodes": {
                    "value": "self._n_critics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "self._min_cluster_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_94": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self._n_critics",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_180": {
                "variable": {
                    "value": "self.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_instruments]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "instrument",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_181": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_treatments]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "treatment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_182": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_outcomes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "outcome",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "self.Leaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, cluster_labels.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "leaf_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_184": {
                "variable": {
                    "value": "self.drop_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "drop_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_202": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_371": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "scope_variables('Modeler')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_372": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_208": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "scope_variables('Modeler')",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self._num_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_178": {
                "seed": {
                    "value": "self._random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_216": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_217": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self._summary_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/baselines/all_baselines.py": {
        "sklearn": {
            "Pipeline_76": {
                "variable": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('ridge', Ridge())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_77": {
                "variable": {
                    "value": "direct_regression",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('ridge', Ridge())])",
                            "Call"
                        ],
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ],
                        [
                            "Pipeline([('standard', MinMaxScaler()), ('nn', sklearn.neural_network.MLPRegressor(solver='lbfgs'))])",
                            "Call"
                        ],
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=range(1, 4), ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(nn__alpha=np.logspace(-5, 5, 5), nn__hidden_layer_sizes=[(10,), (20,), (10, 10), (20, 10), (10, 10, 10), (20, 10, 5)])",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=self._poly_degree, ridge__alpha=self._ridge_alpha)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Pipeline_90": {
                "variable": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('poly', PolynomialFeatures()), ('ridge', Ridge())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_92": {
                "variable": {
                    "value": "direct_regression",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('ridge', Ridge())])",
                            "Call"
                        ],
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ],
                        [
                            "Pipeline([('standard', MinMaxScaler()), ('nn', sklearn.neural_network.MLPRegressor(solver='lbfgs'))])",
                            "Call"
                        ],
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=range(1, 4), ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(nn__alpha=np.logspace(-5, 5, 5), nn__hidden_layer_sizes=[(10,), (20,), (10, 10), (20, 10), (10, 10, 10), (20, 10, 5)])",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=self._poly_degree, ridge__alpha=self._ridge_alpha)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Pipeline_152": {
                "variable": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('standard', MinMaxScaler()), ('nn', sklearn.neural_network.MLPRegressor(solver='lbfgs'))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_155": {
                "variable": {
                    "value": "direct_regression",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('ridge', Ridge())])",
                            "Call"
                        ],
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ],
                        [
                            "Pipeline([('standard', MinMaxScaler()), ('nn', sklearn.neural_network.MLPRegressor(solver='lbfgs'))])",
                            "Call"
                        ],
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=range(1, 4), ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(nn__alpha=np.logspace(-5, 5, 5), nn__hidden_layer_sizes=[(10,), (20,), (10, 10), (20, 10), (10, 10, 10), (20, 10, 5)])",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=self._poly_degree, ridge__alpha=self._ridge_alpha)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Pipeline_280": {
                "variable": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('poly', PolynomialFeatures()), ('ridge', Ridge())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_282": {
                "variable": {
                    "value": "stage_1",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('ridge', Ridge())])",
                            "Call"
                        ],
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ],
                        [
                            "Pipeline([('standard', MinMaxScaler()), ('nn', sklearn.neural_network.MLPRegressor(solver='lbfgs'))])",
                            "Call"
                        ],
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=range(1, 4), ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(nn__alpha=np.logspace(-5, 5, 5), nn__hidden_layer_sizes=[(10,), (20,), (10, 10), (20, 10), (10, 10, 10), (20, 10, 5)])",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=self._poly_degree, ridge__alpha=self._ridge_alpha)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Pipeline_288": {
                "variable": {
                    "value": "pipe2",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('poly', PolynomialFeatures()), ('ridge', Ridge())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_290": {
                "variable": {
                    "value": "stage_2",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipe2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=range(1, 4), ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ],
                        [
                            "dict(nn__alpha=np.logspace(-5, 5, 5), nn__hidden_layer_sizes=[(10,), (20,), (10, 10), (20, 10), (10, 10, 10), (20, 10, 5)])",
                            "Call"
                        ],
                        [
                            "dict(poly__degree=self._poly_degree, ridge__alpha=self._ridge_alpha)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_310": {
                "variable": {
                    "value": "stage_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_315": {
                "variable": {
                    "value": "stage_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Pipeline_381": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('pre_scale', MinMaxScaler()), ('poly', PolynomialFeatures(degree)), ('after_scale', MinMaxScaler())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GaussianMixture_407": {
                "variable": {
                    "value": "gmix",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self._n_kernel_fcts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "spherical",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Ridge_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PolynomialFeatures_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PolynomialFeatures_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PolynomialFeatures_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PolynomialFeatures_383": {
                "degree": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MinMaxScaler_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, 0:1] + z[:, 1:] + epsilon * 2.0",
                            "BinOp"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(x, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(x, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.g_mapping.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.g_mapping.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_true(x) + epsilon * 7.0 + eta / np.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_utils.TensorDataset(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self._n_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, 0:1] + z[:, 1:] + epsilon * 2.0",
                            "BinOp"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(x, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(x, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.g_mapping.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.g_mapping.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_494": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, 0:1] + z[:, 1:] + epsilon * 2.0",
                            "BinOp"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(x, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(x, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.g_mapping.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.g_mapping.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_495": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_true(x) + epsilon * 7.0 + eta / np.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_496": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(size=(n, 2))",
                            "Call"
                        ],
                        [
                            "self.augment(z, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(z, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(z, context)",
                            "Call"
                        ],
                        [
                            "self.f_mapping.transform(z)",
                            "Call"
                        ],
                        [
                            "torch.tensor(z, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "z.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_509": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "g_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_510": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_524": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_utils.TensorDataset(x, y, z)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_553": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, 0:1] + z[:, 1:] + epsilon * 2.0",
                            "BinOp"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(x, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "statsmodels.tools.tools.add_constant(x, prepend=False)",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.g_mapping.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.augment(x, context)",
                            "Call"
                        ],
                        [
                            "self.g_mapping.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_575": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_518": {
                "input": {
                    "value": "moms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moment_conditions.mean(dim=0, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.arr2str(self._model.coef_)",
                            "Call"
                        ],
                        [
                            "self.arr2str(self._model.params[:-1])",
                            "Call"
                        ],
                        [
                            "torch.eye(z_dim)",
                            "Call"
                        ],
                        [
                            "weights.cuda()",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(np.linalg.pinv(covariance_matrix.cpu().numpy(), rcond=1e-09))",
                            "Call"
                        ],
                        [
                            "weights.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_118": {
                "*tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_128": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(x_t, context_t)",
                            "Call"
                        ],
                        [
                            "model.predict(x_t, context_t)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_true(x) + epsilon * 7.0 + eta / np.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_353": {
                "ndarray": {
                    "value": "self._transform(X.data.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_434": {
                "*args": {
                    "value": "torch.nn.Linear(input_dim, 20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_524": {
                "*tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_435": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_436": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_535": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.linalg.pinv(covariance_matrix.cpu().numpy(), rcond=1e-09)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_538": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_533": {
                "input": {
                    "value": "moment_conditions.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "moment_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.mul(y - g_model(x))",
                            "Call"
                        ],
                        [
                            "z_b.mul(y_b - g_model(x_b))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DeepGMM/data_generator.py": {
        "sklearn": {
            "OneHotEncoder_72": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i for i in range(7)]]",
                            "List"
                        ]
                    ]
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/scenarios/abstract_scenario.py": {
        "sklearn": {
            "OneHotEncoder_135": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i for i in range(1, 8)]]",
                            "List"
                        ],
                        [
                            "[[i for i in range(1, 8)]]",
                            "List"
                        ]
                    ]
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "OneHotEncoder_118": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i for i in range(1, 8)]]",
                            "List"
                        ],
                        [
                            "[[i for i in range(1, 8)]]",
                            "List"
                        ]
                    ]
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "as_tensor_18": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_19": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_20": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_21": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_22": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DeepIV/deepiv/models.py": {
        "sklearn": {
            "PCA_305": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1 - 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "svd_solver": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                },
                "whiten": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Ridge_312": {
                "variable": {
                    "value": "ols1",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - p) / 2.0",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Ridge_315": {
                "variable": {
                    "value": "ols2",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - p) / 2.0",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DeepIV/experiments/data_generator.py": {
        "sklearn": {
            "OneHotEncoder_68": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DeepIV/experiments/twosls.py": {
        "sklearn": {
            "Pipeline_29": {
                "variable": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('poly', PolynomialFeatures()), ('ridge', Ridge())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_31": {
                "variable": {
                    "value": "stage_1",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(poly__degree=range(1, 4), ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Pipeline_40": {
                "variable": {
                    "value": "pipe2",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('poly', PolynomialFeatures()), ('ridge', Ridge())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_42": {
                "variable": {
                    "value": "stage_2",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipe2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('poly', PolynomialFeatures()), ('ridge', Ridge())])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(poly__degree=range(1, 4), ridge__alpha=np.logspace(-5, 5, 11))",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PolynomialFeatures_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PolynomialFeatures_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/baselines/agmm/gmm_game_graph.py": {
        "tensorflow": {
            "scalar_mul_11": {
                "scalar": {
                    "value": "1.0 / normalizer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scalar_mul(tf.pow(tf.abs(precision), dimension), tf.exp(-tf.scalar_mul(tf.pow(precision, 2) / 2.0, tf.reduce_sum(tf.pow(x, 2), axis=1, keepdims=True)))) / math.pow(2.0 * math.pi, dimension / 2.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_mul_17": {
                "scalar": {
                    "value": "1.0 / normalizer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.equal(tf.cast(leaf[:, tree_id], dtype=tf.int32), tree_leaf_id), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "poly_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[poly_x, tf.pow(x, d)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_55": {
                "variable": {
                    "value": "cur_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(cur_out, weight_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([layers[l_id]], 0, 0.1), name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_outputs], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_10": {
                "scalar": {
                    "value": "tf.pow(precision, 2) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.pow(x, 2), axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_17": {
                "x": {
                    "value": "leaf[:, tree_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_41": {
                "variable": {
                    "value": "cur_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(cur_out, weight_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([layers[l_id]], 0, 0.1), name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_outputs], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_42": {
                "variable": {
                    "value": "cur_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.dropout(cur_out, keep_prob=drop_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "OutLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "weight_l",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([layers[-1], n_outputs], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "bias_l",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_outputs], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "self._translation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_instruments, min(n_instruments, num_reduced_dims)], 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_105": {
                "variable": {
                    "value": "self._normalized_translation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._translation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_max_241": {
                "variable": {
                    "value": "self._max_violation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.pow(m, 2) for m in self._moment_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "name": {
                    "value": "Max_Violation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_10": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_10": {
                "x": {
                    "value": "-tf.scalar_mul(tf.pow(precision, 2) / 2.0, tf.reduce_sum(tf.pow(x, 2), axis=1, keepdims=True))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_17": {
                "x": {
                    "value": "tf.cast(leaf[:, tree_id], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tree_leaf_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(leaf_id[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_32": {
                "name": {
                    "value": "'Layer{}'.format(l_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "weight_l",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([layers[l_id - 1], layers[l_id]], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "bias_l",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([layers[l_id]], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_48": {
                "name": {
                    "value": "Weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_51": {
                "name": {
                    "value": "Weight Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([layers[l_id - 1], layers[l_id]], 0, 0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([layers[-1], n_outputs], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_54": {
                "name": {
                    "value": "Bias Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "bias_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([layers[l_id]], 0, 0.1), name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_outputs], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_55": {
                "a": {
                    "value": "cur_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poly_x",
                            "variable"
                        ],
                        [
                            "tf.add(tf.matmul(cur_out, weight_l), bias_l)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.dropout(cur_out, keep_prob=drop_prob))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(cur_out, weight_l), bias_l)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([layers[l_id - 1], layers[l_id]], 0, 0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([layers[-1], n_outputs], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "Modeler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_96": {
                "name": {
                    "value": "'Critic_{}'.format(id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_102": {
                "name": {
                    "value": "Precision",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "'Critic_{}'.format(id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_204": {
                "learning_rate": {
                    "value": "self._learning_rate_modeler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_208": {
                "name": {
                    "value": "MetaCritic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_229": {
                "name": {
                    "value": "Moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_240": {
                "name": {
                    "value": "MaxViolation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_243": {
                "name": {
                    "value": "MaxViolation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._max_violation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_247": {
                "name": {
                    "value": "ModelerGradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_275": {
                "name": {
                    "value": "CriticsGradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_303": {
                "name": {
                    "value": "MetaCriticHedge",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_307": {
                "variable": {
                    "value": "l1_norm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self._critic_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_10": {
                "x": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_26": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(2, degree + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "Weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_36": {
                "name": {
                    "value": "Weight Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([layers[l_id - 1], layers[l_id]], 0, 0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([layers[-1], n_outputs], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_40": {
                "name": {
                    "value": "Bias Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "bias_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([layers[l_id]], 0, 0.1), name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_outputs], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_41": {
                "a": {
                    "value": "cur_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poly_x",
                            "variable"
                        ],
                        [
                            "tf.add(tf.matmul(cur_out, weight_l), bias_l)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.dropout(cur_out, keep_prob=drop_prob))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(cur_out, weight_l), bias_l)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([layers[l_id - 1], layers[l_id]], 0, 0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([layers[-1], n_outputs], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_42": {
                "x": {
                    "value": "cur_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poly_x",
                            "variable"
                        ],
                        [
                            "tf.add(tf.matmul(cur_out, weight_l), bias_l)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.dropout(cur_out, keep_prob=drop_prob))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(cur_out, weight_l), bias_l)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_71": {
                "name": {
                    "value": "ModelerModelVariables",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_to_collection_73": {
                "name": {
                    "value": "ModelerModelVariables",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._biases",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_98": {
                "initial_value": {
                    "value": "tf.random_normal([n_instruments])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "initial_value": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "jitter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_100": {
                "initial_value": {
                    "value": "tf.random_normal([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "initial_value": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "jitter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_103": {
                "name": {
                    "value": "'Center_{}'.format(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self._center[d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "a": {
                    "value": "Z - self._center",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self._normalized_translation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_220": {
                "initial_value": {
                    "value": "1.0 / len(self._critic_list)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'Critic_{}_Weight'.format(c_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_222": {
                "name": {
                    "value": "CriticWeights",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cw",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_230": {
                "input_tensor": {
                    "value": "tf.multiply(self._Y - self._modeler.output, critic.output, name='Moment_{}'.format(c_id))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'Avg_Moment_{}'.format(c_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_233": {
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'PrevMoment_{}'.format(c_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_235": {
                "ref": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_304": {
                "ref": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.scalar_mul(w, tf.exp(self._eta_hedge * tf.clip_by_value(tf.pow(m, 2), 0, self._loss_clip_hedge)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_306": {
                "control_inputs": {
                    "value": "update_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(w, tf.scalar_mul(w, tf.exp(self._eta_hedge * tf.clip_by_value(tf.pow(m, 2), 0, self._loss_clip_hedge)))) for (w, m) in zip(self._critic_weights, self._moment_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "multiply_230": {
                "x": {
                    "value": "self._Y - self._modeler.output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "critic.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'Moment_{}'.format(c_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_242": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_280": {
                "name": {
                    "value": "'Critics{}Gradient'.format(it)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_289": {
                "variable": {
                    "value": "clip_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "critic.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_value(critic.precision, critic.precision_l, critic.precision_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_291": {
                "variable": {
                    "value": "clip_center",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "critic.center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_value(critic.center, critic.center_l, critic.center_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_293": {
                "variable": {
                    "value": "clip_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "critic.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_value(critic.weights, -10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_304": {
                "scalar": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.exp(self._eta_hedge * tf.clip_by_value(tf.pow(m, 2), 0, self._loss_clip_hedge))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_308": {
                "control_inputs": {
                    "value": "[l1_norm_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_10": {
                "input_tensor": {
                    "value": "tf.pow(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_219": {
                "learning_rate": {
                    "value": "self._learning_rate_critics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_262": {
                "scalar": {
                    "value": "2 * mw * pm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_267": {
                "x": {
                    "value": "g_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_288": {
                "control_inputs": {
                    "value": "[apply_grads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_304": {
                "x": {
                    "value": "self._eta_hedge * tf.clip_by_value(tf.pow(m, 2), 0, self._loss_clip_hedge)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_309": {
                "ref": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.divide(w, l1_norm_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_211": {
                "learning_rate": {
                    "value": "self._learning_rate_critics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_215": {
                "learning_rate": {
                    "value": "self._learning_rate_critics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_289": {
                "t": {
                    "value": "critic.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "critic.precision_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "critic.precision_u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_291": {
                "t": {
                    "value": "critic.center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "critic.center_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "critic.center_u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_293": {
                "t": {
                    "value": "critic.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_309": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "l1_norm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(self._critic_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_285": {
                "scalar": {
                    "value": "tf.reduce_mean(critic.output - self._critic_list[it - 1].output)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "g_diff",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_304": {
                "t": {
                    "value": "tf.pow(m, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._loss_clip_hedge",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_304": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "input_tensor": {
                    "value": "critic.output - self._critic_list[it - 1].output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/baselines/agmm/utils.py": {
        "tensorflow": {
            "get_checkpoint_state_34": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "HistogramProto_68": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_79": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}_{}'.format(tag, d), histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_49": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/run_mnist_experiments_baselines.py": {
        "tensorflow": {
            "set_random_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "DeepGMM/run_zoo_experiments_baselines.py": {
        "tensorflow": {
            "set_random_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "DeepIV/deepiv/custom_gradients.py": {
        "tensorflow": {
            "gradients_11": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.mean(K.reshape(model.outputs[0], (batch_size, n_samples, 2)), axis=1)",
                            "Call"
                        ],
                        [
                            "y_predicted.reshape((n_examples, n_samples * 2)).mean(axis=1)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "wrt",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "eval_points",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "DeepIV/deepiv/samplers.py": {
        "tensorflow": {
            "one_hot_35": {
                "indices": {
                    "value": "tf.squeeze(tf.multinomial(K.log(logits), num_samples=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "int(logits.shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "input": {
                    "value": "tf.multinomial(K.log(logits), num_samples=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_35": {
                "logits": {
                    "value": "K.log(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepIV/experiments/demand_savedata.py": {
        "tensorflow": {}
    },
    "DeepIV/experiments/demand_simulation.py": {
        "tensorflow": {}
    },
    "DeepIV/experiments/generate_deepiv_mses.py": {
        "tensorflow": {}
    },
    "DeepGMM/demand_experiment.py": {
        "torch": {
            "device_39": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rep",
                            "variable"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/game_objectives/simple_moment_objective.py": {
        "torch": {
            "squeeze_12": {
                "variable": {
                    "value": "g_of_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_13": {
                "variable": {
                    "value": "f_of_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_14": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_32": {
                "variable": {
                    "value": "f_of_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_62": {
                "variable": {
                    "value": "g_of_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "f_of_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_66": {
                "variable": {
                    "value": "regularizer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_of_z - f_of_z.mean()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(5.0).double().to(moment.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "g_of_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "f_of_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_81": {
                "variable": {
                    "value": "regularizer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_of_z.abs() - 0.3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_81": {
                "variable": {
                    "value": "regularizer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "g_of_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "f_of_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_31": {
                "input": {
                    "value": "g(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "input": {
                    "value": "f_of_z.abs() - 0.3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_43": {
                "input": {
                    "value": "(epsilon ** 2).mean() ** 0.5 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_84": {
                "input": {
                    "value": "((y - g_of_x) ** 2).mean() ** 0.5 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/generate_mnist_data.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "DeepGMM/learning/learning_dev_f.py": {
        "torch": {
            "cat_233": {
                "variable": {
                    "value": "g_of_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g_of_x, g_of_x_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "f_of_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f_of_z, f_of_z_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_129": {
                "tensors": {
                    "value": "g_of_x_dev_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_129": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_131": {
                "tensors": {
                    "value": "g_of_x_train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_131": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/methods/demand_model_selection_method.py": {
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/methods/mnist_x_model_selection_method.py": {
        "torch": {}
    },
    "DeepGMM/methods/mnist_xz_model_selection_method.py": {
        "torch": {}
    },
    "DeepGMM/methods/mnist_z_model_selection_method.py": {
        "torch": {}
    },
    "DeepGMM/methods/toy_model_selection_method.py": {
        "torch": {
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/model_selection/f_history_model_selection_v1.py": {
        "torch": {}
    },
    "DeepGMM/model_selection/f_history_model_selection_v2.py": {
        "torch": {}
    },
    "DeepGMM/model_selection/f_history_model_selection_v3.py": {
        "torch": {
            "stack_60": {
                "variable": {
                    "value": "e_dev_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "e_dev_tilde_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.stack(e_dev_list).mean(0) for e_dev_list in e_dev_collections]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "mean_60": {
                "variable": {
                    "value": "e_dev_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_58": {
                "tensors": {
                    "value": "e_dev_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_dev_collections[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_58": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/model_selection/learning_eval.py": {
        "torch": {
            "cat_110": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, out_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "mean_g_of_x_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "g_of_x_dev_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_57": {
                "variable": {
                    "value": "mean_g_of_x_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/model_selection/learning_eval_nostop.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, out_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/model_selection/simple_model_eval.py": {
        "torch": {
            "cat_70": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, out_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/models/cnn_models.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * w * c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_84": {
                "variable": {
                    "value": "self.final_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_c_sizes[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_132": {
                "variable": {
                    "value": "self.final_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * w * c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.linear_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_154": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_1(data.view(-1, self.linear_input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_155": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_2(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * w * self.channel_sizes[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.linear_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_208": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_215": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cnn(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_217": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.linear_1(data.view(-1, self.linear_input_dim)))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_221": {
                "variable": {
                    "value": "leaky_class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_2(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "variable": {
                    "value": "class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_2(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "final_cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_c_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "final_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_c_sizes[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_218": {
                "input": {
                    "value": "self.linear_1(data.view(-1, self.linear_input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_c",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MaxPool2d_72": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MaxPool2d_126": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channel_sizes[i - 1] if i > 0 else c",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channel_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ],
                        [
                            "(k - 1) // 2 + ep",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MaxPool2d_194": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_195": {
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/models/mlp_model.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MLPModel(input_dim, layer_widths, activation=activation, last_layer=last_layer, num_out=1) for _ in range(num_models)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.models[i](data) for i in range(self.num_models)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_widths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "layer_widths[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "w_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_widths[i - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "w_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_widths[i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "DeepGMM/optimizers/oadam.py": {
        "torch": {
            "zeros_like_72": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "state[previous_update]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "DeepGMM/run_mnist_experiments_ours.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/run_zoo_experiments_ours.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepGMM/scenarios/mnist_scenarios.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('datasets', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "60000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_40": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('datasets', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}