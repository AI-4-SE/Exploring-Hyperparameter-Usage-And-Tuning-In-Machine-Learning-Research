{
    "data/deep_lesion_dataset.py": {
        "torch": {}
    },
    "model/base/vgg16.py": {
        "torch": {
            "Sequential_74": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/bbox_proposal_layer.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_anchors.reshape((1, A, 4)) + shifts.reshape((1, K, 4)).transpose((1, 0, 2))",
                            "BinOp"
                        ],
                        [
                            "anchors.reshape((K * A, 4))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_88": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(keep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "input": {
                    "value": "out_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/bbox_target_layer.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_20": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "self._inds_inside",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inds_inside",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where((all_anchors[:, 0] >= -allowed_border) & (all_anchors[:, 1] >= -allowed_border) & (all_anchors[:, 2] < im_info[1] + allowed_border) & (all_anchors[:, 3] < im_info[0] + allowed_border))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_anchors[inds_inside, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_90": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(self._anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_91": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(self._anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_99": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "sum_fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "sum_bg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_119": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_131": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/bbox_transform.py": {
        "torch": {
            "log_95": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_96": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_117": {
                "input": {
                    "value": "dw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deltas[:, 2::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_118": {
                "input": {
                    "value": "dh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deltas[:, 3::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_29": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_30": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_33": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_34": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_68": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_69": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_72": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/ellipse_proposal_layer.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_anchors.reshape((1, A, 4)) + shifts.reshape((1, K, 4)).transpose((1, 0, 2))",
                            "BinOp"
                        ],
                        [
                            "anchors.reshape((K * A, 4))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_92": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(keep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "input": {
                    "value": "out_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/ellipse_target_layer.py": {
        "torch": {
            "Tensor_18": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_21": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "self._inds_inside",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inds_inside",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where((all_anchors[:, 0] >= -allowed_border) & (all_anchors[:, 1] >= -allowed_border) & (all_anchors[:, 2] < im_info[1] + allowed_border) & (all_anchors[:, 3] < im_info[0] + allowed_border))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_anchors[inds_inside, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_91": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(self._anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_92": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(self._anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_100": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "sum_fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "sum_bg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_122": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_134": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/ellipse_transform.py": {
        "torch": {
            "stack_11": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ellipses[:, 0], ellipses[:, 2], ellipses[:, 4], ellipses[:, 6])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_13": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ellipses[:, 1], ellipses[:, 3], ellipses[:, 5], ellipses[:, 7])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_15": {
                "variable": {
                    "value": "(x_min, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((ellipses[:, 0], ellipses[:, 2], ellipses[:, 4], ellipses[:, 6]), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_16": {
                "variable": {
                    "value": "(x_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((ellipses[:, 0], ellipses[:, 2], ellipses[:, 4], ellipses[:, 6]), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_17": {
                "variable": {
                    "value": "(y_min, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((ellipses[:, 1], ellipses[:, 3], ellipses[:, 5], ellipses[:, 7]), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_18": {
                "variable": {
                    "value": "(y_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((ellipses[:, 1], ellipses[:, 3], ellipses[:, 5], ellipses[:, 7]), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_20": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "variable": {
                    "value": "longs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "longs_x ** 2 + longs_y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_49": {
                "variable": {
                    "value": "shorts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shorts_x ** 2 + shorts_y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_53": {
                "variable": {
                    "value": "sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ellipses[:, 2] - ellipses[:, 0]) * (ellipses[:, 3] - ellipses[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_56": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sign * longs_y / longs_x",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 4::5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ellipse_mask(qr_ellipses, im_info)",
                            "Call"
                        ],
                        [
                            "qr_mask.view(-1, N).transpose(1, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ellipse_mask(gt_ellipses, im_info)",
                            "Call"
                        ],
                        [
                            "gt_mask.view(-1, K).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_117": {
                "variable": {
                    "value": "gt_longs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_longs_x ** 2 + gt_longs_y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_120": {
                "variable": {
                    "value": "gt_shorts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_shorts_x ** 2 + gt_shorts_y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_126": {
                "variable": {
                    "value": "targets_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_longs / ex_sigmas",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_127": {
                "variable": {
                    "value": "targets_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_shorts / ex_sigmas",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_129": {
                "variable": {
                    "value": "targets_sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_rois[:, 2] - gt_rois[:, 0]) * (gt_rois[:, 3] - gt_rois[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dl, targets_ds, targets_tan)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atan_149": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sign * longs_y / longs_x",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 4::5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sign_150": {
                "variable": {
                    "value": "sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_157": {
                "variable": {
                    "value": "pred_l_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_l * torch.cos(theta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_158": {
                "variable": {
                    "value": "pred_l_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_l * torch.sin(theta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_159": {
                "variable": {
                    "value": "pred_s_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_s * torch.sin(theta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_160": {
                "variable": {
                    "value": "pred_s_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_s * torch.cos(theta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_162": {
                "variable": {
                    "value": "pred_elipses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_50": {
                "input": {
                    "value": "ellipses[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_51": {
                "input": {
                    "value": "ellipses[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "input": {
                    "value": "1 - qr_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - gt_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_121": {
                "input": {
                    "value": "gt_rois[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_122": {
                "input": {
                    "value": "gt_rois[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_155": {
                "input": {
                    "value": "dl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deltas[:, 2::5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_156": {
                "input": {
                    "value": "ds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deltas[:, 3::5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_44": {
                "input": {
                    "value": "ellipses[:, 2] - ellipses[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_45": {
                "input": {
                    "value": "ellipses[:, 3] - ellipses[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_47": {
                "input": {
                    "value": "ellipses[:, 6] - ellipses[:, 4]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_48": {
                "input": {
                    "value": "ellipses[:, 7] - ellipses[:, 5]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_115": {
                "input": {
                    "value": "gt_rois[:, 2] - gt_rois[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_116": {
                "input": {
                    "value": "gt_rois[:, 3] - gt_rois[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_118": {
                "input": {
                    "value": "gt_rois[:, 6] - gt_rois[:, 4]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "gt_rois[:, 7] - gt_rois[:, 5]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_157": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_158": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_159": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_160": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_73": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_73": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_74": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_74": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.atan(tan)",
                            "Call"
                        ],
                        [
                            "theta.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.atan(tan)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/functional.py": {
        "torch": {
            "mul_27": {
                "variable": {
                    "value": "area",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 - x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_85": {
                "variable": {
                    "value": "out_cls_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_cls.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_91": {
                "variable": {
                    "value": "out_cls_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_cls.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "neg_idcs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(0).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_101": {
                "variable": {
                    "value": "out_ellipse_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ellipse.view(-1, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_102": {
                "variable": {
                    "value": "ellipse_targets_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ellipse_targets.view(-1, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_52": {
                "variable": {
                    "value": "xx1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_53": {
                "variable": {
                    "value": "yy1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "y1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_54": {
                "variable": {
                    "value": "xx2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "x2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_55": {
                "variable": {
                    "value": "yy2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "y2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_61": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(w, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_65": {
                "variable": {
                    "value": "rem_areas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(x2 - x1, y2 - y1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[1:]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_47": {
                "input": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[1:]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_48": {
                "input": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[1:]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_49": {
                "input": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[1:]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_50": {
                "input": {
                    "value": "y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[1:]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_86": {
                "input": {
                    "value": "out_cls_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(out_cls.view(-1, 2), 0, pos_idcs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_92": {
                "input": {
                    "value": "out_cls_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(out_cls.view(-1, 2), 0, neg_idcs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_110": {
                "input": {
                    "value": "out_angle - targets_angle",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "atan_106": {
                "input": {
                    "value": "out_tan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_ellipse_keep[:, 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "atan_108": {
                "input": {
                    "value": "targets_tan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ellipse_targets_keep[:, 4]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "model/gpn.py": {
        "torch": {
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv_gpn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu_gpn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv_ellipse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/loss_layer.py": {
        "torch": {
            "CrossEntropyLoss_13": {
                "variable": {
                    "value": "self.cls_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_17": {
                "variable": {
                    "value": "out_cls_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_cls.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "label_idcs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.view(-1).ne(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_18": {
                "variable": {
                    "value": "labels_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "label_idcs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.view(-1).ne(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SmoothL1Loss_30": {
                "variable": {
                    "value": "self.bbox_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_34": {
                "variable": {
                    "value": "out_bbox_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_bbox.view(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_36": {
                "variable": {
                    "value": "bbox_targets_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_targets.view(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SmoothL1Loss_48": {
                "variable": {
                    "value": "self.ellipse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_55": {
                "variable": {
                    "value": "out_ellipse_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ellipse.view(-1, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_57": {
                "variable": {
                    "value": "ellipse_targets_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ellipse_targets.view(-1, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_116": {
                "variable": {
                    "value": "out_ellipse_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ellipse.view(-1, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_118": {
                "variable": {
                    "value": "ellipse_targets_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ellipse_targets.view(-1, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_120": {
                "variable": {
                    "value": "anchors_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors.view(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_idcs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ],
                        [
                            "labels.view(-1).eq(1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan_128": {
                "variable": {
                    "value": "theta_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ellipse_keep[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan_136": {
                "variable": {
                    "value": "theta_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ellipse_targets_keep[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "ndarray": {
                    "value": "anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "base_anchors.reshape((1, A, 4)) + shifts.reshape((1, K, 4)).transpose((1, 0, 2))",
                            "BinOp"
                        ],
                        [
                            "anchors.reshape((K * A, 4))",
                            "Call"
                        ],
                        [
                            "self._anchors.repeat(batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_129": {
                "input": {
                    "value": "dl_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_ellipse_keep[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_130": {
                "input": {
                    "value": "ds_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_ellipse_keep[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_145": {
                "input": {
                    "value": "dtheta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "theta_o - theta_t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_145": {
                "input": {
                    "value": "ds_t - dl_o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_144": {
                "input": {
                    "value": "dtheta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "theta_o - theta_t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_144": {
                "input": {
                    "value": "dl_t - ds_o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_142": {
                "input": {
                    "value": "dtheta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "theta_o - theta_t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_142": {
                "input": {
                    "value": "dl_t - dl_o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_143": {
                "input": {
                    "value": "dtheta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "theta_o - theta_t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_143": {
                "input": {
                    "value": "ds_t - ds_o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_147": {
                "input": {
                    "value": "theta_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.atan(out_ellipse_keep[:, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_147": {
                "input": {
                    "value": "theta_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.atan(out_ellipse_keep[:, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_148": {
                "input": {
                    "value": "theta_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.atan(out_ellipse_keep[:, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_148": {
                "input": {
                    "value": "theta_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.atan(out_ellipse_keep[:, 4])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}