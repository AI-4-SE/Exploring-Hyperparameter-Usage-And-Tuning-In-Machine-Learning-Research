{
    "Scripts/COVID-19 Classifier/compute_cam_from_data_frame.py": {
        "sklearn": {
            "precision_score_167": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_Y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_X)",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=-1)",
                            "Call"
                        ],
                        [
                            "model.predict(image)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "recall_score_168": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_Y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_X)",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=-1)",
                            "Call"
                        ],
                        [
                            "model.predict(image)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_169": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_Y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_X)",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=-1)",
                            "Call"
                        ],
                        [
                            "model.predict(image)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "confusion_matrix_171": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_Y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_X)",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=-1)",
                            "Call"
                        ],
                        [
                            "model.predict(image)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ImageDataGenerator_145": {
                "variable": {
                    "value": "load_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "preprocess_input_157": {
                "variable": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_input(test_X)",
                            "Call"
                        ]
                    ]
                }
            },
            "model_from_json_27": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "json_string": {
                    "value": "f.read()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_66": {
                "variable": {
                    "value": "gradModel",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.model.inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[self.model.get_layer(self.layerName).output, self.model.output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "castConvOutputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "convOutputs > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_85": {
                "variable": {
                    "value": "castGrads",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grads > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "guidedGrads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "castConvOutputs * castGrads * grads",
                            "BinOp"
                        ],
                        [
                            "guidedGrads[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(weights, convOutputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_X[index][np.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_98": {
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(guidedGrads, axis=(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "convOutputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convOutputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "Scripts/COVID-19 Classifier/covid_dense_softmax_0.py": {
        "sklearn": {},
        "tensorflow": {
            "ImageDataGenerator_519": {
                "variable": {
                    "value": "load_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ImageDataGenerator_551": {
                "variable": {
                    "value": "train_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "samplewise_center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "samplewise_std_normalization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "brightness_range": {
                    "value": "[0.9, 1.1]",
                    "type": "List",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "vertical_flip": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_563": {
                "variable": {
                    "value": "valid_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "samplewise_center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "samplewise_std_normalization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "brightness_range": {
                    "value": "[0.95, 1.05]",
                    "type": "List",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "vertical_flip": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "preprocessing_function": {
                    "value": "preprocess_input",
                    "type": "variable",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_576": {
                "variable": {
                    "value": "test_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "preprocessing_function": {
                    "value": "preprocess_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Model_613": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "base_net.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_net.get_layer('pool4_relu').output",
                            "Attribute"
                        ],
                        [
                            "GlobalAvgPool2D(name='global_avg_pooling')(x)",
                            "Call"
                        ],
                        [
                            "Dense(val_Y.shape[1], activation='softmax', name='prediction_layer')(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_631": {
                "variable": {
                    "value": "lr_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'val_categorical_crossentropy'",
                            "Constant"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_634": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}_weights.best.hdf5'.format(model_name)",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'val_categorical_crossentropy'",
                            "Constant"
                        ]
                    ]
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "EarlyStopping_637": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'val_categorical_crossentropy'",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "preprocess_input_118": {
                "variable": {
                    "value": "batch_crops",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_x.shape[0], target_size[0], target_size[1], 3))",
                            "Call"
                        ],
                        [
                            "preprocess_input(batch_crops)",
                            "Call"
                        ]
                    ]
                }
            },
            "model_from_json_124": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "json_string": {
                    "value": "f.read()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_148": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, K.epsilon(), 1 - K.epsilon())",
                            "Call"
                        ],
                        [
                            "K.clip(y_pred, K.epsilon(), 1 - K.epsilon())",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "K.epsilon()",
                    "type": "Call",
                    "possible_values": []
                },
                "a_max": {
                    "value": "1 - K.epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_173": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, K.epsilon(), 1 - K.epsilon())",
                            "Call"
                        ],
                        [
                            "K.clip(y_pred, K.epsilon(), 1 - K.epsilon())",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "K.epsilon()",
                    "type": "Call",
                    "possible_values": []
                },
                "a_max": {
                    "value": "1 - K.epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_612": {
                "units": {
                    "value": "val_Y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_616": {
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "epsilon_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_151": {
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_soft * K.log(y_pred) * weights + (1 - y_true_soft) * K.log(1 - y_pred)",
                            "BinOp"
                        ],
                        [
                            "-K.mean(loss, -1)",
                            "UnaryOp"
                        ],
                        [
                            "y_true_soft * K.log(y_pred) + (1 - y_true_soft) * K.log(1 - y_pred)",
                            "BinOp"
                        ],
                        [
                            "-K.mean(loss * weights, -1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "epsilon_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_176": {
                "a": {
                    "value": "loss * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_150": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, K.epsilon(), 1 - K.epsilon())",
                            "Call"
                        ],
                        [
                            "K.clip(y_pred, K.epsilon(), 1 - K.epsilon())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_175": {
                "x": {
                    "value": "1 - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Scripts/COVID-19 Classifier/pneumonia-covid_dense_softmax_0.py": {
        "sklearn": {},
        "tensorflow": {
            "ImageDataGenerator_503": {
                "variable": {
                    "value": "load_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ImageDataGenerator_535": {
                "variable": {
                    "value": "train_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "samplewise_center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "samplewise_std_normalization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "brightness_range": {
                    "value": "[0.9, 1.1]",
                    "type": "List",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "vertical_flip": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_547": {
                "variable": {
                    "value": "valid_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "samplewise_center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "samplewise_std_normalization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "brightness_range": {
                    "value": "[0.95, 1.05]",
                    "type": "List",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "vertical_flip": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "preprocessing_function": {
                    "value": "preprocess_input",
                    "type": "variable",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_560": {
                "variable": {
                    "value": "test_datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "preprocessing_function": {
                    "value": "preprocess_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Model_595": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "base_net.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_net.get_layer('pool4_relu').output",
                            "Attribute"
                        ],
                        [
                            "GlobalAvgPool2D(name='global_avg_pooling')(x)",
                            "Call"
                        ],
                        [
                            "Dense(val_Y.shape[1], activation='softmax', name='prediction_layer')(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_614": {
                "variable": {
                    "value": "lr_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'val_loss'",
                            "Constant"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_617": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}_weights.best.hdf5'.format(model_name)",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'val_loss'",
                            "Constant"
                        ]
                    ]
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "EarlyStopping_620": {
                "variable": {
                    "value": "early",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'val_loss'",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "preprocess_input_118": {
                "variable": {
                    "value": "batch_crops",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_x.shape[0], target_size[0], target_size[1], 3))",
                            "Call"
                        ],
                        [
                            "preprocess_input(batch_crops)",
                            "Call"
                        ]
                    ]
                }
            },
            "model_from_json_124": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "json_string": {
                    "value": "f.read()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_148": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, K.epsilon(), 1 - K.epsilon())",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "K.epsilon()",
                    "type": "Call",
                    "possible_values": []
                },
                "a_max": {
                    "value": "1 - K.epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_594": {
                "units": {
                    "value": "val_Y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_598": {
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "epsilon_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_151": {
                "a": {
                    "value": "loss * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_150": {
                "x": {
                    "value": "1 - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Scripts/X-Ray Filter/classificadorimagensxray_generator_2classes_v2.py": {
        "sklearn": {
            "OneHotEncoder_79": {
                "variable": {
                    "value": "self.ohe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_311": {
                "variable": {
                    "value": "(self.X_train, self.X_test, self.y_train, self.y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.x_total",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.y_total",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}