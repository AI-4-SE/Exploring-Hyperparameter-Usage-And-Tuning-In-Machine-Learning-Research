{
    "demo/inference.py": {
        "torch": {
            "tensor_32": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(list(map(lambda x: cv2.resize(x, (224, 224), interpolation=cv2.INTER_AREA), crops)))",
                            "Call"
                        ],
                        [
                            "(batch / 255 - np.array([0.485, 0.456, 0.406])[None, None, None, :]) / np.array([0.229, 0.224, 0.225])[None, None, None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(batch, dtype=torch.float).to(device=next(model.encoder.parameters()).device)",
                            "Call"
                        ],
                        [
                            "batch.transpose(2, 3).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_11": {
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_36": {
                "tensor": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(list(map(lambda x: cv2.resize(x, (224, 224), interpolation=cv2.INTER_AREA), crops)))",
                            "Call"
                        ],
                        [
                            "(batch / 255 - np.array([0.485, 0.456, 0.406])[None, None, None, :]) / np.array([0.229, 0.224, 0.225])[None, None, None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(batch, dtype=torch.float).to(device=next(model.encoder.parameters()).device)",
                            "Call"
                        ],
                        [
                            "batch.transpose(2, 3).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "70",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_11": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {
            "tensor_13": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(path).resize((224, 224), resample=Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "np.asarray(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "I / 255",
                            "BinOp"
                        ],
                        [
                            "I.transpose(1, 2).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}