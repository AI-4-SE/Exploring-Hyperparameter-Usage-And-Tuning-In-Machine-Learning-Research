{
    "BM25.py": {
        "sklearn": {
            "cosine_similarity_96": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vecs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query_matrix[np.array([query_vocab.index(word) for word in query_words]), :]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "doc_vecs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((len(doc_words), embedding_matrix.shape[1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "BM25_task2.py": {
        "sklearn": {
            "cosine_similarity_85": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vecs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query_matrix[np.array([query_vocab.index(word) for word in query_words]), :]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "doc_vecs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((len(doc_words), embedding_matrix.shape[1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Embsum.py": {
        "sklearn": {
            "MultiLabelBinarizer_115": {
                "variable": {
                    "value": "mlb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "SVM_task1.py": {
        "sklearn": {
            "accuracy_score_75": {
                "variable": {
                    "value": "acc_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_val_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clf.predict(docVectors_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_69": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_list",
                            "Name"
                        ]
                    ]
                },
                "probability": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_319": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_310": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {}
    },
    "SVM_task2.py": {
        "sklearn": {
            "accuracy_score_80": {
                "variable": {
                    "value": "acc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "validation_labels",
                            "Name"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_test_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_74": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_list",
                            "Name"
                        ]
                    ]
                },
                "probability": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "convert_to_text_task1.py": {
        "sklearn": {
            "shuffle_102": {
                "variable": {
                    "value": "(train_docs, train_titles, train_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_docs",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_titles",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "train_labels",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_103": {
                "variable": {
                    "value": "(val_docs, val_titles, val_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "val_docs",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "val_titles",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "val_labels",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_76": {
                "variable": {
                    "value": "(docs_train, docs_val, labels_train, labels_val, titles_train, titles_val, ids_train, ids_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "total_docs[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "total_labels[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "total_titles[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "total_ids[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "convert_to_text_task2_test_set.py": {
        "sklearn": {}
    },
    "convert_to_text_task2_train_dev_set.py": {
        "sklearn": {
            "train_test_split_124": {
                "variable": {
                    "value": "(docs_train, docs_val, labels_train, labels_val, titles_train, titles_val, ids_train, ids_val, rc_train, rc_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "total_docs[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "total_labels[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "total_titles[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "total_ids[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_4": {
                    "value": "total_relevant_context[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_task2.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "model/evaluate.py": {
        "sklearn": {
            "accuracy_score_184": {
                "variable": {
                    "value": "acc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones(train_labels.shape[0], dtype=np.float32) * test_label",
                            "BinOp"
                        ],
                        [
                            "np.asarray(test_label)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_217": {
                "variable": {
                    "value": "acc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones(train_labels.shape[0], dtype=np.float32) * test_label",
                            "BinOp"
                        ],
                        [
                            "np.asarray(test_label)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiLabelBinarizer_264": {
                "variable": {
                    "value": "mlb",
                    "type": "Variable",
                    "possible_values": []
                },
                "classes": {
                    "value": "[str(i) for i in range(num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cosine_similarity_284": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "corpus_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "query_vectors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogisticRegression_176": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_list",
                            "Name"
                        ],
                        [
                            "c_list",
                            "Name"
                        ]
                    ]
                }
            },
            "OneVsRestClassifier_209": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LogisticRegression(C=c)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SVC_179": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_list",
                            "Name"
                        ],
                        [
                            "c_list",
                            "Name"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_185": {
                "y_true": {
                    "value": "test_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones(train_labels.shape[0], dtype=np.float32) * test_label",
                            "BinOp"
                        ],
                        [
                            "np.asarray(test_label)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_212": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "SVC(C=c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_218": {
                "y_true": {
                    "value": "test_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones(train_labels.shape[0], dtype=np.float32) * test_label",
                            "BinOp"
                        ],
                        [
                            "np.asarray(test_label)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_test_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(docVectors_test)",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_270": {
                "X": {
                    "value": "corpus_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "query_vectors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogisticRegression_209": {
                "C": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_list",
                            "Name"
                        ],
                        [
                            "c_list",
                            "Name"
                        ]
                    ]
                }
            },
            "SVC_212": {
                "C": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_list",
                            "Name"
                        ],
                        [
                            "c_list",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess_data.py": {
        "sklearn": {
            "CountVectorizer_80": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_features": {
                    "value": "max_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "Constant",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_146": {
                "variable": {
                    "value": "(train_docs, train_docs_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_docs",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_docs_labels",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_147": {
                "variable": {
                    "value": "(val_docs, val_docs_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "val_docs",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "val_docs_labels",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_41": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "relevance_score_task2.py": {
        "sklearn": {
            "CountVectorizer_187": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "tokens",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[int(query_words_list.index(word)) for word in label.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[int(query_words_list.index(word)) for word in title.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[docnade_vocab_large.index(word.strip()) for word in sent.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[docnade_vocab_large.index(word.strip()) for word in sent.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[docnade_vocab_large.index(word.strip()) for word in sent.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[docnade_vocab_large.index(word.strip()) for word in sent.strip().split()]",
                            "ListComp"
                        ]
                    ]
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "Constant",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_507": {
                "variable": {
                    "value": "similarity_scores_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "doc_sents_vecs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate([np.array(doc_sents_vecs), label_doc_vecs_bigram], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.array(doc_sents_vecs), title_doc_vecs_bigram], axis=1)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(doc), len(total_vocab)), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(doc_sents_vecs, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "query_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EmbSum",
                            "Name"
                        ],
                        [
                            "EmbSum",
                            "Name"
                        ],
                        [
                            "np.concatenate([np.expand_dims(query_vec, axis=0), label_vecs_bigram], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.expand_dims(query_vec, axis=0), title_vecs_bigram], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_530": {
                "variable": {
                    "value": "similarity_scores_title",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "doc_sents_vecs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate([np.array(doc_sents_vecs), label_doc_vecs_bigram], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.array(doc_sents_vecs), title_doc_vecs_bigram], axis=1)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(doc), len(total_vocab)), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(doc_sents_vecs, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "query_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EmbSum",
                            "Name"
                        ],
                        [
                            "EmbSum",
                            "Name"
                        ],
                        [
                            "np.concatenate([np.expand_dims(query_vec, axis=0), label_vecs_bigram], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.expand_dims(query_vec, axis=0), title_vecs_bigram], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_657": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "query_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "query_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_687": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_716": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "query_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "query_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_740": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_692": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_745": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_697": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "q_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "d_vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cosine_similarity_750": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "q_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "d_vec",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "separate_title_and_abstracts.py": {
        "sklearn": {
            "shuffle_154": {
                "variable": {
                    "value": "(train_docs, train_titles, train_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_docs",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_titles",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "train_labels",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_155": {
                "variable": {
                    "value": "(val_docs, val_titles, val_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "val_docs",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "val_titles",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "val_labels",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "split_data.py": {
        "sklearn": {
            "train_test_split_42": {
                "variable": {
                    "value": "(docs_train, docs_val, labels_train, labels_val, titles_train, titles_val, ids_train, ids_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "total_docs[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "total_labels[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "total_titles[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "total_ids[RDoC_name]",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "supervised_model_exp_task2.py": {
        "sklearn": {
            "CountVectorizer_210": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "tokens",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[int(query_words_list.index(word)) for word in query.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[docnade_vocab_large.index(word.strip()) for word in sent.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[int(query_words_list.index(word)) for word in query.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[docnade_vocab_large.index(word.strip()) for word in sent.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[int(query_words_list.index(word)) for word in query.strip().split()]",
                            "ListComp"
                        ],
                        [
                            "[docnade_vocab_large.index(word.strip()) for word in sent.strip().split()]",
                            "ListComp"
                        ]
                    ]
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "Constant",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_287": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(doc_sents_vecs).sum(axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "np.sum(query_vecs, axis=0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_320": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(doc_sents_vecs).sum(axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "np.sum(query_vecs, axis=0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_276": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_309": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_376": {
                "variable": {
                    "value": "input_x_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_doc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_377": {
                "variable": {
                    "value": "input_x_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_query",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_378": {
                "variable": {
                    "value": "input_x_doc_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_doc_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_379": {
                "variable": {
                    "value": "input_x_query_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_query_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "input_sim_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "input_sim_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_383": {
                "variable": {
                    "value": "input_sim_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "input_sim_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_384": {
                "variable": {
                    "value": "unsupervised_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "unsupervised_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_388": {
                "variable": {
                    "value": "input_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_431": {
                "variable": {
                    "value": "relevance_output_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(input_x_doc, W_relevance, bias_relevance)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relevance_output_doc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_432": {
                "variable": {
                    "value": "relevance_output_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(input_x_query, W_relevance, bias_relevance)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relevance_output_query",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_437": {
                "variable": {
                    "value": "relevance_output_doc_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(input_x_doc_2, W_title_relevance, bias_title_relevance)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relevance_output_doc_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_438": {
                "variable": {
                    "value": "relevance_output_query_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(input_x_query_2, W_title_relevance, bias_title_relevance)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relevance_output_query_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_squared_error_519": {
                "variable": {
                    "value": "relevance_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "input_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=None, name='input_y')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "relevance_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "relevance_output_1",
                            "Name"
                        ],
                        [
                            "tf.tensordot(relevance_output_concat, W2_relevance, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_522": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_523": {
                "variable": {
                    "value": "relevance_trainable_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "relevance_variables",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_387": {
                "variable": {
                    "value": "input_x_extra_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_extra_feats",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_394": {
                "variable": {
                    "value": "W_relevance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_relevance",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[docnade_embedding_matrix.shape[1], params['relevance_hidden_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_406": {
                "variable": {
                    "value": "bias_relevance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_relevance",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['relevance_hidden_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_412": {
                "variable": {
                    "value": "W_title_relevance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_title_relevance",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[docnade_embedding_matrix.shape[1], params['relevance_hidden_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_424": {
                "variable": {
                    "value": "bias_title_relevance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_title_relevance",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['relevance_hidden_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_448": {
                "variable": {
                    "value": "relevance_output_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1.0 * tf.norm(tf.subtract(relevance_output_doc, relevance_output_query), ord=1, axis=1, name='relevance_score')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_450": {
                "variable": {
                    "value": "relevance_output_temp_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1.0 * tf.norm(tf.subtract(relevance_output_doc_2, relevance_output_query_2), ord=1, axis=1, name='relevance_score_2')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_456": {
                "variable": {
                    "value": "relevance_output_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[relevance_output_temp, input_x_extra_feats, input_sim_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensordot_493": {
                "variable": {
                    "value": "relevance_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "relevance_output_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([relevance_output_temp, input_x_extra_feats, input_sim_1], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W2_relevance', [3], initializer=tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_496": {
                "variable": {
                    "value": "relevance_output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1.0 * tf.norm(tf.subtract(relevance_output_doc, relevance_output_query), ord=1, axis=1, name='relevance_score')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_498": {
                "variable": {
                    "value": "relevance_output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1.0 * tf.norm(tf.subtract(relevance_output_doc_2, relevance_output_query_2), ord=1, axis=1, name='relevance_score_2')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_551": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "relevance_variables",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_431": {
                "x": {
                    "value": "input_x_doc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='input_x_doc')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W_relevance', [docnade_embedding_matrix.shape[1], params['relevance_hidden_size']], initializer=tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_relevance', [params['relevance_hidden_size']], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_432": {
                "x": {
                    "value": "input_x_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='input_x_query')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W_relevance', [docnade_embedding_matrix.shape[1], params['relevance_hidden_size']], initializer=tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_relevance', [params['relevance_hidden_size']], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_437": {
                "x": {
                    "value": "input_x_doc_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='input_x_doc_2')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W_title_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W_title_relevance', [docnade_embedding_matrix.shape[1], params['relevance_hidden_size']], initializer=tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_title_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_title_relevance', [params['relevance_hidden_size']], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_438": {
                "x": {
                    "value": "input_x_query_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='input_x_query_2')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W_title_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W_title_relevance', [docnade_embedding_matrix.shape[1], params['relevance_hidden_size']], initializer=tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_title_relevance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_title_relevance', [params['relevance_hidden_size']], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_479": {
                "variable": {
                    "value": "W2_relevance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2_relevance",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_544": {
                "config": {
                    "value": "tf.ConfigProto(inter_op_parallelism_threads=params['num_cores'], intra_op_parallelism_threads=params['num_cores'], gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "local_variables_initializer_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_459": {
                "name_or_scope": {
                    "value": "relevance_variables",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_526": {
                "learning_rate": {
                    "value": "params['relevance_learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "global_variables_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_400": {
                "maxval": {
                    "value": "max_embed_init",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (docnade_embedding_matrix.shape[1] * params['relevance_hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "1.0 / (3 * 1)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_initializer_409": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_418": {
                "maxval": {
                    "value": "max_embed_init",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (docnade_embedding_matrix.shape[1] * params['relevance_hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "1.0 / (3 * 1)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_initializer_427": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_448": {
                "tensor": {
                    "value": "tf.subtract(relevance_output_doc, relevance_output_query)",
                    "type": "Call",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "relevance_score",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_450": {
                "tensor": {
                    "value": "tf.subtract(relevance_output_doc_2, relevance_output_query_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "relevance_score_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_496": {
                "tensor": {
                    "value": "tf.subtract(relevance_output_doc, relevance_output_query)",
                    "type": "Call",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "relevance_score",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_498": {
                "tensor": {
                    "value": "tf.subtract(relevance_output_doc_2, relevance_output_query_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "relevance_score_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_544": {
                "inter_op_parallelism_threads": {
                    "value": "params['num_cores']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "params['num_cores']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_448": {
                "x": {
                    "value": "relevance_output_doc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(input_x_doc, W_relevance, bias_relevance), name='relevance_output_doc')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "relevance_output_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(input_x_query, W_relevance, bias_relevance), name='relevance_output_query')",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_450": {
                "x": {
                    "value": "relevance_output_doc_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(input_x_doc_2, W_title_relevance, bias_title_relevance), name='relevance_output_doc_2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "relevance_output_query_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(input_x_query_2, W_title_relevance, bias_title_relevance), name='relevance_output_query_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_484": {
                "maxval": {
                    "value": "max_embed_init",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (docnade_embedding_matrix.shape[1] * params['relevance_hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "1.0 / (3 * 1)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "subtract_496": {
                "x": {
                    "value": "relevance_output_doc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(input_x_doc, W_relevance, bias_relevance), name='relevance_output_doc')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "relevance_output_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(input_x_query, W_relevance, bias_relevance), name='relevance_output_query')",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_498": {
                "x": {
                    "value": "relevance_output_doc_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(input_x_doc_2, W_title_relevance, bias_title_relevance), name='relevance_output_doc_2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "relevance_output_query_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(input_x_query_2, W_title_relevance, bias_title_relevance), name='relevance_output_query_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "GPUOptions_547": {
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train_DocNADE.py": {
        "sklearn": {
            "accuracy_score_942": {
                "variable": {
                    "value": "val_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_true_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[int(label[0]) for label in validation_labels]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "val_pred_labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "MultiLabelBinarizer_1669": {
                "variable": {
                    "value": "mlb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_1818": {
                "variable": {
                    "value": "sim_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_target",
                            "Name"
                        ]
                    ]
                },
                "Y": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_target",
                            "Name"
                        ]
                    ]
                }
            },
            "cosine_similarity_1216": {
                "variable": {
                    "value": "similarity_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(validation_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "np.array(query_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_1227": {
                "variable": {
                    "value": "similarity_abstract_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(validation_abstract_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "np.array(query_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_1238": {
                "variable": {
                    "value": "similarity_title_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(validation_title_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "np.array(query_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_277": {
                "variable": {
                    "value": "val_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_true_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[int(label[0]) for label in validation_labels]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "val_pred_labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "accuracy_score_309": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_labels",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[int(label[0]) for label in test_labels]",
                            "ListComp"
                        ],
                        [
                            "[int(label[0]) for label in test_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "accuracy_score_523": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_labels",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[int(label[0]) for label in test_labels]",
                            "ListComp"
                        ],
                        [
                            "[int(label[0]) for label in test_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cosine_similarity_1335": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "query_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_1343": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_title_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_title_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_1380": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "query_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_1383": {
                "variable": {
                    "value": "query_attentions_title",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs_title",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Embs_titles[j]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_1393": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_title_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_title_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_1411": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_title_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_title_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_436": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_title_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_title_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_650": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_title_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_title_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_1348": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_title_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_title_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_1398": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_title_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_title_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_1416": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_EmbSum_vector",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(query_vecs_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(query_vecs[i], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(query_vecs_attns, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "EmbSum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(Embs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_attns, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(EmbSum_title_attns, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(EmbSum_title_attns, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_427": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "query_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_641": {
                "variable": {
                    "value": "query_attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "query_vector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "total_embedding_matrix[total_vocab.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ],
                        [
                            "query_embedding_matrix[query_words_list.index(qword), :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(query_vector, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "Embs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "total_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "query_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ],
                        [
                            "docnade_embedding_matrix[np.array(tokens), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_1353": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "q_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "d_vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cosine_similarity_1403": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "q_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "d_vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cosine_similarity_1421": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "q_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "d_vec",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "avg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_ph",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "validation",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "validation_ph",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "validation_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "validation_acc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FileWriter_94": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params.model, 'logs')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['model'], 'logs')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['model'], 'logs')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['model'], 'logs')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['model'], 'logs')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['model'], 'logs')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_95": {
                "variable": {
                    "value": "summaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_96": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "import_meta_graph_887": {
                "variable": {
                    "value": "saver_ppl",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "model/ + params[reload_model_dir] + model_sup/model_sup-1.meta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_890": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_1730": {
                "variable": {
                    "value": "saver_ppl",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "model/ + params[reload_model_dir] + model_ppl/model_ppl-1.meta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_1733": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_2012": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_2013": {
                "variable": {
                    "value": "x_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x_bw",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_2018": {
                "variable": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_lengths",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_81": {
                "config": {
                    "value": "tf.ConfigProto(inter_op_parallelism_threads=params.num_cores, intra_op_parallelism_threads=params.num_cores, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "avg_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], 'loss_ph')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_91": {
                "name": {
                    "value": "validation",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "validation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], 'validation_ph')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_92": {
                "name": {
                    "value": "validation_accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_accuracy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], 'validation_acc')",
                            "Call"
                        ]
                    ]
                }
            },
            "local_variables_initializer_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_875": {
                "config": {
                    "value": "tf.ConfigProto(inter_op_parallelism_threads=params['num_cores'], intra_op_parallelism_threads=params['num_cores'], gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_1721": {
                "config": {
                    "value": "tf.ConfigProto(inter_op_parallelism_threads=params['num_cores'], intra_op_parallelism_threads=params['num_cores'], gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_2015": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_2017": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_2021": {
                "variable": {
                    "value": "x_title",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x_title",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_2022": {
                "variable": {
                    "value": "seq_lengths_title",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_lengths_title",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_888": {
                "checkpoint_dir": {
                    "value": "model/ + params[reload_model_dir] + model_sup/",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "latest_checkpoint_1731": {
                "checkpoint_dir": {
                    "value": "model/ + params[reload_model_dir] + model_ppl/",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "import_meta_graph_1951": {
                "variable": {
                    "value": "saver_ir",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "model/ + args.reload_model_dir + model_ir/model_ir-1.meta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_1954": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_81": {
                "inter_op_parallelism_threads": {
                    "value": "params.num_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "params.num_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_875": {
                "inter_op_parallelism_threads": {
                    "value": "params['num_cores']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "params['num_cores']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_1721": {
                "inter_op_parallelism_threads": {
                    "value": "params['num_cores']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "params['num_cores']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_1945": {
                "config": {
                    "value": "tf.ConfigProto(inter_op_parallelism_threads=params['num_cores'], intra_op_parallelism_threads=params['num_cores'], gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_1952": {
                "checkpoint_dir": {
                    "value": "model/ + args.reload_model_dir + model_ir/",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GPUOptions_84": {
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GPUOptions_878": {
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GPUOptions_1724": {
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_1945": {
                "inter_op_parallelism_threads": {
                    "value": "params['num_cores']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "params['num_cores']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_1948": {
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/data.py": {
        "tensorflow": {
            "set_random_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "model/model_DocNADE.py": {
        "tensorflow": {
            "set_random_seed_11": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_initializer_70": {
                "variable": {
                    "value": "const",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "const",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_94": {
                "variable": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "U",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('U', initializer=U_pretrained)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('U', [input.get_shape()[1], output_dim], initializer=norm)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('U_supervised', [sup_input_size, params.num_classes], initializer=tf.random_uniform_initializer(maxval=max_U_init, seed=tf_op_seed), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [output_dim], initializer=const)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_121": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(0, max_doc_length, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(seq_lengths, [batch_size, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.less(tf.range(0, max_doc_length, 1), tf.reshape(seq_lengths, [batch_size, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.where(mask, tf.ones_like(labels, dtype=tf.float32), tf.zeros_like(labels, dtype=tf.float32)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_126": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(mask, tf.ones_like(labels, dtype=tf.float32), tf.zeros_like(labels, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "loss_function(logits, labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(loss, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss / tf.to_float(seq_lengths)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "loss_function(logits, labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(loss, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss / tf.to_float(seq_lengths)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_44": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.compute_gradients(loss, vars)",
                            "Call"
                        ],
                        [
                            "list(zip(clipped_gradients, variables)) + not_clipped",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input.get_shape()[1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=stddev, seed=tf_op_seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(stddev=np.sqrt(2.0 / input.get_shape()[1].value), seed=tf_op_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "U_pretrained",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_133": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_162": {
                "variable": {
                    "value": "self.b_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scan_212": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "sum_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.transpose(self.embeddings, [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_213": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.embeddings, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(h, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros([batch_size, 1, params.hidden_size], dtype=tf.float32), h], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(h + bias)",
                            "Call"
                        ],
                        [
                            "h[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(h, [-1, params.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(h + bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h + bias)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_215": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([batch_size, 1, params.hidden_size], dtype=tf.float32), h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_235": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size), tf.to_int32(seq_lengths)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_243": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.embeddings, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(h, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros([batch_size, 1, params.hidden_size], dtype=tf.float32), h], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(h + bias)",
                            "Call"
                        ],
                        [
                            "h[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(h, [-1, params.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(h + bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h + bias)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size), tf.to_int32(seq_lengths)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "last_hidden",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.embeddings, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(h, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros([batch_size, 1, params.hidden_size], dtype=tf.float32), h], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(h + bias)",
                            "Call"
                        ],
                        [
                            "h[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(h, [-1, params.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(h + bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h + bias)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, params.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_526": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_74": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "random_normal_initializer_76": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / input.get_shape()[1].value)",
                    "type": "Call",
                    "possible_values": []
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "shape_116": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "tensor": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_126": {
                "condition": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.less(tf.range(0, max_doc_length, 1), tf.reshape(seq_lengths, [batch_size, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.where(mask, tf.ones_like(labels, dtype=tf.float32), tf.zeros_like(labels, dtype=tf.float32)))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.ones_like(labels, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(labels, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "input_tensor": {
                    "value": "loss_unnormed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "'loss_unnormed_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_183": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [params.vocab_size, params.hidden_size], initializer=tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', initializer=W_pretrained)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_201": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_223": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scan_328": {
                "variable": {
                    "value": "weighted_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "sum_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.transpose(self.weighted_sup_lookup, [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_329": {
                "variable": {
                    "value": "weighted_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weighted_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.weighted_sup_lookup, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(weighted_h, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "sup_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size), tf.to_int32(seq_lengths) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_341": {
                "variable": {
                    "value": "self.h_sup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "weighted_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.weighted_sup_lookup, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(weighted_h, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sup_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size), tf.to_int32(seq_lengths) - 1], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sup_input_hidden",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_492": {
                "variable": {
                    "value": "disc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "logits": {
                    "value": "disc_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(self.h_sup, U, d, name='disc_logits')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(sup_hidden, U2, d2, name='disc_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_496": {
                "variable": {
                    "value": "self.disc_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "disc_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=disc_logits)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "disc_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_497": {
                "variable": {
                    "value": "self.pred_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "disc_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(self.h_sup, U, d, name='disc_logits')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(sup_hidden, U2, d2, name='disc_logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_59": {
                "name": {
                    "value": "variable.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_60": {
                "name": {
                    "value": "variable.name + '/gradients'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gradient.values",
                            "Attribute"
                        ],
                        [
                            "gradient",
                            "Name"
                        ]
                    ]
                }
            },
            "histogram_61": {
                "name": {
                    "value": "variable.name + '/gradient_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "clip_ops.global_norm([grad_values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_144": {
                "x": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_161": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_166": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.vocab_size, params.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_178": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "W_pretrained",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_186": {
                "variable": {
                    "value": "glove_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "glove_prior",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glove_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_212": {
                "a": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_225": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_282": {
                "variable": {
                    "value": "embeddings_lambda_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings_lambda_list_unclipped",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.vocab_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(params.sup_weight_init)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_289": {
                "variable": {
                    "value": "self.embeddings_lambda_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "embeddings_lambda_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddings_lambda_list_unclipped', [params.vocab_size, 1], initializer=weight_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embeddings_lambda_list",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_291": {
                "variable": {
                    "value": "sup_matrix_weighted",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sup_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "glove_prior",
                            "Name"
                        ],
                        [
                            "glove_prior",
                            "Name"
                        ],
                        [
                            "W",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "self.embeddings_lambda_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_293": {
                "variable": {
                    "value": "self.weighted_sup_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "sup_matrix_weighted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(sup_matrix, self.embeddings_lambda_list)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_323": {
                "variable": {
                    "value": "self.weighted_sup_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "sup_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "glove_prior",
                            "Name"
                        ],
                        [
                            "glove_prior",
                            "Name"
                        ],
                        [
                            "W",
                            "Name"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scan_361": {
                "variable": {
                    "value": "weighted_title_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "sum_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.transpose(self.weighted_sup_title_lookup, [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_362": {
                "variable": {
                    "value": "weighted_title_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weighted_title_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.weighted_sup_title_lookup, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(weighted_title_h, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_364": {
                "variable": {
                    "value": "sup_indices_title",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size), tf.to_int32(seq_lengths_title) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_369": {
                "variable": {
                    "value": "self.h_title",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "weighted_title_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.weighted_sup_title_lookup, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(weighted_title_h, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sup_indices_title",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size), tf.to_int32(seq_lengths_title) - 1], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "last_hidden_title",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h_title, self.h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "last_hidden_comb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_393": {
                "variable": {
                    "value": "U1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U1_supervised",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sup_input_size, params.sup_projection_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(maxval=max_U1_init, seed=tf_op_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_403": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "d1_supervised",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.sup_projection_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_424": {
                "variable": {
                    "value": "sup_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h, sup_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "last_hidden_comb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_430": {
                "variable": {
                    "value": "U2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U2_supervised",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.sup_projection_size, params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(maxval=max_U2_init, seed=tf_op_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_440": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "d2_supervised",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_447": {
                "variable": {
                    "value": "disc_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sup_hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.nn.xw_plus_b(self.h_sup, U1, d1, name='disc_hidden'))",
                            "Call"
                        ],
                        [
                            "tf.concat([self.h, sup_hidden], axis=1, name='last_hidden_comb')",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.xw_plus_b(self.h_sup, U1, d1, name='disc_hidden'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.xw_plus_b(self.h_sup, U1, d1, name='disc_hidden'))",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "U2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('U2_supervised', [params.sup_projection_size, params.num_classes], initializer=tf.random_uniform_initializer(maxval=max_U2_init, seed=tf_op_seed), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "d2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d2_supervised', [params.num_classes], initializer=tf.constant_initializer(0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "disc_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_466": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U_supervised",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sup_input_size, params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(maxval=max_U_init, seed=tf_op_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_476": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "d_supervised",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_485": {
                "variable": {
                    "value": "disc_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_sup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "U",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('U', initializer=U_pretrained)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('U', [input.get_shape()[1], output_dim], initializer=norm)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('U_supervised', [sup_input_size, params.num_classes], initializer=tf.random_uniform_initializer(maxval=max_U_init, seed=tf_op_seed), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d_supervised', [params.num_classes], initializer=tf.constant_initializer(0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "disc_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_norm_63": {
                "t_list": {
                    "value": "[grad_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "shape": {
                    "value": "[batch_size, 1, params.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_227": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_237": {
                "x": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_275": {
                "variable": {
                    "value": "weight_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "max_embed_init",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (params.vocab_size * params.hidden_size)",
                            "BinOp"
                        ],
                        [
                            "1.0 / params.vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_initializer_280": {
                "variable": {
                    "value": "weight_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "params.sup_weight_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_296": {
                "variable": {
                    "value": "self.weighted_sup_title_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "sup_matrix_weighted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(sup_matrix, self.embeddings_lambda_list)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_title",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_299": {
                "variable": {
                    "value": "W_weighted",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [params.vocab_size, params.hidden_size], initializer=tf.random_uniform_initializer(maxval=max_embed_init, seed=tf_op_seed))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', initializer=W_pretrained)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.embeddings_lambda_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_300": {
                "variable": {
                    "value": "self.weighted_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "W_weighted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(W, self.embeddings_lambda_list)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scan_302": {
                "variable": {
                    "value": "weighted_h_docnade",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "sum_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.transpose(self.weighted_embeddings, [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_303": {
                "variable": {
                    "value": "weighted_h_docnade",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weighted_h_docnade",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.weighted_embeddings, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(weighted_h_docnade, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_305": {
                "variable": {
                    "value": "weighted_embeddings_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size), tf.to_int32(seq_lengths) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_310": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "weighted_h_docnade",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scan(sum_embeddings, tf.transpose(self.weighted_embeddings, [1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(weighted_h_docnade, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "weighted_embeddings_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size), tf.to_int32(seq_lengths) - 1], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "last_hidden",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_326": {
                "variable": {
                    "value": "self.weighted_sup_title_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "sup_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "glove_prior",
                            "Name"
                        ],
                        [
                            "glove_prior",
                            "Name"
                        ],
                        [
                            "W",
                            "Name"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_title",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_328": {
                "a": {
                    "value": "self.weighted_sup_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_415": {
                "variable": {
                    "value": "sup_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(self.h_sup, U1, d1, name='disc_hidden')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_528": {
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_204": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_314": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_361": {
                "a": {
                    "value": "self.weighted_sup_title_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_374": {
                "variable": {
                    "value": "self.h_title",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_title + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_417": {
                "variable": {
                    "value": "sup_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(self.h_sup, U1, d1, name='disc_hidden')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_462": {
                "t": {
                    "value": "d1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d1_supervised', [params.sup_projection_size], initializer=tf.constant_initializer(0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_487": {
                "t": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d_supervised', [params.num_classes], initializer=tf.constant_initializer(0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_172": {
                "maxval": {
                    "value": "max_embed_init",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (params.vocab_size * params.hidden_size)",
                            "BinOp"
                        ],
                        [
                            "1.0 / params.vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "transpose_302": {
                "a": {
                    "value": "self.weighted_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_316": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_338": {
                "x": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_376": {
                "variable": {
                    "value": "self.h_title",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_title + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_396": {
                "maxval": {
                    "value": "max_U1_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (sup_input_size * params.sup_projection_size)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_initializer_406": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_415": {
                "x": {
                    "value": "self.h_sup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "U1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('U1_supervised', [sup_input_size, params.sup_projection_size], initializer=tf.random_uniform_initializer(maxval=max_U1_init, seed=tf_op_seed), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "d1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d1_supervised', [params.sup_projection_size], initializer=tf.constant_initializer(0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "disc_hidden",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_419": {
                "variable": {
                    "value": "sup_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(self.h_sup, U1, d1, name='disc_hidden')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_433": {
                "maxval": {
                    "value": "max_U2_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (params.sup_projection_size * params.num_classes)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_initializer_443": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_469": {
                "maxval": {
                    "value": "max_U_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (params.hidden_size * params.num_classes)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf_op_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_initializer_479": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_318": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.h + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_366": {
                "x": {
                    "value": "seq_lengths_title",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_378": {
                "variable": {
                    "value": "self.h_title",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.h_title + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "xw_plus_b_417": {
                "x": {
                    "value": "self.h_sup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "U1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('U1_supervised', [sup_input_size, params.sup_projection_size], initializer=tf.random_uniform_initializer(maxval=max_U1_init, seed=tf_op_seed), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "d1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d1_supervised', [params.sup_projection_size], initializer=tf.constant_initializer(0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "disc_hidden",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int32_307": {
                "x": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_419": {
                "x": {
                    "value": "self.h_sup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "U1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('U1_supervised', [sup_input_size, params.sup_projection_size], initializer=tf.random_uniform_initializer(maxval=max_U1_init, seed=tf_op_seed), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "d1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d1_supervised', [params.sup_projection_size], initializer=tf.constant_initializer(0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "disc_hidden",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}