{
    "main.py": {
        "sklearn": {
            "GaussianMixture_273": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs['training']['num_clusters']",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                },
                "n_init": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_395": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtk10k_train['label']",
                            "Subscript"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=3)",
                            "Call"
                        ],
                        [
                            "he_train_dataset.get_data()",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=3)",
                            "Call"
                        ],
                        [
                            "np.array(list(map(HE_VIEWS.index, y_train)))",
                            "Call"
                        ],
                        [
                            "np.array([np.where(r == 1)[0][0] for r in y_train])",
                            "Call"
                        ],
                        [
                            "get_data(args, configs)",
                            "Call"
                        ],
                        [
                            "get_data(args, configs)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.predict(z_model.predict(X))",
                            "Call"
                        ],
                        [
                            "np.argmax(p_c_z, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(p_c_z, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "adjusted_rand_score_396": {
                "variable": {
                    "value": "ari",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtk10k_train['label']",
                            "Subscript"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=3)",
                            "Call"
                        ],
                        [
                            "he_train_dataset.get_data()",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=3)",
                            "Call"
                        ],
                        [
                            "np.array(list(map(HE_VIEWS.index, y_train)))",
                            "Call"
                        ],
                        [
                            "np.array([np.where(r == 1)[0][0] for r in y_train])",
                            "Call"
                        ],
                        [
                            "get_data(args, configs)",
                            "Call"
                        ],
                        [
                            "get_data(args, configs)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.predict(z_model.predict(X))",
                            "Call"
                        ],
                        [
                            "np.argmax(p_c_z, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(p_c_z, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_445": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtk10k_test['label']",
                            "Subscript"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=3)",
                            "Call"
                        ],
                        [
                            "he_test_dataset.get_data()",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=3)",
                            "Call"
                        ],
                        [
                            "np.array(list(map(HE_VIEWS.index, y_test)))",
                            "Call"
                        ],
                        [
                            "np.array([np.where(r == 1)[0][0] for r in y_test])",
                            "Call"
                        ],
                        [
                            "get_data(args, configs)",
                            "Call"
                        ],
                        [
                            "get_data(args, configs)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.predict(z_model.predict(X))",
                            "Call"
                        ],
                        [
                            "np.argmax(p_c_z, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(p_c_z, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "adjusted_rand_score_446": {
                "variable": {
                    "value": "ari",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtk10k_test['label']",
                            "Subscript"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=3)",
                            "Call"
                        ],
                        [
                            "he_test_dataset.get_data()",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=3)",
                            "Call"
                        ],
                        [
                            "np.array(list(map(HE_VIEWS.index, y_test)))",
                            "Call"
                        ],
                        [
                            "np.array([np.where(r == 1)[0][0] for r in y_test])",
                            "Call"
                        ],
                        [
                            "get_data(args, configs)",
                            "Call"
                        ],
                        [
                            "get_data(args, configs)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.predict(z_model.predict(X))",
                            "Call"
                        ],
                        [
                            "np.argmax(p_c_z, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(p_c_z, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_124": {
                "variable": {
                    "value": "(x_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_161": {
                "variable": {
                    "value": "(x_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_verbosity_43": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_198": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict([x_train, np.zeros(len(x_train))])",
                            "Call"
                        ],
                        [
                            "model.predict([x_test, np.zeros(len(x_test))])",
                            "Call"
                        ],
                        [
                            "p_c_z",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_250": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Model_307": {
                "variable": {
                    "value": "z_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfkl.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "tfkl.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "tfkl.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.encoder.mu(e3)",
                            "Call"
                        ],
                        [
                            "model.encoder.mu(f)",
                            "Call"
                        ],
                        [
                            "encoder(input)",
                            "Call"
                        ],
                        [
                            "z_model.predict(X)",
                            "Call"
                        ],
                        [
                            "model.encoder.mu(f)",
                            "Call"
                        ],
                        [
                            "encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_data_53": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numpy_function_199": {
                "func": {
                    "value": "utils.cluster_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[y, y_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_263": {
                "variable": {
                    "value": "cp_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "pretrain/autoencoder_tmp/ + ex_name + /cp.ckpt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Model_270": {
                "variable": {
                    "value": "z_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfkl.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "tfkl.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "tfkl.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.encoder.mu(e3)",
                            "Call"
                        ],
                        [
                            "model.encoder.mu(f)",
                            "Call"
                        ],
                        [
                            "encoder(input)",
                            "Call"
                        ],
                        [
                            "z_model.predict(X)",
                            "Call"
                        ],
                        [
                            "model.encoder.mu(f)",
                            "Call"
                        ],
                        [
                            "encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_339": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_data_60": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_233": {
                "variable": {
                    "value": "dec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decoder.convT3(d4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_352": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_246": {
                "variable": {
                    "value": "dec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decoder.dense4(d3)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(d5)",
                            "Call"
                        ],
                        [
                            "d_reshape",
                            "variable"
                        ],
                        [
                            "block(dec)",
                            "Call"
                        ],
                        [
                            "model.decoder.convT(dec)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(dec)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorBoard_350": {
                "log_dir": {
                    "value": "'logs/' + ex_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_351": {
                "schedule": {
                    "value": "learning_rate_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate_scheduler",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorBoard_356": {
                "log_dir": {
                    "value": "'logs/' + ex_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_357": {
                "filepath": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CHECKPOINT_PATH + '/' + configs['data']['data_name'] + '/' + ex_name",
                            "BinOp"
                        ]
                    ]
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "period": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorBoard_363": {
                "log_dir": {
                    "value": "'logs/' + ex_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "make_plots.py": {
        "sklearn": {
            "StandardScaler_50": {
                "variable": {
                    "value": "standardized_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_51": {
                "variable": {
                    "value": "pca_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_variable_31": {
                "ckpt_dir_or_file": {
                    "value": "fq_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(fq_path)",
                            "Call"
                        ],
                        [
                            "os.path.expanduser(fq_path)",
                            "Call"
                        ],
                        [
                            "os.path.expanduser(fq_path)",
                            "Call"
                        ],
                        [
                            "fq_path",
                            "Method Argument"
                        ],
                        [
                            "fq_path",
                            "Method Argument"
                        ],
                        [
                            "fq_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "source/utils.py": {
        "sklearn": {}
    },
    "projector_plugin.py": {
        "tensorflow": {
            "Variable_20": {
                "variable": {
                    "value": "tensor_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "ProjectorPlugin.EMBEDDING_TENSOR_NAME",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_21": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[tensor_embeddings]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "source/data.py": {
        "tensorflow": {}
    },
    "source/model.py": {
        "tensorflow": {
            "Variable_223": {
                "variable": {
                    "value": "self.c_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([self.num_clusters, self.encoded_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_224": {
                "variable": {
                    "value": "self.log_c_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([self.num_clusters, self.encoded_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_225": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.ones([self.num_clusters]) * (1 / self.num_clusters)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "variable": {
                    "value": "log_z_sigma_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_z_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_235": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, self.num_clusters, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_236": {
                "variable": {
                    "value": "log_z_sigma_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_z_sigma_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(log_z_sigma, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(log_z_sigma_tile, c)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, self.num_clusters, 1], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, self.num_clusters, 1], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, self.num_clusters], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_238": {
                "variable": {
                    "value": "z_mu_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, self.num_clusters, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_240": {
                "variable": {
                    "value": "z_mu_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mu_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(z_mu, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_mu_tile, c)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, self.num_clusters, 1], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, self.num_clusters, 1], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, self.num_clusters], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_242": {
                "variable": {
                    "value": "c_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_c_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_243": {
                "variable": {
                    "value": "p_z_c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.log(tfd.MultivariateNormalDiag(loc=self.c_mu[i, :], scale_diag=tf.math.sqrt(c_sigma[i, :])).prob(z_sample) + 1e-30) for i in range(self.num_clusters)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_251": {
                "variable": {
                    "value": "norm_s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-30 + tf.math.reduce_sum(tf.math.exp(p_c_z), axis=-1, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_252": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, self.num_clusters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_253": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(1e-30 + tf.math.reduce_sum(tf.math.exp(p_c_z), axis=-1, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, self.num_clusters, 1], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, self.num_clusters, 1], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, self.num_clusters], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_254": {
                "variable": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_c_z - norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_256": {
                "variable": {
                    "value": "loss_1a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_sigma + tf.keras.backend.epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_264": {
                "variable": {
                    "value": "loss_1a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.math.reduce_sum(loss_1a, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_265": {
                "variable": {
                    "value": "loss_1b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.math.reduce_sum(loss_1b, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_266": {
                "variable": {
                    "value": "loss_1c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.math.reduce_sum(loss_1c, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_267": {
                "variable": {
                    "value": "loss_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoded_size * tf.math.log(tf.keras.backend.constant(2 * np.pi))",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, loss_1d)",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1d, axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_294": {
                "variable": {
                    "value": "loss_2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.xlogy(p_c_z, p_c_z)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_101": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.upsample(inputs)",
                            "Call"
                        ],
                        [
                            "self.convT1(out)",
                            "Call"
                        ],
                        [
                            "self.convT2(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "block(out)",
                            "Call"
                        ],
                        [
                            "self.dense(inputs)",
                            "Call"
                        ],
                        [
                            "self.reshape(out)",
                            "Call"
                        ],
                        [
                            "block(out)",
                            "Call"
                        ],
                        [
                            "self.convT(out)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.dense(inputs)",
                            "Call"
                        ],
                        [
                            "self.reshape(out)",
                            "Call"
                        ],
                        [
                            "self.convT1(out)",
                            "Call"
                        ],
                        [
                            "self.convT2(out)",
                            "Call"
                        ],
                        [
                            "self.convT3(out)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.upsample(inputs)",
                            "Call"
                        ],
                        [
                            "self.convT1(out)",
                            "Call"
                        ],
                        [
                            "self.convT2(out)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "block(out)",
                            "Call"
                        ],
                        [
                            "self.dense(inputs)",
                            "Call"
                        ],
                        [
                            "self.reshape(out)",
                            "Call"
                        ],
                        [
                            "block(out)",
                            "Call"
                        ],
                        [
                            "self.convT(out)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.dense(inputs)",
                            "Call"
                        ],
                        [
                            "self.reshape(out)",
                            "Call"
                        ],
                        [
                            "self.convT1(out)",
                            "Call"
                        ],
                        [
                            "self.convT2(out)",
                            "Call"
                        ],
                        [
                            "self.convT3(out)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "ind1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ind1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(ind1, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "ind2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ind2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(ind2, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_281": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ind1, ind2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_282": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([ind1, ind2], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ind)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(ind, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_283": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([ind1, ind2], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ind)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(ind, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_284": {
                "variable": {
                    "value": "W_sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([ind1, ind2], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ind)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(ind, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[len(inputs), len(inputs)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_285": {
                "variable": {
                    "value": "W_sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=ind, values=data, dense_shape=[len(inputs), len(inputs)])",
                            "Call"
                        ],
                        [
                            "tf.sparse.expand_dims(W_sparse, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_286": {
                "variable": {
                    "value": "W_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[W_sparse] * self.num_clusters",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_288": {
                "variable": {
                    "value": "sum_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_tile.__mul__(p_c_z)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_223": {
                "shape": {
                    "value": "[self.num_clusters, self.encoded_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_224": {
                "shape": {
                    "value": "[self.num_clusters, self.encoded_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_249": {
                "x": {
                    "value": "prior + tf.keras.backend.epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_258": {
                "x": {
                    "value": "log_z_sigma_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(log_z_sigma, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(log_z_sigma_tile, c)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_260": {
                "x": {
                    "value": "z_mu_tile - self.c_mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_262": {
                "x": {
                    "value": "tf.keras.backend.constant(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_264": {
                "input_tensor": {
                    "value": "loss_1a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(c_sigma + tf.keras.backend.epsilon())",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1a, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1a, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_265": {
                "input_tensor": {
                    "value": "loss_1b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.exp(log_z_sigma_tile) / (c_sigma + tf.keras.backend.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1b, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1b, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "loss_1c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.square(z_mu_tile - self.c_mu) / (c_sigma + tf.keras.backend.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1c, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1c, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_269": {
                "input_tensor": {
                    "value": "loss_1a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(c_sigma + tf.keras.backend.epsilon())",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1a, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1a, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_270": {
                "input_tensor": {
                    "value": "loss_1b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.exp(log_z_sigma_tile) / (c_sigma + tf.keras.backend.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1b, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1b, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "loss_1c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.square(z_mu_tile - self.c_mu) / (c_sigma + tf.keras.backend.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1c, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1c, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_272": {
                "input_tensor": {
                    "value": "loss_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoded_size * tf.math.log(tf.keras.backend.constant(2 * np.pi))",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, loss_1d)",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1d, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_274": {
                "input_tensor": {
                    "value": "tf.math.xlogy(p_c_z, prior)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "xlogy_294": {
                "x": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_296": {
                "input_tensor": {
                    "value": "log_z_sigma + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_298": {
                "input_tensor": {
                    "value": "loss_1a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(c_sigma + tf.keras.backend.epsilon())",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1a, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1a, axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_299": {
                "input_tensor": {
                    "value": "loss_1b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.exp(log_z_sigma_tile) / (c_sigma + tf.keras.backend.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1b, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1b, axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_300": {
                "input_tensor": {
                    "value": "loss_1c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.square(z_mu_tile - self.c_mu) / (c_sigma + tf.keras.backend.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, tf.math.reduce_sum(loss_1c, axis=-1))",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1c, axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_301": {
                "input_tensor": {
                    "value": "loss_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoded_size * tf.math.log(tf.keras.backend.constant(2 * np.pi))",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(p_c_z, loss_1d)",
                            "Call"
                        ],
                        [
                            "1 / 2 * tf.reduce_sum(loss_1d, axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_302": {
                "input_tensor": {
                    "value": "loss_2a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.reduce_sum(tf.math.xlogy(p_c_z, prior), axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_mean_303": {
                "input_tensor": {
                    "value": "loss_2b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(tf.math.xlogy(p_c_z, p_c_z), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_304": {
                "input_tensor": {
                    "value": "loss_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 / 2 * tf.reduce_sum(log_z_sigma + 1, axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BinaryCrossentropy_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_225": {
                "shape": {
                    "value": "[self.num_clusters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_231": {
                "x": {
                    "value": "tf.math.exp(log_z_sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_243": {
                "x": {
                    "value": "tfd.MultivariateNormalDiag(loc=self.c_mu[i, :], scale_diag=tf.math.sqrt(c_sigma[i, :])).prob(z_sample) + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "input_tensor": {
                    "value": "tf.math.exp(p_c_z)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "epsilon_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "epsilon_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "epsilon_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_262": {
                "value": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "xlogy_274": {
                "x": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prior",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_289": {
                "input_tensor": {
                    "value": "tf.multiply(p_c_z, sum_j)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_291": {
                "input_tensor": {
                    "value": "loss_2a_constrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.math.reduce_sum(tf.multiply(p_c_z, sum_j), axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "exp_231": {
                "x": {
                    "value": "log_z_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "epsilon_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_251": {
                "x": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_289": {
                "x": {
                    "value": "p_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(prior + tf.keras.backend.epsilon()) + p_z_c",
                            "BinOp"
                        ],
                        [
                            "tf.math.exp(p_c_z - norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.reduce_sum(mul, axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_244": {
                "x": {
                    "value": "c_sigma[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/stl10/compute_stl_features.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "res50_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(res50_model.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.astype('float32') / 255",
                            "BinOp"
                        ],
                        [
                            "to_numpy(feature_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "total_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_output, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_49": {
                "*tensors": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "total_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_output, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}