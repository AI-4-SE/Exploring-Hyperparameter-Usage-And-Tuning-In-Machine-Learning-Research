{
    "optbinning/binning/base.py": {
        "sklearn": {
            "BaseOptimalBinning_23": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/binning.py": {
        "sklearn": {
            "check_array_763": {
                "variable": {
                    "value": "user_splits",
                    "possible_values": []
                },
                "array": {
                    "value": "self.user_splits",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/binning_process.py": {
        "sklearn": {
            "BinningProcess_433": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.variable_names": {
                    "value": "variable_names",
                    "possible_values": []
                },
                "self.max_n_prebins": {
                    "value": "max_n_prebins",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_prebin_size": {
                    "value": "min_prebin_size",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_n_bins": {
                    "value": "min_n_bins",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_n_bins": {
                    "value": "max_n_bins",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_bin_size": {
                    "value": "min_bin_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_bin_size": {
                    "value": "max_bin_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_pvalue": {
                    "value": "max_pvalue",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_pvalue_policy": {
                    "value": "max_pvalue_policy",
                    "possible_values": [
                        [
                            "'consecutive'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.selection_criteria": {
                    "value": "selection_criteria",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fixed_variables": {
                    "value": "fixed_variables",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.binning_fit_params": {
                    "value": "binning_fit_params",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.binning_transform_params": {
                    "value": "binning_transform_params",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.special_codes": {
                    "value": "special_codes",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.split_digits": {
                    "value": "split_digits",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.categorical_variables": {
                    "value": "categorical_variables",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_jobs": {
                    "value": "n_jobs",
                    "possible_values": [
                        [
                            "effective_n_jobs(self.n_jobs)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.verbose": {
                    "value": "verbose",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "type_of_target_1062": {
                "variable": {
                    "value": "self._target_dtype",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "_read_column(input_path, extension, target, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "type_of_target_1206": {
                "variable": {
                    "value": "self._target_dtype",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "_read_column(input_path, extension, target, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_array_1079": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "possible_values": [
                        [
                            "check_array(X, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_1082": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "_read_column(input_path, extension, target, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "check_consistent_length_1085": {
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "check_array(X, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/binning_statistics.py": {
        "sklearn": {}
    },
    "optbinning/binning/continuous_binning.py": {
        "sklearn": {
            "check_array_602": {
                "variable": {
                    "value": "user_splits",
                    "possible_values": []
                },
                "array": {
                    "value": "self.user_splits",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/distributed/binning_process_sketch.py": {
        "sklearn": {
            "BinningProcessSketch_123": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.variable_names": {
                    "value": "variable_names",
                    "possible_values": []
                },
                "self.max_n_prebins": {
                    "value": "max_n_prebins",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_n_bins": {
                    "value": "min_n_bins",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_n_bins": {
                    "value": "max_n_bins",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_bin_size": {
                    "value": "min_bin_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_bin_size": {
                    "value": "max_bin_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_pvalue": {
                    "value": "max_pvalue",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_pvalue_policy": {
                    "value": "max_pvalue_policy",
                    "possible_values": [
                        [
                            "'consecutive'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.selection_criteria": {
                    "value": "selection_criteria",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.binning_fit_params": {
                    "value": "binning_fit_params",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.binning_transform_params": {
                    "value": "binning_transform_params",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.special_codes": {
                    "value": "special_codes",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.split_digits": {
                    "value": "split_digits",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.categorical_variables": {
                    "value": "categorical_variables",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.verbose": {
                    "value": "verbose",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/distributed/binning_sketch.py": {
        "sklearn": {
            "OptimalBinningSketch_218": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "'numerical'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sketch": {
                    "value": "sketch",
                    "possible_values": [
                        [
                            "'gk'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.K": {
                    "value": "K",
                    "possible_values": [
                        [
                            "25",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.solver": {
                    "value": "solver",
                    "possible_values": [
                        [
                            "self._optimizer",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "'cp'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.divergence": {
                    "value": "divergence",
                    "possible_values": [
                        [
                            "'iv'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_n_prebins": {
                    "value": "max_n_prebins",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_n_bins": {
                    "value": "min_n_bins",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_n_bins": {
                    "value": "max_n_bins",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_bin_size": {
                    "value": "min_bin_size",
                    "possible_values": [
                        [
                            "int(np.ceil(self.min_bin_size * self._bsketch.n))",
                            "Call"
                        ],
                        [
                            "self.min_bin_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_bin_size": {
                    "value": "max_bin_size",
                    "possible_values": [
                        [
                            "int(np.ceil(self.max_bin_size * self._bsketch.n))",
                            "Call"
                        ],
                        [
                            "self.max_bin_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_bin_n_event": {
                    "value": "min_bin_n_event",
                    "possible_values": [
                        [
                            "self.min_bin_n_event",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "max(self.min_bin_n_event, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_bin_n_event": {
                    "value": "max_bin_n_event",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_bin_n_nonevent": {
                    "value": "min_bin_n_nonevent",
                    "possible_values": [
                        [
                            "self.min_bin_n_nonevent",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "max(self.min_bin_n_nonevent, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_bin_n_nonevent": {
                    "value": "max_bin_n_nonevent",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.monotonic_trend": {
                    "value": "monotonic_trend",
                    "possible_values": [
                        [
                            "'auto'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_event_rate_diff": {
                    "value": "min_event_rate_diff",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_pvalue": {
                    "value": "max_pvalue",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_pvalue_policy": {
                    "value": "max_pvalue_policy",
                    "possible_values": [
                        [
                            "'consecutive'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gamma": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.cat_cutoff": {
                    "value": "cat_cutoff",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.cat_heuristic": {
                    "value": "cat_heuristic",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.special_codes": {
                    "value": "special_codes",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.split_digits": {
                    "value": "split_digits",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.mip_solver": {
                    "value": "mip_solver",
                    "possible_values": [
                        [
                            "'bop'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.time_limit": {
                    "value": "time_limit",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.verbose": {
                    "value": "verbose",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/mdlp.py": {
        "sklearn": {
            "MDLP_34": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.min_samples_split": {
                    "value": "min_samples_split",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_samples_leaf": {
                    "value": "min_samples_leaf",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_candidates": {
                    "value": "max_candidates",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_array_102": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "x[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "check_array_103": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "y[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/metrics.py": {
        "sklearn": {
            "check_array_17": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "check_array_18": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "check_consistent_length_20": {
                "*arrays": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/multiclass_binning.py": {
        "sklearn": {
            "check_array_548": {
                "variable": {
                    "value": "user_splits",
                    "possible_values": []
                },
                "array": {
                    "value": "self.user_splits",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/multidimensional/binning_2d.py": {
        "sklearn": {
            "DecisionTreeClassifier_645": {
                "variable": {
                    "value": "clf",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "min_prebin_size",
                    "possible_values": [
                        [
                            "min(self.min_prebin_size_x, self.min_prebin_size_y) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "max_leaf_nodes": {
                    "value": "clf_nodes",
                    "possible_values": [
                        [
                            "n_splits_x * n_splits_y",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/multidimensional/continuous_binning_2d.py": {
        "sklearn": {
            "DecisionTreeRegressor_571": {
                "variable": {
                    "value": "clf",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "min_prebin_size",
                    "possible_values": [
                        [
                            "min(self.min_prebin_size_x, self.min_prebin_size_y) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "max_leaf_nodes": {
                    "value": "clf_nodes",
                    "possible_values": [
                        [
                            "n_splits_x * n_splits_y",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/multidimensional/preprocessing_2d.py": {
        "sklearn": {
            "check_array_53": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_56": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(y)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_59": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "array": {
                    "value": "z",
                    "possible_values": [
                        [
                            "check_array(z, ensure_2d=False, dtype=None, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "np.asarray(z)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "check_consistent_length_62": {
                "*arrays": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/multidimensional/transformations_2d.py": {
        "sklearn": {
            "check_array_108": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_111": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(y)",
                            "Call"
                        ],
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(y)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_177": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_180": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(y)",
                            "Call"
                        ],
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(y)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/outlier.py": {
        "sklearn": {
            "RangeDetector_67": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.interval_length": {
                    "value": "interval_length",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.k": {
                    "value": "k",
                    "possible_values": [
                        [
                            "1.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.method": {
                    "value": "method",
                    "possible_values": [
                        [
                            "'ETI'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModifiedZScoreDetector_128": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.threshold": {
                    "value": "threshold",
                    "possible_values": [
                        [
                            "3.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/piecewise/base.py": {
        "sklearn": {
            "BasePWBinning_207": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.estimator": {
                    "value": "estimator",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.objective": {
                    "value": "objective",
                    "possible_values": [
                        [
                            "'l2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.degree": {
                    "value": "degree",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.continuous": {
                    "value": "continuous",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.prebinning_method": {
                    "value": "prebinning_method",
                    "possible_values": [
                        [
                            "'cart'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_n_prebins": {
                    "value": "max_n_prebins",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_prebin_size": {
                    "value": "min_prebin_size",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_n_bins": {
                    "value": "min_n_bins",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_n_bins": {
                    "value": "max_n_bins",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.min_bin_size": {
                    "value": "min_bin_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_bin_size": {
                    "value": "max_bin_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.monotonic_trend": {
                    "value": "monotonic_trend",
                    "possible_values": [
                        [
                            "self.monotonic_trend",
                            "Attribute"
                        ],
                        [
                            "'auto'",
                            "Constant"
                        ],
                        [
                            "'auto'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_subsamples": {
                    "value": "n_subsamples",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_pvalue": {
                    "value": "max_pvalue",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_pvalue_policy": {
                    "value": "max_pvalue_policy",
                    "possible_values": [
                        [
                            "'consecutive'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.outlier_detector": {
                    "value": "outlier_detector",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.outlier_params": {
                    "value": "outlier_params",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.user_splits": {
                    "value": "user_splits",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.user_splits_fixed": {
                    "value": "user_splits_fixed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.special_codes": {
                    "value": "special_codes",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.split_digits": {
                    "value": "split_digits",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.solver": {
                    "value": "solver",
                    "possible_values": [
                        [
                            "self._optimizer",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "'auto'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.h_epsilon": {
                    "value": "h_epsilon",
                    "possible_values": [
                        [
                            "1.35",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.quantile": {
                    "value": "quantile",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.regularization": {
                    "value": "regularization",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reg_l1": {
                    "value": "reg_l1",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reg_l2": {
                    "value": "reg_l2",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.random_state": {
                    "value": "random_state",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.verbose": {
                    "value": "verbose",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_412": {
                "variable": {
                    "value": "[_, x_subsamples, _, pred_subsamples, _, _, _, _]",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "x",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.n_subsamples",
                    "possible_values": []
                },
                "train_size": {
                    "value": "y",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/piecewise/binning.py": {
        "sklearn": {
            "LogisticRegression_347": {
                "variable": {
                    "value": "self.estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/piecewise/metrics.py": {
        "sklearn": {
            "average_precision_score_102": {
                "variable": {
                    "value": "d_metrics[Avg precision]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "possible_values": []
                },
                "y_score": {
                    "value": "event_rate",
                    "possible_values": [
                        [
                            "transform_binary_target(splits, x, c, min_pred, max_pred, t_n_nonevent, t_n_event, n_nonevent_special, n_event_special, n_nonevent_missing, n_event_missing, special_codes, 'event_rate', 'empirical', 'empirical')",
                            "Call"
                        ]
                    ]
                }
            },
            "brier_score_loss_103": {
                "variable": {
                    "value": "d_metrics[Brier score]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "possible_values": []
                },
                "y_prob": {
                    "value": "event_rate",
                    "possible_values": [
                        [
                            "transform_binary_target(splits, x, c, min_pred, max_pred, t_n_nonevent, t_n_event, n_nonevent_special, n_event_special, n_nonevent_missing, n_event_missing, special_codes, 'event_rate', 'empirical', 'empirical')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/piecewise/transformations.py": {
        "sklearn": {
            "check_array_30": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_121": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/prebinning.py": {
        "sklearn": {
            "KBinsDiscretizer_99": {
                "variable": {
                    "value": "est",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_112": {
                "variable": {
                    "value": "est",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_115": {
                "variable": {
                    "value": "est",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/preprocessing.py": {
        "sklearn": {
            "check_array_165": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "X[s]",
                            "Subscript"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_168": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "np.asarray(y)",
                            "Call"
                        ],
                        [
                            "Y[s]",
                            "Subscript"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LabelEncoder_180": {
                "variable": {
                    "value": "le",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "compute_class_weight_181": {
                "variable": {
                    "value": "class_weight_",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "class_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "classes": {
                    "value": "classes",
                    "possible_values": [
                        [
                            "np.unique(y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, dtype=None, force_all_finite=True)",
                            "Call"
                        ],
                        [
                            "np.asarray(y)",
                            "Call"
                        ],
                        [
                            "Y[s]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "check_consistent_length_171": {
                "*arrays": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "X[s]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/binning/transformations.py": {
        "sklearn": {
            "check_array_219": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_295": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            },
            "check_array_364": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "array": {
                    "value": "x",
                    "possible_values": [
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ],
                        [
                            "check_array(x, ensure_2d=False, dtype=None, force_all_finite='allow-nan')",
                            "Call"
                        ],
                        [
                            "np.asarray(x)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "allow-nan",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/binning/uncertainty/binning_scenarios.py": {
        "sklearn": {
            "check_array_474": {
                "variable": {
                    "value": "user_splits",
                    "possible_values": []
                },
                "array": {
                    "value": "self.user_splits",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/information.py": {
        "sklearn": {}
    },
    "optbinning/metrics/classification.py": {
        "sklearn": {
            "roc_curve_30": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred_proba",
                    "possible_values": []
                }
            },
            "confusion_matrix_86": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": []
                }
            },
            "auc_31": {
                "x": {
                    "value": "fpr",
                    "possible_values": [
                        [
                            "1.0 - tnr",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "possible_values": [
                        [
                            "tp / (tp + fn)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/metrics/regression.py": {
        "sklearn": {
            "explained_variance_score_127": {
                "variable": {
                    "value": "variance",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": []
                }
            },
            "mean_absolute_error_130": {
                "variable": {
                    "value": "mae",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": []
                }
            },
            "mean_squared_error_133": {
                "variable": {
                    "value": "mse",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": []
                }
            },
            "median_absolute_error_136": {
                "variable": {
                    "value": "median_ae",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": []
                }
            },
            "r2_score_139": {
                "variable": {
                    "value": "r2",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/scorecard/counterfactual/base.py": {
        "sklearn": {
            "BaseCounterfactual_18": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/scorecard/monitoring.py": {
        "sklearn": {
            "ScorecardMonitoring_166": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.scorecard": {
                    "value": "scorecard",
                    "possible_values": []
                },
                "self.psi_method": {
                    "value": "psi_method",
                    "possible_values": [
                        [
                            "'cart'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.psi_n_bins": {
                    "value": "psi_n_bins",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.psi_min_bin_size": {
                    "value": "psi_min_bin_size",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.show_digits": {
                    "value": "show_digits",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.verbose": {
                    "value": "verbose",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "type_of_target_259": {
                "variable": {
                    "value": "target_dtype",
                    "possible_values": []
                },
                "y": {
                    "value": "y_actual",
                    "possible_values": []
                }
            },
            "type_of_target_260": {
                "variable": {
                    "value": "target_dtype_e",
                    "possible_values": []
                },
                "y": {
                    "value": "y_expected",
                    "possible_values": []
                }
            }
        }
    },
    "optbinning/scorecard/plots.py": {
        "sklearn": {
            "check_array_19": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "check_array_20": {
                "variable": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "array": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "check_array(y_pred, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "roc_curve_86": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "check_array(y_pred, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_87": {
                "variable": {
                    "value": "auc_roc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "check_array(y_pred, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_153": {
                "variable": {
                    "value": "auroc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "check_array(y_pred, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_consistent_length_22": {
                "*arrays": {
                    "value": "y",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optbinning/scorecard/scorecard.py": {
        "sklearn": {
            "Scorecard_162": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self.binning_process": {
                    "value": "binning_process",
                    "possible_values": []
                },
                "self.estimator": {
                    "value": "estimator",
                    "possible_values": []
                },
                "self.scaling_method": {
                    "value": "scaling_method",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scaling_method_params": {
                    "value": "scaling_method_params",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.intercept_based": {
                    "value": "intercept_based",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reverse_scorecard": {
                    "value": "reverse_scorecard",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.rounding": {
                    "value": "rounding",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.verbose": {
                    "value": "verbose",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "type_of_target_478": {
                "variable": {
                    "value": "self._target_dtype",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "clone_508": {
                "variable": {
                    "value": "self.binning_process_",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.binning_process",
                    "possible_values": []
                }
            },
            "clone_527": {
                "variable": {
                    "value": "self.estimator_",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.estimator",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_binning.py": {
        "sklearn": {
            "load_breast_cancer_18": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_binning_2d.py": {
        "sklearn": {
            "load_breast_cancer_17": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_binning_process.py": {
        "sklearn": {
            "load_breast_cancer_29": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_wine_415": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_521": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_541": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_binning_process_sketch.py": {
        "sklearn": {
            "load_breast_cancer_18": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_binning_scenarios.py": {
        "sklearn": {
            "load_breast_cancer_20": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "train_test_split_27": {
                "variable": {
                    "value": "(x1, x2, y1, y2)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "x",
                    "possible_values": [
                        [
                            "df[variable].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.5",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_28": {
                "variable": {
                    "value": "(x3, x4, y3, y4)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "x1",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_binning_sketch.py": {
        "sklearn": {
            "load_breast_cancer_17": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_continuous_binning.py": {
        "sklearn": {}
    },
    "tests/test_continuous_binning_2d.py": {
        "sklearn": {}
    },
    "tests/test_counterfactual.py": {
        "sklearn": {
            "load_breast_cancer_25": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_54": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_32": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LinearRegression_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_mdlp.py": {
        "sklearn": {
            "load_breast_cancer_18": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_multiclass_binning.py": {
        "sklearn": {
            "load_wine_17": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_scorecard.py": {
        "sklearn": {
            "load_breast_cancer_25": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_31": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_99": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_106": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_135": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_142": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_151": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_157": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LinearRegression_180": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_194": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_201": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_219": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_225": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_243": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_249": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_267": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_273": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_291": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_297": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_315": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_322": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_342": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_348": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_357": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_363": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_395": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_401": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_breast_cancer_420": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_426": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LinearRegression_89": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_scorecard_monitoring.py": {
        "sklearn": {
            "train_test_split_36": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "pd.DataFrame(data.data, columns=variable_names)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.3",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "load_breast_cancer_28": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_44": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LinearRegression_46": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}