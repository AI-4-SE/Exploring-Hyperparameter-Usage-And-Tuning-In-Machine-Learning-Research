{
    "RF_analytical_error.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "muZ",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "covZ",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_80": {
                "variable": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-rho ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "covZ",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "symeig_108": {
                "variable": {
                    "value": "(evals, evecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "covZ + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "w_Tau",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "muAnaV",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NG",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "mus.shape[1]",
                            "Subscript"
                        ],
                        [
                            "mus.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "covAnaV",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NG",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "mus.shape[1]",
                            "Subscript"
                        ],
                        [
                            "mus.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "symeig_135": {
                "variable": {
                    "value": "(evals, evecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "covZ + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "w_Tau",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "symeig_157": {
                "variable": {
                    "value": "(evals, evecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "covZ",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.zeros(2, 2, N, N)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, N)",
                            "Call"
                        ],
                        [
                            "covZ - 1.0 / (2.0 * NG) * torch.einsum('i,j->ij', mu1, mu2)",
                            "BinOp"
                        ],
                        [
                            "zs.t() @ zs / float(zs.shape[0])",
                            "BinOp"
                        ],
                        [
                            "(covZ + covZ.t()) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "w_Tau",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_167": {
                "variable": {
                    "value": "error_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * (ys - preds) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "muAnaV",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NG",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "mus.shape[1]",
                            "Subscript"
                        ],
                        [
                            "mus.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "covAnaV",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NG",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "mus.shape[1]",
                            "Subscript"
                        ],
                        [
                            "mus.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_89": {
                "input": {
                    "value": "off_diag_ana.diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_79": {
                "input": {
                    "value": "x / sqrt(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_90": {
                "input": {
                    "value": "diag_ana",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sigma ** 2 / 2 * (rho * exp * sqrt(2.0 / pi) + (rho * rho + 1) * (1 + rerf(rho)))",
                            "BinOp"
                        ],
                        [
                            "diag_ana - mu_ana * mu_ana",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_112": {
                "equation": {
                    "value": "i,i->i",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "Phi_Tau",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ],
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ],
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_139": {
                "equation": {
                    "value": "i,i->i",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "Phi_Tau",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ],
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ],
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_162": {
                "equation": {
                    "value": "i,i->i",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "Phi_Tau",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ],
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ],
                        [
                            "(Phi @ evecs).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_221": {
                "*size": {
                    "value": "args.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.D * args.alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_98": {
                "equation": {
                    "value": "i,j->ij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "mu1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "muZ[:int(muZ.shape[0] / 2)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "muAnaV[:int(muAnaV.shape[0] / 2)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "ys[sign, clusterID].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_100": {
                "equation": {
                    "value": "i,j->ij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "mu1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Run_Training_AC.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "Fs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((N, N)) / math.sqrt(N)",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "log_fname[:-4] + '_Model_F.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "model.mus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "log_fname[:-4] + '_Model_mus.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "student.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_fname[:-4] + '_weights.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_54": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "784",
                            "Constant"
                        ],
                        [
                            "784",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_50": {
                "*size": {
                    "value": "(N, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "args.prefix + '_weights.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_76": {
                "*size": {
                    "value": "student.fc2.weight.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "include/DataSet_Generation.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "cov[mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "N * N",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "N * N",
                            "BinOp"
                        ]
                    ]
                }
            },
            "symeig_40": {
                "variable": {
                    "value": "(evals[mean], evecs[mean])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cov['mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "mus_Model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "N * N",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "cov[mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "N * N",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "N * N",
                            "BinOp"
                        ]
                    ]
                }
            },
            "symeig_82": {
                "variable": {
                    "value": "(evals[mean], evecs[mean])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cov['mean'] + 1e-05 * torch.eye(N)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "mus_Model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "N * N",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_29": {
                "variable": {
                    "value": "diag[sign]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cov[sign]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "symeig_31": {
                "variable": {
                    "value": "(evals[sign], evecs[sign])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cov[sign]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_83": {
                "input": {
                    "value": "evals['mean'] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_33": {
                "input": {
                    "value": "evals[sign] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "mus_Model[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mu[:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "mus_Model[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mu[5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "cov['mean'] - cov['mean'].t()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_27": {
                "input": {
                    "value": "torch.ones(N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "cov[sign] - cov[sign].t()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_53": {
                "input": {
                    "value": "torch.sqrt(evals['mean'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_100": {
                "input": {
                    "value": "torch.sqrt(evals['mean'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "N * N",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_37": {
                "input": {
                    "value": "torch.sqrt(evals[sign])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "input": {
                    "value": "evals['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_82": {
                "n": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "N * N",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_100": {
                "input": {
                    "value": "evals['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_37": {
                "input": {
                    "value": "evals[sign]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "include/GMM_Model.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, NUM_GAUSSIANS, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_25": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.cos(alphas), torch.sin(alphas))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.cos(alphas), torch.sin(alphas))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(NUM_SAMPLES, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "symeig_120": {
                "variable": {
                    "value": "(Masses, Psis)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Covs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Fs.t() @ self.Fs + 1e-05 * torch.eye(N)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(2, NUM_GAUSSIANS, N, N)",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(NUM_SAMPLES, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "Covs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "Psis",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "Masses",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(NUM_SAMPLES, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "erf_212": {
                "input": {
                    "value": "x / math.sqrt(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_220": {
                "input": {
                    "value": "x / math.sqrt(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_299": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "K",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "student.K",
                            "Attribute"
                        ],
                        [
                            "student.K",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_303": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "K",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "student.K",
                            "Attribute"
                        ],
                        [
                            "student.K",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_85": {
                "variable": {
                    "value": "ran",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.NUM_GAUSSIANS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[NUM_SAMPLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_96": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "[NUM_SAMPLES, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "self.Fs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_136": {
                "variable": {
                    "value": "ran",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.NUM_GAUSSIANS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[NUM_SAMPLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_147": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "[NUM_SAMPLES, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "self.Fs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_191": {
                "variable": {
                    "value": "ran",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.NUM_GAUSSIANS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[NUM_SAMPLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_201": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "[NUM_SAMPLES, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_217": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g(self.fc1(x) / math.sqrt(self.N))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.g(self.fc1(x) / math.sqrt(self.N))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_25": {
                "input": {
                    "value": "alphas",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2.0 * math.pi / NUM_GAUSSIANS * torch.arange(NUM_GAUSSIANS).float()",
                            "BinOp"
                        ],
                        [
                            "2.0 * math.pi / NUM_GAUSSIANS * (torch.arange(NUM_GAUSSIANS).float() + 0.5 * torch.ones(NUM_GAUSSIANS).float())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_25": {
                "input": {
                    "value": "alphas",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2.0 * math.pi / NUM_GAUSSIANS * torch.arange(NUM_GAUSSIANS).float()",
                            "BinOp"
                        ],
                        [
                            "2.0 * math.pi / NUM_GAUSSIANS * (torch.arange(NUM_GAUSSIANS).float() + 0.5 * torch.ones(NUM_GAUSSIANS).float())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_29": {
                "start": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cos_30": {
                "input": {
                    "value": "alphas",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2.0 * math.pi / NUM_GAUSSIANS * torch.arange(NUM_GAUSSIANS).float()",
                            "BinOp"
                        ],
                        [
                            "2.0 * math.pi / NUM_GAUSSIANS * (torch.arange(NUM_GAUSSIANS).float() + 0.5 * torch.ones(NUM_GAUSSIANS).float())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_30": {
                "input": {
                    "value": "alphas",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2.0 * math.pi / NUM_GAUSSIANS * torch.arange(NUM_GAUSSIANS).float()",
                            "BinOp"
                        ],
                        [
                            "2.0 * math.pi / NUM_GAUSSIANS * (torch.arange(NUM_GAUSSIANS).float() + 0.5 * torch.ones(NUM_GAUSSIANS).float())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "self.mus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_51": {
                "variable": {
                    "value": "self.mus[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_91": {
                "*size": {
                    "value": "NUM_SAMPLES",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_142": {
                "*size": {
                    "value": "NUM_SAMPLES",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "symeig_175": {
                "variable": {
                    "value": "(Masses[b][a], Psis[b][a])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Covs[b][a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "NUM_GAUSSIANS",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_61": {
                "input": {
                    "value": "self.mus.reshape(2 * NUM_GAUSSIANS, N)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_114": {
                "n": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_119": {
                "n": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_55": {
                "input": {
                    "value": "self.mus.view(2 * NUM_GAUSSIANS, N)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_117": {
                "input": {
                    "value": "Fs",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1 * torch.eye(N)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_166": {
                "input": {
                    "value": "Fs",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1 * torch.eye(N)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_196": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_163": {
                "n": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_174": {
                "n": {
                    "value": "N",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "model.N",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "784",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "include/Integrals_RELU.py": {
        "torch": {
            "MultivariateNormal_128": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.zeros((2 * NUM_GAUSSIANS, K + 2 * NUM_GAUSSIANS))",
                            "Call"
                        ],
                        [
                            "mmu[np.array([i1, i2, i3])]",
                            "Subscript"
                        ],
                        [
                            "mmu[np.array([i1, i2])]",
                            "Subscript"
                        ],
                        [
                            "mmu[np.array([i1, i2, i3, i4])]",
                            "Subscript"
                        ],
                        [
                            "mmu[np.array([i1])]",
                            "Subscript"
                        ],
                        [
                            "mmu[np.array([i1, i2])]",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "C",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.zeros((2 * NUM_GAUSSIANS, K + 2 * NUM_GAUSSIANS, K + 2 * NUM_GAUSSIANS))",
                            "Call"
                        ],
                        [
                            "CC[np.array([i1, i2, i3])]",
                            "Subscript"
                        ],
                        [
                            "C.T[np.array([i1, i2, i3])].T",
                            "Attribute"
                        ],
                        [
                            "CC[np.array([i1, i2])]",
                            "Subscript"
                        ],
                        [
                            "C.T[np.array([i1, i2])].T",
                            "Attribute"
                        ],
                        [
                            "CC[np.array([i1, i2, i3, i4])]",
                            "Subscript"
                        ],
                        [
                            "C.T[np.array([i1, i2, i3, i4])].T",
                            "Attribute"
                        ],
                        [
                            "CC[np.array([i1])]",
                            "Subscript"
                        ],
                        [
                            "C.T[np.array([i1])].T",
                            "Attribute"
                        ],
                        [
                            "CC[np.array([i1, i2])]",
                            "Subscript"
                        ],
                        [
                            "C.T[np.array([i1, i2])].T",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}