{
    "dee/base_task.py": {
        "torch": {
            "DistributedSampler_423": {
                "variable": {
                    "value": "data_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "convert_to_dataset_func(features)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_209": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not self.setting.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_210": {
                "variable": {
                    "value": "self.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_212": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "self.setting.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_229": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.setting.seed",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RandomSampler_405": {
                "variable": {
                    "value": "data_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "convert_to_dataset_func(features)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "SequentialSampler_407": {
                "variable": {
                    "value": "data_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "convert_to_dataset_func(features)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_410": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "convert_to_dataset_func(features)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_414": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "convert_to_dataset_func(features)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_427": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "convert_to_dataset_func(features)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_431": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "convert_to_dataset_func(features)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.custom_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "total_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(total_info, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_660": {
                "obj": {
                    "value": "store_dict",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{'setting': self.setting.__dict__}",
                            "Dict"
                        ],
                        [
                            "torch.load(cpt_file_path, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "torch.load(cpt_file_path, map_location=self.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cpt_file_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.setting.model_dir, cpt_file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.setting.model_dir, cpt_file_name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_684": {
                "variable": {
                    "value": "store_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cpt_file_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.setting.model_dir, cpt_file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.setting.model_dir, cpt_file_name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_686": {
                "variable": {
                    "value": "store_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cpt_file_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.setting.model_dir, cpt_file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.setting.model_dir, cpt_file_name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "param_opti.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "param_opti.data.new().resize_(*param_opti.data.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_133": {
                "device": {
                    "value": "self.setting.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_231": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.setting.seed",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_351": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.setting.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.setting.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_683": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_357": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_99": {
                "input": {
                    "value": "param_model.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_606": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dee/dee_helper.py": {
        "torch": {
            "tensor_270": {
                "variable": {
                    "value": "self.doc_token_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "doc_token_id_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "variable": {
                    "value": "self.doc_token_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "doc_token_mask_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "variable": {
                    "value": "self.doc_token_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "doc_token_label_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dee/dee_model.py": {
        "torch": {
            "tensor_1073": {
                "variable": {
                    "value": "batch_field_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "span_field_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1 if span_idx in cur_span_idx_set else 0 for span_idx in range(num_spans)]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "doc_event_logps.device",
                            "Attribute"
                        ],
                        [
                            "batch_span_logp.device",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.event_tables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EventTable(event_type, field_types, config.hidden_size) for (event_type, field_types) in self.event_type_fields_pairs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "doc_event_logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "doc_event_logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(doc_event_logps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "none_span_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "init_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "init_tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "batch_span_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "span_context_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "batch_span_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "span_context_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_569": {
                "variable": {
                    "value": "ner_token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ner_token_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ner_token_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ner_token_ids, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_570": {
                "variable": {
                    "value": "ner_token_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ner_token_masks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ner_token_masks, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ner_token_masks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_833": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_837": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_870": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_sent_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_872": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_896": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_ment_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_898": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_922": {
                "variable": {
                    "value": "self.event_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_923": {
                "variable": {
                    "value": "self.field_cls_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_size, 2) for _ in range(self.num_fields)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_929": {
                "variable": {
                    "value": "self.event_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterList_933": {
                "variable": {
                    "value": "self.field_queries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.Tensor(1, self.hidden_size)) for _ in range(self.num_fields)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_983": {
                "variable": {
                    "value": "self.input_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mid_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_984": {
                "variable": {
                    "value": "self.out_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mid_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_991": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_1103": {
                "variable": {
                    "value": "self.event_cls_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.hidden_size, 2) for _ in self.event_type_fields_pairs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_1117": {
                "variable": {
                    "value": "doc_sent_label_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "doc_fea.doc_sent_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "doc_sent_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1182": {
                "variable": {
                    "value": "ner_token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ner_token_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ner_token_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ner_token_ids, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1183": {
                "variable": {
                    "value": "ner_token_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ner_token_masks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ner_token_masks, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ner_token_masks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "doc_mention_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mention_emb_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "doc_event_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "doc_fea.event_type_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "doc_event_logps.device",
                            "Attribute"
                        ],
                        [
                            "batch_span_logp.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_253": {
                "variable": {
                    "value": "doc_event_cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_event_logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(doc_event_logps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "doc_event_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(doc_fea.event_type_labels, device=device, dtype=torch.long, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "class_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.config.neg_field_loss_scaling, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "doc_event_logps.device",
                            "Attribute"
                        ],
                        [
                            "batch_span_logp.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_span_logp.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_271": {
                "variable": {
                    "value": "field_cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_span_logp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_field_pred_logp(event_idx, field_idx, batch_span_emb)",
                            "Call"
                        ],
                        [
                            "event_table(batch_span_emb=batch_span_emb, field_idx=field_idx)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch_span_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_batch_span_label(num_spans, cur_span_idx_set, batch_span_context.device)",
                            "Call"
                        ],
                        [
                            "get_batch_span_label(num_spans, set(), batch_span_context.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "class_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([self.config.neg_field_loss_scaling, 1.0], device=device, dtype=data_type, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "total_cand_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_cand_emb, prev_decode_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_303": {
                "variable": {
                    "value": "total_cand_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_572": {
                "variable": {
                    "value": "ner_token_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ner_token_labels",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "[] if need_label_flag else None",
                            "IfExp"
                        ],
                        [
                            "torch.cat(ner_token_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "[] if need_label_flag else None",
                            "IfExp"
                        ],
                        [
                            "torch.cat(ner_token_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_877": {
                "variable": {
                    "value": "sent_pos_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_elem",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_elem_emb.size(-2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_elem_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_902": {
                "variable": {
                    "value": "mention_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mention_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(mention_type_ids, dtype=torch.long, device=batch_mention_emb.device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_mention_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_953": {
                "variable": {
                    "value": "doc_pred_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_pred_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.event_cls(doc_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_963": {
                "variable": {
                    "value": "span_pred_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_pred_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.field_cls_list[field_idx](batch_span_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_986": {
                "variable": {
                    "value": "self.mid_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Linear(mid_size, mid_size) for _ in range(num_mid_layer - 1))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "cross_entropy_1124": {
                "variable": {
                    "value": "event_cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_sent_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "event_cls(doc_sent_emb)",
                            "Call"
                        ],
                        [
                            "event_cls(doc_sent_emb)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "doc_sent_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "doc_sent_label_mat[:, event_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1185": {
                "variable": {
                    "value": "ner_token_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ner_token_labels",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "[] if need_label_flag else None",
                            "IfExp"
                        ],
                        [
                            "torch.cat(ner_token_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "[] if need_label_flag else None",
                            "IfExp"
                        ],
                        [
                            "torch.cat(ner_token_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_1312": {
                "variable": {
                    "value": "doc_sent_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_sent_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "event_cls(doc_sent_emb)",
                            "Call"
                        ],
                        [
                            "event_cls(doc_sent_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "total_ment_sent_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[doc_mention_emb, doc_sent_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_193": {
                "variable": {
                    "value": "total_ment_sent_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_881": {
                "variable": {
                    "value": "sent_pos_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sent_pos_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(num_elem, dtype=torch.long, device=batch_elem_emb.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.tensor(sent_pos_ids, dtype=torch.long, device=batch_elem_emb.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_elem_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_994": {
                "input": {
                    "value": "self.input_fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_925": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_934": {
                "data": {
                    "value": "torch.Tensor(1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_996": {
                "input": {
                    "value": "mid_fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1104": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "cur_decode_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_decode_context, span_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "prev_decode_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_decode_context, span_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "cur_decode_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_decode_context, span_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_987": {
                "in_features": {
                    "value": "mid_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "dee/dee_task.py": {
        "torch": {
            "Adam_157": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.setting.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dee/ner_model.py": {
        "torch": {
            "log_softmax_408": {
                "variable": {
                    "value": "seq_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(enc_seq_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_416": {
                "variable": {
                    "value": "seq_token_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq_logp.view(-1, num_entities)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "token_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gold_labels.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_entity_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_108": {
                "variable": {
                    "value": "batch_seq_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_seq_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(batch_seq_enc)",
                            "Call"
                        ],
                        [
                            "self.classifier(batch_seq_enc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_192": {
                "variable": {
                    "value": "self.token_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_193": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_sent_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_202": {
                "variable": {
                    "value": "batch_pos_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_token_ids.device",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tag_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_238": {
                "variable": {
                    "value": "self.trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.tag_size, self.tag_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "seq_cur_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seq_token_label, end_token_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_284": {
                "variable": {
                    "value": "seq_cur_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "seq_prev_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_token_label, seq_token_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_291": {
                "variable": {
                    "value": "seq_prev_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_297": {
                "variable": {
                    "value": "gold_trans_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_trans_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trans_mat.unsqueeze(0).unsqueeze(0).expand(seq_len + 1, batch_size, tag_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "seq_cur_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([seq_token_label, end_token_label], dim=0).unsqueeze(-1).unsqueeze(-1).expand(seq_len + 1, batch_size, 1, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_299": {
                "variable": {
                    "value": "gold_trans_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_trans_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(seq_trans_score, 2, seq_cur_label)",
                            "Call"
                        ],
                        [
                            "torch.gather(gold_trans_score, 3, seq_prev_label)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "seq_prev_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([start_token_label, seq_token_label], dim=0).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_302": {
                "variable": {
                    "value": "gold_emit_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_emit_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.hidden2tag(seq_token_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "seq_token_label.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "batch_best_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "best_tag_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[best_tag]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_427": {
                "data": {
                    "value": "batch_metrics",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "produce_ner_batch_metrics(seq_logits, label_ids, input_masks)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "seq_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_114": {
                "variable": {
                    "value": "ner_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_logp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_seq_logp.view(-1, batch_seq_logp.size(-1))",
                            "Call"
                        ],
                        [
                            "batch_seq_logp.view(-1, batch_seq_logp.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label_ids.view(-1)",
                            "Call"
                        ],
                        [
                            "label_ids.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_entity_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_168": {
                "variable": {
                    "value": "batch_seq_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_seq_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(batch_seq_enc)",
                            "Call"
                        ],
                        [
                            "self.classifier(batch_seq_enc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_342": {
                "variable": {
                    "value": "best_tag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_tag_bp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reversed(backpointers)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "best_tag",
                    "type": "Call",
                    "possible_values": [
                        [
                            "best_tag.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(last_tag_bp, 1, best_tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_398": {
                "input": {
                    "value": "torch.sum(torch.exp(batch_logit - batch_broadcast), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_89": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq_logits[input_masks, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "batch_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label_ids[input_masks]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nll_loss_174": {
                "variable": {
                    "value": "ner_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_logp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_seq_logp.view(-1, batch_seq_logp.size(-1))",
                            "Call"
                        ],
                        [
                            "batch_seq_logp.view(-1, batch_seq_logp.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label_ids.view(-1)",
                            "Call"
                        ],
                        [
                            "label_ids.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_238": {
                "*size": {
                    "value": "self.tag_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tag_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_398": {
                "input": {
                    "value": "torch.exp(batch_logit - batch_broadcast)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_78": {
                "variable": {
                    "value": "seq_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(enc_seq_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "seq_pred_gold_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seq_pred, seq_gold, seq_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_398": {
                "input": {
                    "value": "batch_logit - batch_broadcast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_92": {
                "input": {
                    "value": "seq_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(enc_seq_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dee/ner_task.py": {
        "torch": {
            "tensor_280": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "all_input_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_masks for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "variable": {
                    "value": "all_seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.seq_len for f in ner_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_286": {
                "variable": {
                    "value": "ner_tensor_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dee/transformer.py": {
        "torch": {
            "softmax_167": {
                "variable": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_98": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_183": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_216": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_225": {
                "variable": {
                    "value": "self.lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_237": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_241": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_241": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_242": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2) * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_244": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_245": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_53": {
                "input": {
                    "value": "self.proj(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "ndarray": {
                    "value": "subseq_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_164": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "input": {
                    "value": "p_attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_263": {
                "*args": {
                    "value": "Embeddings(d_model, src_vocab)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "*args": {
                    "value": "Embeddings(d_model, tgt_vocab)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_219": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_242": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "run_dee_task.py": {
        "torch": {
            "is_initialized_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}