{
    "EMoR/EMoR.py": {
        "sklearn": {
            "mean_squared_error_210": {
                "variable": {
                    "value": "rmse",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "color_samples_rgb[:, channel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "F_est(color_samples_raw[:, channel])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "EMoR/test_EMoR.py": {
        "torch": {
            "from_numpy_63": {
                "variable": {
                    "value": "E_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_read_curve(lines[k:k + 256])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "fs_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.loadtxt('CRF_SonyA7S2_5.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "img_raw_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw.postprocess(use_camera_wb=True, gamma=(1, 1), no_auto_bright=True, output_bps=16) / 65535.0",
                            "BinOp"
                        ],
                        [
                            "(np.clip(img_raw, 0, 1) * 255).astype(np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_65": {
                "variable": {
                    "value": "img_raw_th",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset/__init__.py": {
        "torch": {}
    },
    "dataset/lmdb_dataset.py": {
        "torch": {}
    },
    "dataset/sid_dataset.py": {
        "torch": {}
    },
    "dataset/torchdata.py": {
        "torch": {}
    },
    "dataset/transforms.py": {
        "torch": {
            "is_tensor_31": {
                "obj": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "engine.py": {
        "torch": {
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/ELD_model.py": {
        "torch": {
            "clamp_158": {
                "variable": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(predict, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(predict, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "predict.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dot_164": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predict[source != 1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "source_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source[source != 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dot_165": {
                "variable": {
                    "value": "den",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predict[source != 1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "pred_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predict[source != 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_356": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(predict, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_400": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_499": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.opt.model_path",
                            "Attribute"
                        ],
                        [
                            "util.get_model_list(model.save_dir, 'model', epoch=resume_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_506": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.opt.model_path",
                            "Attribute"
                        ],
                        [
                            "util.get_model_list(model.save_dir, 'model', epoch=resume_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/arch/Unet.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_13": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_30": {
                "variable": {
                    "value": "self.upv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv6_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv6_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_34": {
                "variable": {
                    "value": "self.upv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv7_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv7_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_38": {
                "variable": {
                    "value": "self.upv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv8_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv8_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "variable": {
                    "value": "self.upv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv9_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv9_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv10_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "up6",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up6, conv4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "up7",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up7, conv3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "up8",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up8, conv2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "up9",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up9, conv1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_103": {
                "variable": {
                    "value": "outt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.2 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/arch/__init__.py": {
        "torch": {}
    },
    "models/base_model.py": {
        "torch": {
            "save_66": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, 'model' + '_%03d_%08d.pt' % (epoch, iterations))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'model' + '_' + label + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/losses.py": {
        "torch": {
            "ModuleList_7": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "L1Loss_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "LambdaLR_91": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "orthogonal_50": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_93": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "orthogonal_52": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_54": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_97": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "util.parse_args(opt.milestones)",
                    "type": "Call",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "options/eld/base_options.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "self.opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_45": {
                "device": {
                    "value": "self.opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "test_ELD.py": {
        "torch": {
            "DataLoader_38": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test_SID.py": {
        "torch": {
            "DataLoader_34": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_real.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ELDTrainDataset(target_dataset=target_data, input_datasets=[input_data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_syn.py": {
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ELDTrainDataset(target_dataset=target_data, input_datasets=[input_data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "util/process.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images * ccms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "lin_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bayer_images[:, 0, ...], torch.mean(bayer_images[:, [1, 3], ...], dim=1), bayer_images[:, 2, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "bayer_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bayer_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_gains(bayer_images, wbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(bayer_images, min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "images[:, :, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "binning(bayer_images)",
                            "Call"
                        ],
                        [
                            "apply_ccms(images, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "gamma_compression(images, gamma)",
                            "Call"
                        ],
                        [
                            "camera_response_function(images, CRF)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "images[:, :, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "binning(bayer_images)",
                            "Call"
                        ],
                        [
                            "apply_ccms(images, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "gamma_compression(images, gamma)",
                            "Call"
                        ],
                        [
                            "camera_response_function(images, CRF)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(raw.camera_whitebalance)",
                            "Call"
                        ],
                        [
                            "wb / wb[1]",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(wb).float().to(packed_raw.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wb).float()",
                            "Call"
                        ],
                        [
                            "np.array(raw.camera_whitebalance)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wb[None]).float().to(packed_raw.device)",
                            "Call"
                        ],
                        [
                            "np.array(raw.camera_whitebalance)",
                            "Call"
                        ],
                        [
                            "wb.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cam2rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw.rgb_camera_matrix[:3, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(cam2rgb).float().to(packed_raw.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ccm).float()",
                            "Call"
                        ],
                        [
                            "raw.rgb_camera_matrix[:3, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(cam2rgb[None]).float().to(packed_raw.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "packed_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "packed_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(packed_raw).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(packed_raw).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(raw.camera_whitebalance)",
                            "Call"
                        ],
                        [
                            "wb / wb[1]",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(wb).float().to(packed_raw.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wb).float()",
                            "Call"
                        ],
                        [
                            "np.array(raw.camera_whitebalance)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wb[None]).float().to(packed_raw.device)",
                            "Call"
                        ],
                        [
                            "np.array(raw.camera_whitebalance)",
                            "Call"
                        ],
                        [
                            "wb.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ccm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw.rgb_camera_matrix[:3, :3].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wb[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cam2rgb[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_read_curve(lines[k:k + 256])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(E).repeat(3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "fs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.loadtxt(join('EMoR', 'CRF_SonyA7S2_5.txt'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(fs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "packed_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "packed_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(packed_raw).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(packed_raw).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_36": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "images[:, :, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "binning(bayer_images)",
                            "Call"
                        ],
                        [
                            "apply_ccms(images, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "gamma_compression(images, gamma)",
                            "Call"
                        ],
                        [
                            "camera_response_function(images, CRF)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_38": {
                "input": {
                    "value": "(outs * 255).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_82": {
                "input": {
                    "value": "(outs * 255).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "bayer_images[:, [1, 3], ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "mean_75": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_75": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vis_data.py": {
        "torch": {
            "DataLoader_65": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ELDTrainDataset(target_dataset=target_data, input_datasets=[input_data], size=10, augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "datasets.worker_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}