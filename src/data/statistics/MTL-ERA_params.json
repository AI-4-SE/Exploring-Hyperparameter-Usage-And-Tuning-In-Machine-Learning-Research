{
    "util/metrics.py": {
        "sklearn": {
            "confusion_matrix_80": {
                "variable": {
                    "value": "conf_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "np.arange(n_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "val/validate_model_TUM.py": {
        "sklearn": {
            "average_precision_score_90": {
                "variable": {
                    "value": "nmn",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "(label_list == cls).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred_list[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dir_out + outputfile.replace('.txt', '.pt')",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "val/validate_model_UW.py": {
        "sklearn": {
            "average_precision_score_90": {
                "variable": {
                    "value": "nmn",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "(label_list == cls).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred_list[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_268": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dir_out + outputfile.replace('.txt', '.pt')",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "vis/plotCM.py": {
        "sklearn": {
            "confusion_matrix_24": {
                "variable": {
                    "value": "conf_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "lbllist.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predlist.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_9": {
                "variable": {
                    "value": "predlist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_10": {
                "variable": {
                    "value": "lbllist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_17": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "predlist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[predlist, preds.view(-1).cpu()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "lbllist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lbllist, classes.view(-1).cpu()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "vis/plotRibbons.py": {
        "sklearn": {
            "mean_squared_error_81": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "P_test[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "config_files/config_TUM.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "config_files/config_UW.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses/loss_TUM.py": {
        "torch": {
            "Parameter_45": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(loss_fn)).fill_(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(loss_fn)).fill_(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "losses/loss_UW.py": {
        "torch": {
            "Parameter_45": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(loss_fn)).fill_(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(loss_fn)).fill_(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "getAs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_13": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels * A.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "variable": {
                    "value": "self.s_gcn_networks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(s_gcn(in_channels, 64, spatial_kernel_size, 1, residual=False), s_gcn(64, 64, spatial_kernel_size, 1), s_gcn(64, 64, spatial_kernel_size, 1), s_gcn(64, 64, spatial_kernel_size, 1), s_gcn(64, 128, spatial_kernel_size, 2), s_gcn(128, 128, spatial_kernel_size, 1), s_gcn(128, 128, spatial_kernel_size, 1), s_gcn(128, 256, spatial_kernel_size, 2), s_gcn(256, 256, spatial_kernel_size, 1), s_gcn(256, 256, spatial_kernel_size, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_27": {
                "variable": {
                    "value": "self.adaptpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(15, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv,kvw->nctw",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_MT_TUM.py": {
        "torch": {
            "relu_75": {
                "input": {
                    "value": "x.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "input": {
                    "value": "self.ln1(x_class.permute(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_77": {
                "input": {
                    "value": "self.ln2(torch.cat([x, F.softmax(classification_score)], dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_77": {
                "input": {
                    "value": "classification_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.l_classification(torch.tanh(self.ln1(x_class.permute(0, 2, 1))))",
                            "Call"
                        ],
                        [
                            "self.l_classification(F.relu(self.ln1(x_class.permute(0, 2, 1))))",
                            "Call"
                        ],
                        [
                            "self.l_classification(torch.relu(self.ln1(x_class.permute(0, 2, 1))))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_MT_UW.py": {
        "torch": {
            "relu_74": {
                "input": {
                    "value": "self.ln1(x_class.permute(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "input": {
                    "value": "classification_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.l_classification(torch.tanh(self.ln1(x_class.permute(0, 2, 1))))",
                            "Call"
                        ],
                        [
                            "self.l_classification(F.relu(self.ln1(x_class.permute(0, 2, 1))))",
                            "Call"
                        ],
                        [
                            "self.l_classification(torch.relu(self.ln1(x_class.permute(0, 2, 1))))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/tcn.py": {
        "torch": {
            "weight_norm_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(n_inputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "weight_norm_24": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(n_outputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.outwork",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mayers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "in_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool1d_77": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_88": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "run/GCNEDTCN_TUM.py": {
        "torch": {
            "Adam_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "MT_losses.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(lr)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run/GCNEDTCN_UW.py": {
        "torch": {
            "Adam_150": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "MT_losses.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(lr)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "util/Uwdatareader_TUM.py": {
        "torch": {}
    },
    "util/Uwdatareader_UW.py": {
        "torch": {}
    },
    "vis/visualization.py": {
        "torch": {}
    },
    "vis/visualization_TUM.py": {
        "torch": {}
    }
}