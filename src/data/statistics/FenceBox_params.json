{
    "eot_defense.py": {
        "tensorflow": {
            "to_float_14": {
                "variable": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scale * height, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "299",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "crop_and_resize_19": {
                "variable": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "boxes": {
                    "value": "[[start_y, start_x, start_y + frac, start_x + frac]]",
                    "type": "List",
                    "possible_values": []
                },
                "box_ind": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[crop_size, crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "final_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize([x], boxes=[[start_y, start_x, start_y + frac, start_x + frac]], box_ind=[0], crop_size=[crop_size, crop_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_26": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_28": {
                "variable": {
                    "value": "rescaled",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "[[0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "box_indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[rnd, rnd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_35": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rescaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(data, [[0, 0, 1, 1]], [0], [rnd, rnd])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(data, [[0, 0, 1, 1]], [0], [rnd, rnd])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "variable": {
                    "value": "final_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(rescaled, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], constant_values=0)",
                            "Call"
                        ],
                        [
                            "tf.pad(rescaled, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], constant_values=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_47": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform((), -shift_limit, shift_limit, dtype=tf.float32) * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform((), -shift_limit, shift_limit, dtype=tf.float32) * height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_49": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scale * height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_52": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.convert_to_tensor([nheight, nwidth], dtype=tf.int32), (1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roll_55": {
                "variable": {
                    "value": "mid_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random_uniform((), -shift_limit, shift_limit, dtype=tf.float32) * width, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_56": {
                "variable": {
                    "value": "shifted_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mid_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.roll(img, shift=dx, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random_uniform((), -shift_limit, shift_limit, dtype=tf.float32) * height, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_62": {
                "variable": {
                    "value": "scaled_img",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "rotated_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.rotate(shifted_img, angle * math.pi / 180, interpolation='BILINEAR')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.reshape(tf.convert_to_tensor([nheight, nwidth], dtype=tf.int32), (1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_63": {
                "variable": {
                    "value": "final_img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "scale > 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf_rand_cropping(scaled_img, length)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf_rand_padding(scaled_img, length)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "round_77": {
                "variable": {
                    "value": "upflag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform((1,), 0, 1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_78": {
                "variable": {
                    "value": "leftflag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform((1,), 0, 1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_87": {
                "variable": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_91": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "x_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width // num_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "range_92": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "y_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "height // num_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_93": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "listvec_x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(tf.round(listvec_x), 0, 298)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_104": {
                "variable": {
                    "value": "map_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(299, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reverse_105": {
                "variable": {
                    "value": "xx2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "298 * tf.ones_like(xx, dtype=tf.int32) - xx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_106": {
                "variable": {
                    "value": "map_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2[:, :299]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(299, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_107": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "listvec_y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_117": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(tf.round(listvec_y), 0, 298)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_118": {
                "variable": {
                    "value": "map_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(yy)[1:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, 299)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reverse_119": {
                "variable": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "298 * tf.ones_like(yy, dtype=tf.int32) - yy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_120": {
                "variable": {
                    "value": "map_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(yy2)[:299, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, 299)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cond_121": {
                "variable": {
                    "value": "index_x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "leftflag[0] > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.identity(map_x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(map_x2)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_122": {
                "variable": {
                    "value": "index_y",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "upflag[0] > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.identity(map_y)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(map_y2)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[index_y, index_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_124": {
                "variable": {
                    "value": "x_gd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([index_y, index_x], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "crop_and_resize_145": {
                "variable": {
                    "value": "croped",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "[img]",
                    "type": "List",
                    "possible_values": []
                },
                "boxes": {
                    "value": "[[y1 / 299, x1 / 299, y2 / 299, x2 / 299]]",
                    "type": "List",
                    "possible_values": []
                },
                "box_ind": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[299, 299]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "variable": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "croped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize([img], boxes=[[y1 / 299, x1 / 299, y2 / 299, x2 / 299]], box_ind=[0], crop_size=[299, 299])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_161": {
                "variable": {
                    "value": "rescaled",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "[[0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "box_indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[rnd, rnd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_168": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rescaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(data, [[0, 0, 1, 1]], [0], [rnd, rnd])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(data, [[0, 0, 1, 1]], [0], [rnd, rnd])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_170": {
                "variable": {
                    "value": "final_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(rescaled, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], constant_values=0)",
                            "Call"
                        ],
                        [
                            "tf.pad(rescaled, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], constant_values=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_96": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_98": {
                "variable": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "end > width",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cast(width, tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : prev + tf.cast(x_step, tf.float32) * xstep[i]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_100": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "end > width",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : end",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "listvec_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[listvec_x, tf.reshape(tf.linspace(prev, cur, end - start), (1, -1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ys[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_112": {
                "variable": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "end > width",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cast(height, tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : prev + tf.cast(y_step, tf.float32) * ystep[i]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_114": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "end > width",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : end",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "listvec_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[listvec_y, tf.reshape(tf.linspace(prev, cur, end - start), (1, -1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "tf.convert_to_tensor([nheight, nwidth], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_83": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "299",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "299",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_103": {
                "t": {
                    "value": "tf.round(listvec_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "298",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_117": {
                "t": {
                    "value": "tf.round(listvec_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "298",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_52": {
                "value": {
                    "value": "[nheight, nwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_103": {
                "x": {
                    "value": "listvec_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((1, 1))",
                            "Call"
                        ],
                        [
                            "tf.concat([listvec_x, tf.reshape(tf.linspace(prev, cur, end - start), (1, -1))], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_111": {
                "x": {
                    "value": "ys[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_117": {
                "x": {
                    "value": "listvec_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((1, 1))",
                            "Call"
                        ],
                        [
                            "tf.concat([listvec_y, tf.reshape(tf.linspace(prev, cur, end - start), (1, -1))], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "a": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.clip_by_value(tf.round(listvec_y), 0, 298), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_120": {
                "a": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reverse(298 * tf.ones_like(yy, dtype=tf.int32) - yy, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_121": {
                "input": {
                    "value": "map_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(xx2[:, :299], (299, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_122": {
                "input": {
                    "value": "map_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.transpose(yy2)[:299, :], (1, 299))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_98": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "299",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "tf.linspace(prev, cur, end - start)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_105": {
                "input": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.clip_by_value(tf.round(listvec_x), 0, 298), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "299",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "tf.linspace(prev, cur, end - start)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_119": {
                "input": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.clip_by_value(tf.round(listvec_y), 0, 298), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_101": {
                "start": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ],
                        [
                            "cur",
                            "variable"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ],
                        [
                            "cur",
                            "variable"
                        ]
                    ]
                },
                "stop": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(end > width, lambda : tf.cast(width, tf.float32), lambda : prev + tf.cast(x_step, tf.float32) * xstep[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(end > width, lambda : tf.cast(height, tf.float32), lambda : prev + tf.cast(y_step, tf.float32) * ystep[i])",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "end - start",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_115": {
                "start": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ],
                        [
                            "cur",
                            "variable"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ],
                        [
                            "cur",
                            "variable"
                        ]
                    ]
                },
                "stop": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(end > width, lambda : tf.cast(width, tf.float32), lambda : prev + tf.cast(x_step, tf.float32) * xstep[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(end > width, lambda : tf.cast(height, tf.float32), lambda : prev + tf.cast(y_step, tf.float32) * ystep[i])",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "end - start",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_99": {
                "x": {
                    "value": "x_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width // num_steps",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_113": {
                "x": {
                    "value": "y_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "height // num_steps",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "inceptionv3.py": {
        "tensorflow": {
            "argmax_46": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_30": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "subtract_31": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_32": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_29": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "NewCheckpointReader_40": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_51": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "curr_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "saved_var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}