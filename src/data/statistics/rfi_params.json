{
    "examples/chains/test_samplers.py": {
        "sklearn": {
            "LinearRegression_25": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_squared_error_28": {
                "variable": {
                    "value": "risk",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/cnf_thesis/real_pseudoreal_dags/rfi_experiments.py": {
        "sklearn": {
            "train_test_split_76": {
                "variable": {
                    "value": "(data_train, data_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.data.test_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.data.split_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StandardScaler_72": {
                "variable": {
                    "value": "standard_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**args.data.normalise_params",
                    "type": "",
                    "possible_values": []
                }
            },
            "StandardScaler_74": {
                "variable": {
                    "value": "standard_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Identity_128": {
                "variable": {
                    "value": "inputs_noise_nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "variable": {
                    "value": "inputs_noise_nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/cnf_thesis/real_pseudoreal_dags/sage_experiment.py": {
        "sklearn": {
            "train_test_split_71": {
                "variable": {
                    "value": "(data_train, data_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.data.test_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.data.split_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StandardScaler_67": {
                "variable": {
                    "value": "standard_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**args.data.normalise_params",
                    "type": "",
                    "possible_values": []
                }
            },
            "StandardScaler_69": {
                "variable": {
                    "value": "standard_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/cnf_thesis/sensetive/experiment.py": {
        "sklearn": {
            "train_test_split_58": {
                "variable": {
                    "value": "(train_df, test_df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data_df",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.data.test_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.data.split_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KBinsDiscretizer_39": {
                "variable": {
                    "value": "discretizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_bins": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "encode": {
                    "value": "ordinal",
                    "type": "str",
                    "possible_values": []
                },
                "strategy": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StandardScaler_55": {
                "variable": {
                    "value": "standard_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dedact_arxiv/adult_simulations.py": {
        "sklearn": {
            "LinearRegression_17": {
                "variable": {
                    "value": "reg_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dedact_arxiv/psa_example.py": {
        "sklearn": {
            "LinearRegression_16": {
                "variable": {
                    "value": "reg_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_squared_error_51": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "mod_predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "r2_score_52": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "mod_predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/misunderstanding_conditional/pitfall_example.py": {
        "sklearn": {
            "LinearRegression_17": {
                "variable": {
                    "value": "reg_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/test_explainer.py": {
        "sklearn": {
            "LinearRegression_16": {
                "variable": {
                    "value": "reg_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_squared_error_51": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "mod_predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "r2_score_52": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "mod_predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/test_sequential.py": {
        "sklearn": {}
    },
    "src/rfi/backend/causality/sem.py": {
        "sklearn": {
            "GaussianProcessRegressor_352": {
                "variable": {
                    "value": "gp",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "RBF(length_scale=self.bandwidth)",
                    "type": "Call",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "RBF_352": {
                "length_scale": {
                    "value": "self.bandwidth",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_like_124": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([value])",
                            "Call"
                        ],
                        [
                            "value.reshape(-1, context_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([value])",
                            "Call"
                        ],
                        [
                            "value.reshape(-1, context_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_387": {
                "variable": {
                    "value": "cond_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "random_effect",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._random_function(node, parents_context)",
                            "Call"
                        ],
                        [
                            "self._random_function(node, parents_context)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "self.model[node]['noise_std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_472": {
                "variable": {
                    "value": "log_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parent_values.sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "[self.model[node]['value'] for node in self.dag.var_names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_269": {
                "loc": {
                    "value": "linear_comb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "linear_comb + parents_context[par] * torch.tensor(self.model[node]['coeff'][par])",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "self.model[node]['noise_std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "data": {
                    "value": "np.linalg.inv(A) @ np.diag(noise_var) @ np.linalg.inv(A).T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "*size": {
                    "value": "(len(self.dag.var_names),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_302": {
                "loc": {
                    "value": "self.joint_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.joint_cov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "node_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gp.sample_y(parent_values, random_state=seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_355": {
                "variable": {
                    "value": "node_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "normalisation_constant",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "normalisation_constant",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.children_log_prob(node, sampled_value, global_context).exp().mean(0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(normalisation_constant)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_253": {
                "loc": {
                    "value": "self.joint_mean[node_ind].item()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(self.joint_cov[node_ind, node_ind]).item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_350": {
                "tensors": {
                    "value": "parent_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{par_node: self.model[par_node]['value'] for par_node in self.model[node]['parents']}",
                            "DictComp"
                        ],
                        [
                            "{par_node: global_context[par_node] for par_node in self.model[node]['parents']}",
                            "DictComp"
                        ],
                        [
                            "collections.OrderedDict([(par_node, parent_values[par_node]) for par_node in self.model[node]['parents']])",
                            "Call"
                        ],
                        [
                            "list(parent_values.values())",
                            "Call"
                        ],
                        [
                            "torch.stack(parent_values).T",
                            "Attribute"
                        ],
                        [
                            "[parents_context[par_node] for par_node in self.model[node]['parents']]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(parent_values).T if len(parent_values) > 0 else torch.ones((1, 1))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "node_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gp.sample_y(parent_values, random_state=seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_377": {
                "variable": {
                    "value": "node_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "self.model[node][stacked_random_effects]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[old_random_effects, node_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "self.model[node][stacked_parent_values]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[old_parent_values, parent_values]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Laplace_432": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.model[node]['noise_std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_466": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "HalfNormal_474": {
                "scale": {
                    "value": "self.model[node]['noise_std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_102": {
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "old_log_prob(value)",
                            "Call"
                        ],
                        [
                            "self.parents_conditional_distribution(node, parents_context).log_prob(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_171": {
                "seed": {
                    "value": "mc_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isinf_201": {
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "old_log_prob(value)",
                            "Call"
                        ],
                        [
                            "self.parents_conditional_distribution(node, parents_context).log_prob(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_253": {
                "input": {
                    "value": "self.joint_cov[node_ind, node_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "data": {
                    "value": "self.model[node]['interpolator'](parent_values.squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_466": {
                "tensors": {
                    "value": "parent_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{par_node: self.model[par_node]['value'] for par_node in self.model[node]['parents']}",
                            "DictComp"
                        ],
                        [
                            "{par_node: global_context[par_node] for par_node in self.model[node]['parents']}",
                            "DictComp"
                        ],
                        [
                            "collections.OrderedDict([(par_node, parent_values[par_node]) for par_node in self.model[node]['parents']])",
                            "Call"
                        ],
                        [
                            "list(parent_values.values())",
                            "Call"
                        ],
                        [
                            "torch.stack(parent_values).T",
                            "Attribute"
                        ],
                        [
                            "[parents_context[par_node] for par_node in self.model[node]['parents']]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(parent_values).T if len(parent_values) > 0 else torch.ones((1, 1))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "data": {
                    "value": "self.model[node]['coeff'][par]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/rfi/backend/cnf/cnf_estimator.py": {
        "sklearn": {
            "OneHotEncoder_120": {
                "variable": {
                    "value": "self.context_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop": {
                    "value": "if_binary",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "OneHotEncoder_121": {
                "variable": {
                    "value": "self.inputs_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop": {
                    "value": "if_binary",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_178": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(train_inputs, train_context)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(train_inputs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size if self.batch_size is not None else len(train_data)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_241": {
                "variable": {
                    "value": "transforms_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_175": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_177": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_231": {
                "input": {
                    "value": "self.inputs_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_250": {
                "*size": {
                    "value": "len(context)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/rfi/backend/estimator.py": {
        "sklearn": {
            "OneHotEncoder_48": {
                "variable": {
                    "value": "self.context_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop": {
                    "value": "if_binary",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "OneHotEncoder_49": {
                "variable": {
                    "value": "self.inputs_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KFold_191": {
                "variable": {
                    "value": "splitter",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Adam_73": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in self.named_parameters() if not any((nd in n for nd in no_decay))], 'weight_decay': weight_decay}, {'params': [p for (n, p) in self.named_parameters() if any((nd in n for nd in no_decay))], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32, device=self.device).reshape(-1, self.inputs_size)",
                            "Call"
                        ],
                        [
                            "(inputs - self.inputs_mean) / self.inputs_std",
                            "BinOp"
                        ],
                        [
                            "inputs * self.inputs_std + self.inputs_mean",
                            "BinOp"
                        ],
                        [
                            "self.inputs_enc.transform(inputs)",
                            "Call"
                        ],
                        [
                            "self.inputs_enc.inverse_transform(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.inputs_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(context, dtype=torch.float32, device=self.device).reshape(-1, self.context_size)",
                            "Call"
                        ],
                        [
                            "context * self.context_std + self.context_mean",
                            "BinOp"
                        ],
                        [
                            "np.concatenate([context[:, self.cont_context], self.context_enc.transform(context[:, self.cat_context])], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.context_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/rfi/samplers/ensemble.py": {
        "sklearn": {
            "RandomForestClassifier_59": {
                "variable": {
                    "value": "rf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomizedSearchCV_60": {
                "variable": {
                    "value": "rf_random",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "rf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ]
                    ]
                },
                "param_distributions": {
                    "value": "param_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'bootstrap': [True], 'criterion': ['entropy'], 'max_depth': [80, 90, 100, 110], 'max_features': max_features, 'min_samples_leaf': [5, 10, 50, 100], 'min_samples_split': [5, 10, 50, 100], 'n_estimators': [100, 200, 300, 1000]}",
                            "Dict"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "scoring": {
                    "value": "neg_log_loss",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_72": {
                "variable": {
                    "value": "pred_proba",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "model.predict_proba(eval_context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_73": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_proba",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(model.predict_proba(eval_context))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_73": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_non_gaussian_estimation.py": {
        "sklearn": {
            "load_boston_40": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_43": {
                "variable": {
                    "value": "(y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_boston_73": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_76": {
                "variable": {
                    "value": "(y_train, y_test, X_train, X_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_100": {
                "variable": {
                    "value": "(data_train, data_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_moons_145": {
                "variable": {
                    "value": "(y, X)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_146": {
                "variable": {
                    "value": "(y_train, y_test, X_train, X_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_moons_99": {
                "n_samples": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_detect_anomaly_26": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/rfi/backend/categorical/categorical_estimator.py": {
        "torch": {
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/rfi/backend/cnf/context_embedding.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_32": {
                "module": {
                    "value": "nn.Linear(input_units, transform.n_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_34": {
                "module": {
                    "value": "nn.Linear(input_units, hidden_units[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_37": {
                "module": {
                    "value": "nn.Linear(hidden_units[-1], transform.n_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "transform.n_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "input_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "hidden_units[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "transform.n_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/rfi/backend/cnf/transforms.py": {
        "torch": {
            "log_64": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(alpha_hat) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_76": {
                "variable": {
                    "value": "r_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs - self.gamma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "r_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_104": {
                "variable": {
                    "value": "z_min_gamma_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_min_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z - self.gamma",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "z_min_gamma_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "total_logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0] if context.dim() == 2 else context.shape[:2]",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty((inputs_size,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "alpha_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty((1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "beta_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty((1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1, inputs_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones((1, inputs_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_150": {
                "input": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "beta_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.empty((1,)))",
                            "Call"
                        ],
                        [
                            "context[:, 1:2]",
                            "Subscript"
                        ],
                        [
                            "context[:, :, 1:2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_80": {
                "input": {
                    "value": "1 + alpha * beta * h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "(len(inputs),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "(len(inputs),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "*size": {
                    "value": "(len(inputs),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "*size": {
                    "value": "(len(inputs),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_31": {
                "*size": {
                    "value": "(inputs_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_32": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_64": {
                "input": {
                    "value": "alpha_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.empty((1,)))",
                            "Call"
                        ],
                        [
                            "context[:, 0:1]",
                            "Subscript"
                        ],
                        [
                            "context[:, :, 0:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "det",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(alpha + alpha * beta - z_min_gamma_norm) ** 2 + 4 * alpha * z_min_gamma_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "(1, inputs_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_126": {
                "*size": {
                    "value": "(1, inputs_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_144": {
                "input": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context[:, 0:self.inputs_size]",
                            "Subscript"
                        ],
                        [
                            "context[:, :, 0:self.inputs_size]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/rfi/backend/gaussian/gaussian_estimator.py": {
        "torch": {
            "Normal_186": {
                "loc": {
                    "value": "torch.tensor(mu).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(self.Sigma.flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_194": {
                "loc": {
                    "value": "torch.tensor(mu).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.tensor(self.Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "self.Sigma.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "data": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mu_part + mu_part2[:, j]",
                            "BinOp"
                        ],
                        [
                            "(self.mu_part + mu_part2).flatten()",
                            "Call"
                        ],
                        [
                            "self.mu_part.reshape((-1, 1)) + mu_part2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_194": {
                "data": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mu_part + mu_part2[:, j]",
                            "BinOp"
                        ],
                        [
                            "(self.mu_part + mu_part2).flatten()",
                            "Call"
                        ],
                        [
                            "self.mu_part.reshape((-1, 1)) + mu_part2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_136": {
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "data": {
                    "value": "quantiles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quantiles.flatten()",
                            "Call"
                        ],
                        [
                            "(quantiles - minv + eps) / (maxv - minv)",
                            "BinOp"
                        ],
                        [
                            "qs_cln",
                            "Name"
                        ],
                        [
                            "quantiles * (1 - eps)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/rfi/backend/goodness_of_fit.py": {
        "torch": {
            "tensor_48": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[value]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "test_df.loc[:, node]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_71": {
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(data_log_p - log_mixture) * data_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(model_log_p - log_mixture) * model_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(data_log_p - model_log_p) * data_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(torch.sqrt(data_log_p.exp()) - torch.sqrt(model_log_p.exp())) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_88": {
                "input": {
                    "value": "torch.stack([data_log_p, model_log_p])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_90": {
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(data_log_p - log_mixture) * data_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(model_log_p - log_mixture) * model_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(data_log_p - model_log_p) * data_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(torch.sqrt(data_log_p.exp()) - torch.sqrt(model_log_p.exp())) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_96": {
                "input": {
                    "value": "torch.stack([data_log_p, model_log_p])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_98": {
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(data_log_p - log_mixture) * data_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(model_log_p - log_mixture) * model_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(data_log_p - model_log_p) * data_log_p.exp()",
                            "BinOp"
                        ],
                        [
                            "(torch.sqrt(data_log_p.exp()) - torch.sqrt(model_log_p.exp())) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_88": {
                "tensors": {
                    "value": "[data_log_p, model_log_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_96": {
                "tensors": {
                    "value": "[data_log_p, model_log_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_69": {
                "input": {
                    "value": "model_log_p.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/rfi/backend/mdn/mdn_estimator.py": {
        "torch": {
            "DataLoader_172": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(train_inputs, train_context)",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(train_inputs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size if self.batch_size is not None else len(train_data)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "logsumexp_224": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi.probs.log() + loglik.sum(dim=2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_262": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi.sample((num_samples,)).unsqueeze(-1) * normal.sample((num_samples,))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(context_size, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty((n_components, inputs_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty((n_components, inputs_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_44": {
                "variable": {
                    "value": "(mean, log_std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.network(context)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "params.shape[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mean.split(mean.shape[1] // self.n_components, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_std.split(log_std.shape[1] // self.n_components, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_49": {
                "loc": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(self.log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(context_size, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty((n_components,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "OneHotCategorical_71": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_169": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_171": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_49": {
                "input": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MixtureSameFamily_238": {
                "mixture_distribution": {
                    "value": "pi._categorical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "component_distribution": {
                    "value": "Independent(normal, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "context_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_size",
                            "Name"
                        ],
                        [
                            "context_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ELU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_size",
                            "Name"
                        ],
                        [
                            "context_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * inputs_size * n_components",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "(n_components, inputs_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_35": {
                "*size": {
                    "value": "(n_components, inputs_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "context_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_size",
                            "Name"
                        ],
                        [
                            "context_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ELU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_size",
                            "Name"
                        ],
                        [
                            "context_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_components",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_65": {
                "*size": {
                    "value": "(n_components,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_190": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-self.log_prob(inputs=noised_train_inputs, context=noised_train_context, data_normalization=False, context_one_hot_encoding=False).mean()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "log_227": {
                "input": {
                    "value": "self.inputs_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Independent_238": {
                "base_distribution": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sems.py": {
        "torch": {
            "linspace_66": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sample[:, var_ind].min() - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sample[:, var_ind].max() + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_88": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sample[:, var_ind].min() - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sample[:, var_ind].max() + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "global_context[node]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[slider.val]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}