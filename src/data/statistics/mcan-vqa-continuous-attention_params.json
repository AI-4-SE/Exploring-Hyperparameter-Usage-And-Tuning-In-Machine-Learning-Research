{
    "cfgs/base_cfgs.py": {
        "torch": {
            "set_num_threads_192": {
                "int": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_197": {
                "seed": {
                    "value": "self.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_199": {
                "seed": {
                    "value": "self.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_201": {
                "seed": {
                    "value": "self.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "core/data/load_data.py": {
        "torch": {
            "from_numpy_158": {
                "ndarray": {
                    "value": "img_feat_iter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(1)",
                            "Call"
                        ],
                        [
                            "img_feat",
                            "Name"
                        ],
                        [
                            "img_feat",
                            "Name"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "ques_ix_iter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(1)",
                            "Call"
                        ],
                        [
                            "proc_ques(ques, self.token_to_ix, self.__C.MAX_TOKEN)",
                            "Call"
                        ],
                        [
                            "proc_ques(ques, self.token_to_ix, self.__C.MAX_TOKEN)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_160": {
                "ndarray": {
                    "value": "ans_iter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(1)",
                            "Call"
                        ],
                        [
                            "proc_ans(ans, self.ans_to_ix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/exec.py": {
        "torch": {
            "DataLoader_290": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.__C.EVAL_BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.__C.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Net(self.__C, pretrained_emb, token_size, ans_size, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "Net_mfb(self.__C, pretrained_emb, token_size, ans_size, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net, device_ids=self.__C.DEVICES)",
                            "Call"
                        ],
                        [
                            "Net(self.__C, pretrained_emb, token_size, ans_size, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "Net_mfb(self.__C, pretrained_emb, token_size, ans_size, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net, device_ids=self.__C.DEVICES)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "self.__C.DEVICES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_71": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_73": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.__C.CKPT_PATH",
                            "Attribute"
                        ],
                        [
                            "self.__C.CKPTS_PATH + 'ckpt_' + self.__C.CKPT_VERSION + '/epoch' + str(self.__C.CKPT_EPOCH) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "self.__C.CKPT_PATH",
                            "Attribute"
                        ],
                        [
                            "self.__C.CKPTS_PATH + 'ckpt_' + self.__C.CKPT_VERSION + '/epoch' + str(self.__C.CKPT_EPOCH) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.__C.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.__C.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.__C.PIN_MEM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.__C.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.__C.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.__C.PIN_MEM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_286": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Net(self.__C, pretrained_emb, token_size, ans_size, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "Net_mfb(self.__C, pretrained_emb, token_size, ans_size, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net, device_ids=self.__C.DEVICES)",
                            "Call"
                        ],
                        [
                            "Net(self.__C, pretrained_emb, token_size, ans_size, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "Net_mfb(self.__C, pretrained_emb, token_size, ans_size, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net, device_ids=self.__C.DEVICES)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "self.__C.DEVICES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'state_dict': net.state_dict(), 'optimizer': optim.optimizer.state_dict(), 'lr_base': optim.lr_base}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.__C.CKPTS_PATH + 'ckpt_' + self.__C.VERSION + '/epoch' + str(epoch_finish) + '.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_260": {
                "f": {
                    "value": "path",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.__C.CKPT_PATH",
                            "Attribute"
                        ],
                        [
                            "self.__C.CKPTS_PATH + 'ckpt_' + self.__C.CKPT_VERSION + '/epoch' + str(self.__C.CKPT_EPOCH) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "self.__C.CKPT_PATH",
                            "Attribute"
                        ],
                        [
                            "self.__C.CKPTS_PATH + 'ckpt_' + self.__C.CKPT_VERSION + '/epoch' + str(self.__C.CKPT_EPOCH) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_165": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(sub_img_feat_iter, sub_ques_ix_iter)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "net(img_feat_iter, ques_ix_iter)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__184": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.__C.GRAD_NORM_CLIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_188": {
                "input": {
                    "value": "named_params[name][1].grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/basis_functions.py": {
        "torch": {
            "sqrt_94": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, 0, 0, 0] * M[:, 0, 1, 1] - M[:, 0, 0, 1] * M[:, 0, 0, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_95": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, 0, 0, 0] + M[:, 0, 1, 1] + 2.0 * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_96": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "M.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "M.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_96": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[math.cos(theta)], [math.sin(theta)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "M.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "M.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_115": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (torch.transpose(a, -1, -2) @ inv_Sigma_tilde @ a)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[math.cos(theta)], [math.sin(theta)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "M.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "M.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[math.cos(theta)], [math.sin(theta)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "M.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ],
                        [
                            "theta.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "M.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ],
                        [
                            "theta.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mu_tilde.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mu_tilde.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_points",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_193": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_points",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mu_tilde.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mu_tilde.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_points",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_211": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_points",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mu_tilde.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mu_tilde.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_points",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_229": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_points",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mu_tilde.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mu_tilde.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_points",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_245": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_points",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "exp_51": {
                "input": {
                    "value": "-0.5 * torch.transpose(t, -1, -2) @ sigma_inv @ t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_114": {
                "input": {
                    "value": "sigma_sq / (2.0 * math.pi * Sigma_tilde.det().unsqueeze(-1).unsqueeze(-1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_114": {
                "input": {
                    "value": "-0.5 * torch.transpose(mu_tilde, -1, -2) @ P @ mu_tilde",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_121": {
                "input": {
                    "value": "-t ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_141": {
                "input": {
                    "value": "Sigma.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "input": {
                    "value": "Sigma.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_157": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_161": {
                "input": {
                    "value": "-2.0 * lbd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "input": {
                    "value": "Mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_187": {
                "input": {
                    "value": "Sigma.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_187": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_205": {
                "input": {
                    "value": "Sigma.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_205": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_223": {
                "input": {
                    "value": "Sigma.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_223": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_239": {
                "input": {
                    "value": "Sigma.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_239": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_255": {
                "input": {
                    "value": "Sigma.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_255": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_257": {
                "input": {
                    "value": "op.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "input": {
                    "value": "sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "input": {
                    "value": "sigma_tilde.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "input": {
                    "value": "sigma_tilde.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "input": {
                    "value": "M.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_261": {
                "input": {
                    "value": "Mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "input": {
                    "value": "self.sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "input": {
                    "value": "mu_tilde",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sigma_tilde @ (1 / 2.0 * (Sigma.inverse() + torch.transpose(Sigma.inverse(), -1, -2)) @ Mu + 1 / 2.0 * (self.sigma.inverse() + torch.transpose(self.sigma.inverse(), -1, -2)) @ self.mu)",
                            "BinOp"
                        ],
                        [
                            "sigma_tilde @ (1 / 2.0 * (Sigma.inverse() + torch.transpose(Sigma.inverse(), -1, -2)) @ Mu + 1 / 2.0 * (self.sigma.inverse() + torch.transpose(self.sigma.inverse(), -1, -2)) @ self.mu)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.sqrt(-2.0 * lbd) * self.inv(self.sqrtm(Sigma)) @ (self.mu - Mu)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.sqrt(-2 * lbd) * self.inv(self.sqrtm(Sigma)) @ (self.mu - Mu)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.sqrt(-2 * lbd) * self.inv(self.sqrtm(Sigma)) @ (self.mu - Mu)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.sqrt(-2 * lbd) * self.inv(self.sqrtm(Sigma)) @ (self.mu - Mu)",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "input": {
                    "value": "self.sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_112": {
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "input": {
                    "value": "-2.0 * lbd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_161": {
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[math.cos(theta)], [math.sin(theta)]], dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "erf_170": {
                "input": {
                    "value": "-r0 / (math.sqrt(2.0) * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_179": {
                "input": {
                    "value": "-r0 / (math.sqrt(2.0) * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_188": {
                "input": {
                    "value": "-2.0 * lbd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_198": {
                "input": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 2).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 4).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 1).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_206": {
                "input": {
                    "value": "-2 * lbd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_216": {
                "input": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 2).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 4).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 1).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_224": {
                "input": {
                    "value": "-2 * lbd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_234": {
                "input": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 2).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 4).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 1).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_240": {
                "input": {
                    "value": "-2 * lbd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_250": {
                "input": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 2).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 4).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(mu_tilde.size(0), mu_tilde.size(1), n_points, 1).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "erf_130": {
                "input": {
                    "value": "-r0 / (math.sqrt(2.0) * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_146": {
                "input": {
                    "value": "-r0 / (math.sqrt(2.0) * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_51": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(M[:, 0, 0, 0] + M[:, 0, 1, 1] + 2.0 * s)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "input": {
                    "value": "self.sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "input": {
                    "value": "self.sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_114": {
                "input": {
                    "value": "mu_tilde",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sigma_tilde @ (1 / 2.0 * (Sigma.inverse() + torch.transpose(Sigma.inverse(), -1, -2)) @ Mu + 1 / 2.0 * (self.sigma.inverse() + torch.transpose(self.sigma.inverse(), -1, -2)) @ self.mu)",
                            "BinOp"
                        ],
                        [
                            "sigma_tilde @ (1 / 2.0 * (Sigma.inverse() + torch.transpose(Sigma.inverse(), -1, -2)) @ Mu + 1 / 2.0 * (self.sigma.inverse() + torch.transpose(self.sigma.inverse(), -1, -2)) @ self.mu)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.sqrt(-2.0 * lbd) * self.inv(self.sqrtm(Sigma)) @ (self.mu - Mu)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.sqrt(-2 * lbd) * self.inv(self.sqrtm(Sigma)) @ (self.mu - Mu)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.sqrt(-2 * lbd) * self.inv(self.sqrtm(Sigma)) @ (self.mu - Mu)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.sqrt(-2 * lbd) * self.inv(self.sqrtm(Sigma)) @ (self.mu - Mu)",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_146": {
                "input": {
                    "value": "-2.0 * lbd",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/continuous_softmax.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Mu.shape[0], 6, total_basis)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_15": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.IntTensor(num_basis).to(ctx.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Mu.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "total_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sum(num_basis)",
                            "Call"
                        ],
                        [
                            "sum(num_basis)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_34": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.IntTensor(num_basis).to(ctx.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Mu.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls._expectation_phi_psi(ctx, Mu, Sigma)",
                            "Call"
                        ],
                        [
                            "J - torch.bmm(e_phi.unsqueeze(2), e_psi.unsqueeze(1))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "grad_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_77": {
                "input": {
                    "value": "e_phi.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "e_psi.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "input": {
                    "value": "Mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Sigma @ theta[:, 0:2].view(-1, 2, 1).unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "input": {
                    "value": "Sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/continuous_sparsemax.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Mu.shape[0], 6, total_basis)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_15": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.IntTensor(num_basis).to(ctx.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Mu.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "total_basis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sum(num_basis)",
                            "Call"
                        ],
                        [
                            "sum(num_basis)",
                            "Call"
                        ],
                        [
                            "sum(num_basis)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_37": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.IntTensor(num_basis).to(ctx.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Mu.shape[0], 6, total_basis)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_51": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.IntTensor(num_basis).to(ctx.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls._expectation_phi_psi(ctx, Mu, Sigma) - cls._expectation_phi(ctx, Mu, Sigma)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "grad_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_83": {
                "input": {
                    "value": "Sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/mca.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.linear_merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_107": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_136": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_158": {
                "variable": {
                    "value": "self.enc_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SA(__C, gen_func=torch.softmax) for _ in range(__C.LAYER)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.dec_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SGA(__C, gen_func=gen_func) for _ in range(__C.LAYER)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "input": {
                    "value": "att_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sparsemax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.gen_func(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(att_map)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/mfb.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.proj_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_feat_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "__C.HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "__C.MFB_K * __C.MFB_O",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.proj_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ques_feat_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.MFB_K * __C.MFB_O",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool1d_28": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "__C.MFB_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "__C.MFB_K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_45": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "qatt_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qatt_maps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mlp(ques_feat)",
                            "Call"
                        ],
                        [
                            "F.softmax(qatt_maps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "qatt_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qatt_feat_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "iatt_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "iatt_feat_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "qatt_maps[:, :, i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "mask * ques_feat",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, dim=1)",
                            "Call"
                        ],
                        [
                            "iatt_maps[:, :, i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "mask * img_feat",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "qatt_maps[:, :, i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "mask * ques_feat",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, dim=1)",
                            "Call"
                        ],
                        [
                            "iatt_maps[:, :, i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "mask * img_feat",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z1.squeeze(1), z2.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_44": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/net.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.linear_merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.HIDDEN_SIZE * __C.FLAT_GLIMPSES",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.FLAT_OUT_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(positions_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb_waves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_num_basis",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "positions.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_91": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nb_waves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_num_basis",
                            "Name"
                        ]
                    ]
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_93": {
                "input": {
                    "value": "F.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_104": {
                "variable": {
                    "value": "mu_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.sqrt(nb_basis))",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_105": {
                "variable": {
                    "value": "mu_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.sqrt(nb_basis))",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_106": {
                "variable": {
                    "value": "(mux, muy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mu_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 1, steps)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "mu_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 1, steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mus",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(mus).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sigmas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(sigmas).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_148": {
                "variable": {
                    "value": "positions_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "int(math.sqrt(length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_149": {
                "variable": {
                    "value": "(positions_x, positions_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "positions_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-0.5 + shift, 1.5 - shift, int(2 * math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(shift, 1 - shift, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(0.0, 1.0, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "positions_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-0.5 + shift, 1.5 - shift, int(2 * math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(shift, 1 - shift, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(0.0, 1.0, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(positions_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_159": {
                "variable": {
                    "value": "Mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positions.unsqueeze(0) @ att.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.transpose(values, -1, -2) @ G",
                            "BinOp"
                        ],
                        [
                            "self.value_function(x, mask=None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "x_atted",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.linear_merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.HIDDEN_SIZE * __C.FLAT_GLIMPSES",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.FLAT_OUT_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "x_atted",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_259": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "token_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "__C.WORD_EMBED_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_275": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "__C.WORD_EMBED_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.img_feat_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.IMG_FEAT_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.FLAT_OUT_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "answer_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_336": {
                "variable": {
                    "value": "proj_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(proj_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_67": {
                "variable": {
                    "value": "positions_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5 + shift",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.5 - shift",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "int(2 * math.sqrt(length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_68": {
                "variable": {
                    "value": "(positions_x, positions_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "positions_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-0.5 + shift, 1.5 - shift, int(2 * math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(shift, 1 - shift, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(0.0, 1.0, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "positions_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-0.5 + shift, 1.5 - shift, int(2 * math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(shift, 1 - shift, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(0.0, 1.0, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_73": {
                "variable": {
                    "value": "positions_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "shift",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 / float(2 * math.sqrt(length))",
                            "BinOp"
                        ],
                        [
                            "1 / float(2 * math.sqrt(length))",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "1 - shift",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "int(math.sqrt(length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_74": {
                "variable": {
                    "value": "(positions_x, positions_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "positions_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-0.5 + shift, 1.5 - shift, int(2 * math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(shift, 1 - shift, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(0.0, 1.0, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "positions_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-0.5 + shift, 1.5 - shift, int(2 * math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(shift, 1 - shift, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ],
                        [
                            "torch.linspace(0.0, 1.0, int(math.sqrt(length)))",
                            "Call"
                        ],
                        [
                            "positions_x.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "positions[position - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[positions_x[position - 1]], [positions_y[position - 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G[7:21, :], G[35:49, :], G[63:77, :], G[91:105, :], G[119:133, :], G[147:161, :], G[175:189, :], G[203:217, :], G[231:245, :], G[259:273, :], G[287:301, :], G[315:329, :], G[343:357, :], G[371:385, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "positions[position - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[positions_x[position - 1]], [positions_y[position - 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "(positions @ torch.transpose(positions, -1, -2)).unsqueeze(0) * att.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "input": {
                    "value": "positions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(len(positions_x), 2, 1).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(positions_x), 2, 1).to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "att[:, :, i:i + 1] * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_244": {
                "input": {
                    "value": "att[:, :, i:i + 1] * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_263": {
                "ndarray": {
                    "value": "pretrained_emb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_165": {
                "input": {
                    "value": "Sigma.det().unsqueeze(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "[[1.0, 0.0], [0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_168": {
                "input": {
                    "value": "Sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "input": {
                    "value": "Sigma.inverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_343": {
                "input": {
                    "value": "torch.abs(feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_343": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/net_mfb.py": {
        "torch": {
            "Embedding_22": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "token_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "__C.WORD_EMBED_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.img_feat_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.IMG_FEAT_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "__C.HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_31": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "__C.WORD_EMBED_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "__C.LSTM_OUT_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.dropout_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "__C.DROPOUT_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * __C.MFB_O",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "answer_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "__C.MFB_O",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "answer_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "pretrained_emb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "torch.abs(feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_70": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/net_utils.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mid_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_r",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_53": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/optim.py": {
        "torch": {
            "Adam_62": {
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "__C.OPT_BETAS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "__C.OPT_EPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "core/model/tv2d_layer_2.py": {
        "torch": {
            "randn_190": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "14",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "14",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y_np",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prox_tv2d(X_np.ravel(), step_size=alpha / 2, n_rows=n_rows, n_cols=n_cols, max_iter=max_iter, tol=tol)",
                            "Call"
                        ],
                        [
                            "Y_np.reshape(n_rows, n_cols)",
                            "Call"
                        ],
                        [
                            "np.array(Y.cpu()).round(ctx.digits_tol)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_107": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_tv2d(X)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Y_np)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Y, dtype=X.dtype, device=X.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_143": {
                "variable": {
                    "value": "dX",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dX",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((14, 14))",
                            "Call"
                        ],
                        [
                            "back(Y_np, dX, dY_np)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(dX, dtype=dY.dtype, device=dY.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dY.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dY.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_92": {
                "int": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_num_threads_115": {
                "int": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "extract_features.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "resnet_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images, image.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}