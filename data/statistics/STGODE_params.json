{
    "model.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network(y) + self.downsample(y) if self.downsample else y",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_78": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij, kjlm-> kilm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.A_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.sp_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(STGCNBlock(in_channels=num_features, out_channels=[64, 32, 64], num_nodes=num_nodes, A_hat=A_sp_hat), STGCNBlock(in_channels=64, out_channels=[64, 32, 64], num_nodes=num_nodes, A_hat=A_sp_hat)) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.se_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(STGCNBlock(in_channels=num_features, out_channels=[64, 32, 64], num_nodes=num_nodes, A_hat=A_se_hat), STGCNBlock(in_channels=64, out_channels=[64, 32, 64], num_nodes=num_nodes, A_hat=A_se_hat)) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_timesteps_input * 64, num_timesteps_output * 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs if i == 0 else num_channels[i - 1]",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels[i]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, dilation_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_79": {
                "input": {
                    "value": "torch.einsum('kjlm, mn->kjln', y, self.theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_79": {
                "equation": {
                    "value": "kjlm, mn->kjln",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.network(y) + self.downsample(y) if self.downsample else y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ij, kjlm-> kilm', self.A_hat, X)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_109": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temporal1(X)",
                            "Call"
                        ],
                        [
                            "self.odeg(t)",
                            "Call"
                        ],
                        [
                            "self.temporal2(F.relu(t))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "num_timesteps_input * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_timesteps_output * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "num_timesteps_output * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_timesteps_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_timesteps_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_166": {
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "STGCNBlock(in_channels=num_features, out_channels=[64, 32, 64], num_nodes=num_nodes, A_hat=A_sp_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "STGCNBlock(in_channels=num_features, out_channels=[64, 32, 64], num_nodes=num_nodes, A_hat=A_se_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "odegcn.py": {
        "torch": {
            "Parameter_26": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.8 * torch.ones(adj.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(feature_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(feature_dim) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(temporal_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(temporal_dim) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_35": {
                "variable": {
                    "value": "xa",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij, kjlm->kilm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_38": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_39": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w * d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.t(self.w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_40": {
                "variable": {
                    "value": "xw",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijkl, lm->ijkm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_43": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w2 * d2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.t(self.w2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_44": {
                "variable": {
                    "value": "xw2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijkl, km->ijml",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_74": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odeint(self.odefunc, x, t, method='euler')[1]",
                            "Subscript"
                        ],
                        [
                            "self.odeblock(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_28": {
                "n": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Method Argument"
                        ],
                        [
                            "feature_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_30": {
                "n": {
                    "value": "temporal_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_dim",
                            "Method Argument"
                        ],
                        [
                            "temporal_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "t_39": {
                "input": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_43": {
                "input": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Method Argument"
                        ],
                        [
                            "feature_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "temporal_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_dim",
                            "Method Argument"
                        ],
                        [
                            "temporal_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[0, time]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "run_stode.py": {
        "torch": {
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamW_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SmoothL1Loss_91": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_94": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(net.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_67": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_120": {
                "f": {
                    "value": "f'net_params_{args.filename}_{args.num_gpu}.pkl'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'net_params_{args.filename}_{args.num_gpu}.pkl'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "DataLoader_172": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data, 0, data.shape[0] * train_ratio, his_length, pred_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "valid_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data, data.shape[0] * train_ratio, data.shape[0] * (train_ratio + valid_ratio), his_length, pred_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data, data.shape[0] * (train_ratio + valid_ratio), data.shape[0], his_length, pred_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "A_reg.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "ndarray": {
                    "value": "data.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}