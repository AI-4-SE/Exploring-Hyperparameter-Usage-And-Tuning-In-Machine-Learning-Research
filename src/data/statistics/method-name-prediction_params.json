{
    "notebooks/04-copy-cnn-exploration.py": {
        "sklearn": {
            "train_test_split_45": {
                "variable": {
                    "value": "(train_data_files, test_data_files)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_files",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_46": {
                "variable": {
                    "value": "(train_data_files, validate_data_files)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_data_files",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Input_93": {
                "variable": {
                    "value": "main_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(max_chunk_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_hyperparameters['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "main_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Nadam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Model_103": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[main_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "n_to_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy_cnn_layer(main_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_eager_execution_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/run_utils.py": {
        "sklearn": {
            "train_test_split_59": {
                "variable": {
                    "value": "(train_data_files, test_data_files)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_files",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_60": {
                "variable": {
                    "value": "(train_data_files, validate_data_files)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_data_files",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/archive/eager-execution-debugging.py": {
        "tensorflow": {
            "Input_33": {
                "variable": {
                    "value": "main_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(max_chunk_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameter['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "main_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Nadam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Model_46": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[main_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "cnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_layer(main_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_eager_execution_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/attention.py": {
        "tensorflow": {
            "TimeDistributed_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Conv1D(k1, w1, activation='relu', padding='causal', name='attention_fet_conv1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Conv1D(k2, w2, padding='causal', name='attention_fet_conv2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Lambda_29": {
                "variable": {
                    "value": "self.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: backend.l2_normalize(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_fet_l2_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TimeDistributed_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Conv1D(1, w3, activation=None, padding='causal', name='atn_weight_conv1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TimeDistributed_69": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Softmax(name='atn_weight_softmax')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1D_26": {
                "filters": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "causal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_fet_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1D_27": {
                "filters": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "causal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_fet_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Multiply_44": {
                "name": {
                    "value": "attention_fet_l2_mul",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1D_67": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w3",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "causal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "atn_weight_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Softmax_69": {
                "name": {
                    "value": "atn_weight_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "input": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(l_feat)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weight, training=training)",
                            "Call"
                        ],
                        [
                            "K.squeeze(attention_weight, axis=-1) + mask",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attention_weight)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_29": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/base_model.py": {
        "tensorflow": {
            "Sequential_13": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_model_24": {
                "filepath": {
                    "value": "'{}/model.h5'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/cnn_attention.py": {
        "tensorflow": {
            "TimeDistributed_34": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Embedding(vocabulary_size, embedding_dim, mask_zero=True, input_length=max_chunk_length, name='cnn_att_embedding')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_39": {
                "variable": {
                    "value": "self.gru_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "GRU(k2, return_state=True, return_sequences=True, name='cnn_att_gru')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_51": {
                "variable": {
                    "value": "self.softmax_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Softmax()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "n_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.expand_dims(alpha, axis=-1) * tokens_embedding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_90": {
                "variable": {
                    "value": "n_hat_E",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_layer.layer.embeddings",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "K.transpose(n_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "input_dim": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['vocabulary_size']",
                            "Subscript"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['embedding_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "input_length": {
                    "value": "max_chunk_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['max_chunk_length']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cnn_att_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRU_39": {
                "units": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['k2']",
                            "Subscript"
                        ]
                    ]
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "cnn_att_gru",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Softmax_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_59": {
                "x": {
                    "value": "K.equal(code_block, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_90": {
                "a": {
                    "value": "n_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(K.expand_dims(alpha, axis=-1) * tokens_embedding, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_96": {
                "value": {
                    "value": "n_hat_E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.nn.math_ops.tensordot(E, K.transpose(n_hat), axes=[[1], [0]])",
                            "Call"
                        ],
                        [
                            "K.permute_dimensions(n_hat_E, [2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_59": {
                "x": {
                    "value": "code_block",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_weights_layer([l_feat, mask_vector])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/complete_models.py": {
        "tensorflow": {
            "Input_67": {
                "variable": {
                    "value": "main_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_hyperparameters['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "main_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Nadam_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Model_73": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[main_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "cnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_layer(main_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModelCheckpoint_98": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "checkpoint_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/weights-{{epoch:02d}}-{{val_acc:.2f}}.hdf5'.format(self.directory)",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "val_acc",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/copy_cnn_attention.py": {
        "tensorflow": {
            "TimeDistributed_29": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Embedding(vocabulary_size, embedding_dim, mask_zero=True, input_length=max_chunk_length, name='cnn_att_embedding')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_34": {
                "variable": {
                    "value": "self.gru_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "GRU(k2, return_state=True, return_sequences=True, name='cnn_att_gru')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_42": {
                "variable": {
                    "value": "self.lambda_conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Conv1D(1, w3, activation='sigmoid')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_43": {
                "variable": {
                    "value": "self.max_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "MaxPooling1D(pool_size=1, strides=50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_49": {
                "variable": {
                    "value": "self.softmax_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "Softmax()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "n_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.expand_dims(alpha, axis=-1) * tokens_embedding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_88": {
                "variable": {
                    "value": "n_hat_E",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_layer.layer.embeddings",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "K.transpose(n_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "lmda",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.max_layer(self.lambda_conv_layer(l_feat))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "pos2voc",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.expand_dims(kappa, axis=-1) * tokens_embedding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "variable": {
                    "value": "I_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K.cast(K.any(K.equal(input_code_subtoken, K.cast(target_subtoken, 'int32')), axis=-1), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_152": {
                "variable": {
                    "value": "probability_target_token",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.log(1 - copy_probability) + K.log(y_pred) + mask_unknown",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_156": {
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.logsumexp([probability_correct_copy, probability_target_token])",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_29": {
                "input_dim": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['vocabulary_size']",
                            "Subscript"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['embedding_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "input_length": {
                    "value": "max_chunk_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['max_chunk_length']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cnn_att_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRU_34": {
                "units": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['k2']",
                            "Subscript"
                        ]
                    ]
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "cnn_att_gru",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1D_42": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparameters['w3']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling1D_43": {
                "pool_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_57": {
                "x": {
                    "value": "K.equal(code_block, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "a": {
                    "value": "n_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(K.expand_dims(alpha, axis=-1) * tokens_embedding, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_94": {
                "value": {
                    "value": "n_hat_E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.nn.math_ops.tensordot(E, K.transpose(n_hat), axes=[[1], [0]])",
                            "Call"
                        ],
                        [
                            "K.permute_dimensions(n_hat_E, [2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "K.any(K.equal(input_code_subtoken, K.cast(target_subtoken, 'int32')), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_145": {
                "x": {
                    "value": "K.sum(I_C * copy_weights) + mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_150": {
                "x": {
                    "value": "K.equal(target_subtoken, unknown_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_57": {
                "x": {
                    "value": "code_block",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_weights_alpha_layer([l_feat, mask_vector])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "input": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_weights_kappa_layer([l_feat, mask_vector])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "any_139": {
                "a": {
                    "value": "K.equal(input_code_subtoken, K.cast(target_subtoken, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_150": {
                "x": {
                    "value": "target_subtoken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_subtoken",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "unknown_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "equal_139": {
                "x": {
                    "value": "input_code_subtoken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_code_subtoken",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "K.cast(target_subtoken, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_145": {
                "a": {
                    "value": "I_C * copy_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_152": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_140": {
                "x": {
                    "value": "target_subtoken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_subtoken",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/activations.py": {
        "tensorflow": {
            "log_softmax_27": {
                "logits": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/data_utils.py": {
        "tensorflow": {}
    },
    "src/utils/f1_evaluator.py": {
        "tensorflow": {}
    }
}