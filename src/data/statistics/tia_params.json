{
    "Dreamer/dreamers.py": {
        "tensorflow": {
            "MirroredStrategy_45": {
                "variable": {
                    "value": "self._strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "function_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon[:, :5] + 0.5, openl + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_263": {
                "variable": {
                    "value": "openl",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[truth, model, error]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_277": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon[:, :5] + 0.5, openl + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_279": {
                "variable": {
                    "value": "openl",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[truth, model, error]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_526": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon[:, :5] + 0.5, openl + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_528": {
                "variable": {
                    "value": "openl",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[truth, model, error]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_553": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_joint[:, :5] + 0.5, openl + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_555": {
                "variable": {
                    "value": "openl",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[truth, model, error]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_556": {
                "variable": {
                    "value": "openl_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask_pred[:, :5] + 0.5, openl_mask + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_601": {
                "variable": {
                    "value": "model_joint",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_joint[:, :5] + 0.5, openl_joint + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_604": {
                "variable": {
                    "value": "model_main",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_main[:, :5] + 0.5, openl_main + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_606": {
                "variable": {
                    "value": "model_disen",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_disen[:, :5] + 0.5, openl_disen + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_608": {
                "variable": {
                    "value": "model_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_mask[:, :5] + 0.5, openl_mask + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_611": {
                "variable": {
                    "value": "output_joint",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[truth, model_main, model_disen, model_joint, error_joint]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self._step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "count_steps(datadir, config)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_59": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: x * mask",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(lambda x: x * mask, state)",
                            "Call"
                        ],
                        [
                            "(latent, action)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(len(obs['image']), self._actdim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "likes.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_pred.log_prob(data['image'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "likes.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward_pred.log_prob(data['reward'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "div",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(post_dist, prior_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_123": {
                "variable": {
                    "value": "div",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "div",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._c.free_nats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_139": {
                "variable": {
                    "value": "discount",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.cumprod(tf.concat([tf.ones_like(pcont[:1]), pcont[:-2]], 0), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_146": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "returns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ],
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ],
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_345": {
                "variable": {
                    "value": "reward_like_disen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward_pred_disen.log_prob(data['reward'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_350": {
                "variable": {
                    "value": "likes.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_pred_joint.log_prob(data['image'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_362": {
                "variable": {
                    "value": "div",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(post_dist, prior_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_363": {
                "variable": {
                    "value": "div",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "div",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._c.free_nats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_370": {
                "variable": {
                    "value": "likes_disen.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_pred_joint.log_prob(data['image'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_372": {
                "variable": {
                    "value": "likes_disen.disen_only",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_pred_disen.log_prob(data['image'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_376": {
                "variable": {
                    "value": "reward_like_disen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward_like_disen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(reward_pred_disen.log_prob(data['reward']))",
                            "Call"
                        ],
                        [
                            "reward_pred_disen.log_prob(data['reward'])",
                            "Call"
                        ],
                        [
                            "reward_pred_disen.log_prob(data['reward'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(reward_like_disen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_381": {
                "variable": {
                    "value": "div_disen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(post_dist_disen, prior_dist_disen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_383": {
                "variable": {
                    "value": "div_disen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "div_disen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist_disen, prior_dist_disen))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div_disen, self._c.free_nats)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._c.free_nats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_403": {
                "variable": {
                    "value": "discount",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.cumprod(tf.concat([tf.ones_like(pcont[:1]), pcont[:-2]], 0), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_410": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "returns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ],
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ],
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_657": {
                "variable": {
                    "value": "likes.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_pred.log_prob(data['action'][:, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_659": {
                "variable": {
                    "value": "likes.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward_pred.log_prob(data['reward'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_669": {
                "variable": {
                    "value": "div",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tfd.kl_divergence(post_dist, prior_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_670": {
                "variable": {
                    "value": "div",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "div",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tfd.kl_divergence(post_dist, prior_dist))",
                            "Call"
                        ],
                        [
                            "tf.maximum(div, self._c.free_nats)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._c.free_nats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_686": {
                "variable": {
                    "value": "discount",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.cumprod(tf.concat([tf.ones_like(pcont[:1]), pcont[:-2]], 0), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_693": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "returns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ],
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ],
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], pcont[:-1], bootstrap=value[-1], lambda_=self._c.disclam, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_policy_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_46": {
                "device_name": {
                    "value": "cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "likes.pcont",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pcont_pred.log_prob(pcont_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_161": {
                "x": {
                    "value": "log_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._c.log_images and log and (train_step == 0)",
                            "BoolOp"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_203": {
                "variable": {
                    "value": "amount",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._c.expl_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "amount",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self._c.expl_amount",
                            "Attribute"
                        ],
                        [
                            "amount * 0.5 ** (tf.cast(self._step, tf.float32) / self._c.expl_decay)",
                            "BinOp"
                        ],
                        [
                            "self._c.eval_noise",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(self._c.expl_min, amount)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_210": {
                "t": {
                    "value": "tfd.Normal(action, amount).sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "uniform_212": {
                "shape": {
                    "value": "action.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_216": {
                "condition": {
                    "value": "tf.random.uniform(action.shape[:1], 0, 1) < amount",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(indices, action.shape[-1], dtype=self._float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros((len(obs['image']), self._actdim), self._float)",
                            "Call"
                        ],
                        [
                            "self._actor(feat).sample()",
                            "Call"
                        ],
                        [
                            "self._actor(feat).mode()",
                            "Call"
                        ],
                        [
                            "self._exploration(action, training)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_226": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_294": {
                "name": {
                    "value": "'agent/' + k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradientTape_307": {
                "persistent": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_357": {
                "variable": {
                    "value": "likes.pcont",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pcont_pred.log_prob(pcont_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_430": {
                "x": {
                    "value": "log_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._c.log_images and log and (train_step == 0)",
                            "BoolOp"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_634": {
                "name": {
                    "value": "'agent/' + k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_635": {
                "name": {
                    "value": "'disen/' + k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradientTape_648": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_664": {
                "variable": {
                    "value": "likes.pcont",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pcont_pred.log_prob(pcont_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_675": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_691": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_58": {
                "x": {
                    "value": "1 - reset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumprod_139": {
                "x": {
                    "value": "tf.concat([tf.ones_like(pcont[:1]), pcont[:-2]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "input_tensor": {
                    "value": "discount * returns",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "input_tensor": {
                    "value": "discount * value_pred.log_prob(target)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_replica_context_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_218": {
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tfd.Categorical(0 * action).sample()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "action.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_352": {
                "input_tensor": {
                    "value": "reward_pred.log_prob(data['reward'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumprod_403": {
                "x": {
                    "value": "tf.concat([tf.ones_like(pcont[:1]), pcont[:-2]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_405": {
                "input_tensor": {
                    "value": "discount * returns",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_412": {
                "input_tensor": {
                    "value": "discount * value_pred.log_prob(target)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_replica_context_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumprod_686": {
                "x": {
                    "value": "tf.concat([tf.ones_like(pcont[:1]), pcont[:-2]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_688": {
                "input_tensor": {
                    "value": "discount * returns",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_695": {
                "input_tensor": {
                    "value": "discount * value_pred.log_prob(target)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_replica_context_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_134": {
                "input": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ],
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ],
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_139": {
                "values": {
                    "value": "[tf.ones_like(pcont[:1]), pcont[:-2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "uniform_217": {
                "shape": {
                    "value": "action.shape[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_398": {
                "input": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ],
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ],
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_403": {
                "values": {
                    "value": "[tf.ones_like(pcont[:1]), pcont[:-2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_681": {
                "input": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ],
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ],
                        [
                            "self._reward(imag_feat).mode()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_686": {
                "values": {
                    "value": "[tf.ones_like(pcont[:1]), pcont[:-2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_200": {
                "x": {
                    "value": "self._step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_230": {
                "input": {
                    "value": "self._dynamics.get_feat(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_334": {
                "input": {
                    "value": "feat_disen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._disen_dynamics.get_feat(post_disen)",
                            "Call"
                        ],
                        [
                            "self._disen_dynamics.get_feat(prior_disen)",
                            "Call"
                        ],
                        [
                            "self._disen_dynamics.get_feat(post_disen)",
                            "Call"
                        ],
                        [
                            "self._disen_dynamics.get_feat(prior_disen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_337": {
                "input_tensor": {
                    "value": "reward_like_disen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(reward_pred_disen.log_prob(data['reward']))",
                            "Call"
                        ],
                        [
                            "reward_pred_disen.log_prob(data['reward'])",
                            "Call"
                        ],
                        [
                            "reward_pred_disen.log_prob(data['reward'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(reward_like_disen)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_140": {
                "input": {
                    "value": "pcont[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_404": {
                "input": {
                    "value": "pcont[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_687": {
                "input": {
                    "value": "pcont[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Dreamer/env_tools.py": {
        "tensorflow": {
            "global_policy_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_13": {
                "device_name": {
                    "value": "cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_38": {
                "name": {
                    "value": "'sim/' + k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_14": {
                "x": {
                    "value": "obs['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Dreamer/models.py": {
        "tensorflow": {
            "GRUCell_18": {
                "variable": {
                    "value": "self._cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._deter_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(embed, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(action, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(action, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_48": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(action, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(action, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prior['deter'], embed]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_66": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_state['stoch'], prev_action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_83": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obs['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,) + tuple(obs['image'].shape[-3:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(obs['image'])[:-3], [self._outdim]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, self._outdim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, self._outdim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_191": {
                "variable": {
                    "value": "(mean, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, self._precision) + mean2 * tf.cast(mask_use2, self._precision)",
                            "BinOp"
                        ],
                        [
                            "self._mean_scale * tf.tanh(mean / self._mean_scale)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(mask, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "self.get('mask1', tfkl.Conv2D, 1, 1, **kwargs)(mask_feat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_216": {
                "variable": {
                    "value": "mask_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask1, mask2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_234": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features[:, :-1], features[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_54": {
                "values": {
                    "value": "[state['stoch'], state['deter']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(obs['image'])[:-3], [self._outdim]], 0)",
                            "Call"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_285": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get('obs1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('obs2', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_state['stoch'], prev_action], -1)",
                            "Call"
                        ],
                        [
                            "self.get('img1', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img2', tfkl.Dense, self._hidden_size, self._activation)(x)",
                            "Call"
                        ],
                        [
                            "self.get('img3', tfkl.Dense, 2 * self._stoch_size, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Conv2D, 1 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2D, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2D, 4 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2D, 8 * self._depth, self._kernel_sizes[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, self._outdim, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, self._outdim])",
                            "Call"
                        ],
                        [
                            "self.get('h2', tfkl.Conv2DTranspose, 4 * self._depth, self._kernel_sizes[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', tfkl.Conv2DTranspose, 2 * self._depth, self._kernel_sizes[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', tfkl.Conv2DTranspose, 1 * self._depth, self._kernel_sizes[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', tfkl.Conv2DTranspose, 3 + self._shape[-1], self._kernel_sizes[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([features[:, :-1], features[:, 1:]], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_policy_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_39": {
                "a": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_40": {
                "a": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "a": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_67": {
                "features": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.nn.softplus(std) + 0.1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std) + 0.1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + raw_init_std) + self._min_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_84": {
                "features": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.nn.softplus(std) + 0.1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std) + 0.1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + raw_init_std) + self._min_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_155": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_192": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_194": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_222": {
                "x": {
                    "value": "mask_use1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_255": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "shape": {
                    "value": "[batch_size, self._stoch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "shape": {
                    "value": "[batch_size, self._stoch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "shape": {
                    "value": "[batch_size, self._stoch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_220": {
                "x": {
                    "value": "mask_use1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "mask_use2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_286": {
                "x": {
                    "value": "mean / self._mean_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_287": {
                "features": {
                    "value": "std + raw_init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(action, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(action, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(action, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(action, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_120": {
                "input": {
                    "value": "obs['image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_193": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_195": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_255": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Dreamer/run.py": {
        "tensorflow": {
            "get_logger_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_file_writer_61": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "str(config.logdir)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_queue": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "flush_millis": {
                    "value": "20000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_physical_devices_50": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_memory_growth_51": {
                "device": {
                    "value": "gpu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.config.experimental.list_physical_devices('GPU')",
                            "Call"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Policy_54": {
                "name": {
                    "value": "mixed_float16",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Dreamer/tools.py": {
        "tensorflow": {
            "concat_339": {
                "variable": {
                    "value": "next_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[value[1:], bootstrap[None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "categorical_431": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits_parameter()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "sample_shape[0] if sample_shape else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "str(name)",
                            "Call"
                        ],
                        [
                            "name if isinstance(name, str) else name.decode('utf-8')",
                            "IfExp"
                        ],
                        [
                            "'sample'",
                            "MethodArgument"
                        ],
                        [
                            "'sample'",
                            "MethodArgument"
                        ],
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_structure_30": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: x.numpy()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numpy_function_63": {
                "func": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_76": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_272": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "events",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_276": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "events",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_311": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_312": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less_equal(tf.abs(y), 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(y, -0.99999997, 0.99999997)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "atanh_315": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_316": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_320": {
                "variable": {
                    "value": "log2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(2.0, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_334": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(reward, dims)",
                            "Call"
                        ],
                        [
                            "self._random.uniform(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(reward.shape.ndims))",
                            "Call"
                        ],
                        [
                            "[axis] + dims[1:axis] + [0] + dims[axis + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_335": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(value, dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(reward.shape.ndims))",
                            "Call"
                        ],
                        [
                            "[axis] + dims[1:axis] + [0] + dims[axis + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_336": {
                "variable": {
                    "value": "pcont",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pcont",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pcont * tf.ones_like(reward)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(pcont, dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(reward.shape.ndims))",
                            "Call"
                        ],
                        [
                            "[axis] + dims[1:axis] + [0] + dims[axis + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_338": {
                "variable": {
                    "value": "bootstrap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_345": {
                "variable": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "returns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "static_scan(lambda agg, cur: cur[0] + cur[1] * lambda_ * agg, (inputs, pcont), bootstrap, reverse=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(returns, dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(reward.shape.ndims))",
                            "Call"
                        ],
                        [
                            "[axis] + dims[1:axis] + [0] + dims[axis + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_357": {
                "variable": {
                    "value": "self._opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LossScaleOptimizer_358": {
                "variable": {
                    "value": "self._opt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_376": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tape.gradient(loss, self._variables)",
                            "Call"
                        ],
                        [
                            "self._opt.get_unscaled_gradients(grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_410": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: x[index]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reward + pcont * next_values * (1 - lambda_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pack_sequence_as_416": {
                "structure": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "outputs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[[] for _ in tf.nest.flatten(start)]",
                            "ListComp"
                        ],
                        [
                            "[list(reversed(x)) for x in outputs]",
                            "ListComp"
                        ],
                        [
                            "[tf.stack(x, 0) for x in outputs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "normal_420": {
                "shape": {
                    "value": "tuple(sample_shape) + tuple(self.event_shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mean": {
                    "value": "self.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "stddev": {
                    "value": "self.stddev()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "str(name)",
                            "Call"
                        ],
                        [
                            "name if isinstance(name, str) else name.decode('utf-8')",
                            "IfExp"
                        ],
                        [
                            "'sample'",
                            "MethodArgument"
                        ],
                        [
                            "'sample'",
                            "MethodArgument"
                        ],
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_structure_37": {
                "func": {
                    "value": "lambda x, y: x.assign(y)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(lambda x: x.numpy(), self.variables)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_244": {
                "input_tensor": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dist.sample(self._samples)",
                            "Call"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_290": {
                "x": {
                    "value": "probs - tf.stop_gradient(probs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_294": {
                "indices": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[index for (index, d) in enumerate(done) if d]",
                            "ListComp"
                        ],
                        [
                            "range(len(tf.nest.flatten(inputs)[0]))",
                            "Call"
                        ],
                        [
                            "reversed(indices)",
                            "Call"
                        ],
                        [
                            "tf.random.categorical(self.logits_parameter(), sample_shape[0] if sample_shape else 1, self.dtype, seed, name)",
                            "Call"
                        ],
                        [
                            "indices[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(events, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(events, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._dist.sample(*amount)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_307": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_368": {
                "variable": {
                    "value": "self._variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "structure": {
                    "value": "variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[module.variables for module in self._modules]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_378": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tape.gradient(loss, self._variables)",
                            "Call"
                        ],
                        [
                            "self._opt.get_unscaled_gradients(grads)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self._clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_norm": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.global_norm(grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_replica_context_380": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_415": {
                "values": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_84": {
                "name": {
                    "value": "name + '/grid'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "video.transpose((1, 2, 0, 3, 4)).reshape((T, H, B * W, C))",
                            "Call"
                        ],
                        [
                            "video.transpose((0, 2, 1, 3, 4)).reshape((1, B * H, T * W, C))",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step + (done * length).sum()",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_249": {
                "params": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._dist.sample(self._samples)",
                            "Call"
                        ],
                        [
                            "self._dist.sample(self._samples)",
                            "Call"
                        ],
                        [
                            "self._one_hot(indices)",
                            "Call"
                        ],
                        [
                            "sample + tf.cast(probs - tf.stop_gradient(probs), self._dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmax(logprob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_254": {
                "input_tensor": {
                    "value": "logprob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._dist.log_prob(sample)",
                            "Call"
                        ],
                        [
                            "self.log_prob(sample)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_policy_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "less_equal_313": {
                "x": {
                    "value": "tf.abs(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_314": {
                "t": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.99999997",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.99999997",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_320": {
                "value": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_330": {
                "input": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(reward, dims)",
                            "Call"
                        ],
                        [
                            "self._random.uniform(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_405": {
                "structure": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_249": {
                "input": {
                    "value": "logprob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._dist.log_prob(sample)",
                            "Call"
                        ],
                        [
                            "self.log_prob(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_290": {
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dist.probs_parameter()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_313": {
                "x": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_321": {
                "features": {
                    "value": "-2.0 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_406": {
                "structure": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reward + pcont * next_values * (1 - lambda_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_412": {
                "structure": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start",
                            "Name"
                        ],
                        [
                            "fn(last, inp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DreamerV2/dreamer.py": {
        "tensorflow": {
            "get_logger_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_126": {
                "variable": {
                    "value": "amount",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "amount",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._config.expl_amount if training else self._config.eval_noise",
                            "IfExp"
                        ],
                        [
                            "tf.cast(amount, self._float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "self._step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "count_steps(config.traindir)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_70": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: x * mask",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "state",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tools.simulate(agent, train_envs, config.eval_every, state=state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nest.map_structure(lambda x: x * mask, state)",
                            "Call"
                        ],
                        [
                            "(latent, action)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, self._config.num_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(tf.argmax(action, axis=-1), self._config.num_actions)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "action.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "experimental_run_functions_eagerly_234": {
                "run_eagerly": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_physical_devices_237": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_physical_devices_238": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_policy_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_42": {
                "device_name": {
                    "value": "cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_131": {
                "t": {
                    "value": "tfd.Normal(action, amount).sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_memory_growth_239": {
                "device": {
                    "value": "gpu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.config.experimental.list_physical_devices('GPU')",
                            "Call"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Policy_242": {
                "name": {
                    "value": "mixed_float16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_69": {
                "x": {
                    "value": "1 - reset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_116": {
                "indices": {
                    "value": "tf.argmax(action, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self._config.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_116": {
                "input": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros((batch_size, self._config.num_actions), self._float)",
                            "Call"
                        ],
                        [
                            "self._task_behavior.actor(feat).mode()",
                            "Call"
                        ],
                        [
                            "self._expl_behavior.actor(feat).sample()",
                            "Call"
                        ],
                        [
                            "self._task_behavior.actor(feat).sample()",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.one_hot(tf.argmax(action, axis=-1), self._config.num_actions), action.dtype)",
                            "Call"
                        ],
                        [
                            "self._exploration(action, training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "DreamerV2/exploration.py": {
        "tensorflow": {
            "reduce_mean_63": {
                "variable": {
                    "value": "disag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.reduce_std(preds, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stop_gradient_76": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets[:, self._config.disag_offset:]",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_77": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[:, :-self._config.disag_offset]",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_20": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat.shape[:-1] + [self._config.num_actions]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_65": {
                "variable": {
                    "value": "disag",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "disag",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.math.reduce_std(preds, 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.math.log(disag)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_policy_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_std_63": {
                "input_tensor": {
                    "value": "preds",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[head(feat, tf.float32).mean() for head in self._networks]",
                            "ListComp"
                        ],
                        [
                            "[head(inputs) for head in self._networks]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "self._config.expl_extr_scale * self._reward(feat, state, action)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_18": {
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat.shape[:-1] + [self._config.num_actions]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "pred.log_prob(targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_81": {
                "x": {
                    "value": "tf.reduce_sum(likes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "likes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(pred.log_prob(targets)) for pred in preds]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "DreamerV2/models.py": {
        "tensorflow": {
            "reduce_mean_186": {
                "variable": {
                    "value": "metrics[kl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "metrics[disen/kl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_value_disen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_252": {
                "variable": {
                    "value": "model_joint",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_joint[:, :5] + 0.5, openl_joint + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_255": {
                "variable": {
                    "value": "model_main",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_main[:, :5] + 0.5, openl_main + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_258": {
                "variable": {
                    "value": "model_disen",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_disen[:, :5] + 0.5, openl_disen + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "model_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_mask[:, :5] + 0.5, openl_mask + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "output_joint",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[truth, model_joint, error_joint]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_265": {
                "variable": {
                    "value": "output_main",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[truth, model_main, error_main]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_266": {
                "variable": {
                    "value": "output_disen",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[truth, model_disen, error_disen]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_329": {
                "variable": {
                    "value": "metrics[reward_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(imag_feat, imag_state, imag_action)",
                            "Call"
                        ],
                        [
                            "tf.cast(reward, tf.float32)",
                            "Call"
                        ],
                        [
                            "reward + self._config.actor_state_entropy() * state_ent",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_std_330": {
                "variable": {
                    "value": "metrics[reward_std]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(imag_feat, imag_state, imag_action)",
                            "Call"
                        ],
                        [
                            "tf.cast(reward, tf.float32)",
                            "Call"
                        ],
                        [
                            "reward + self._config.actor_state_entropy() * state_ent",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_331": {
                "variable": {
                    "value": "metrics[actor_ent]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "actor_ent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.actor(imag_feat, tf.float32).entropy()",
                            "Call"
                        ],
                        [
                            "policy.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_368": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(imag_feat, imag_state, imag_action)",
                            "Call"
                        ],
                        [
                            "tf.cast(reward, tf.float32)",
                            "Call"
                        ],
                        [
                            "reward + self._config.actor_state_entropy() * state_ent",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_387": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.cumprod(tf.concat([tf.ones_like(discount[:1]), discount[:-1]], 0), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "image_like",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_pred_joint.log_prob(tf.cast(data['image'], tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_289": {
                "variable": {
                    "value": "self._updates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_328": {
                "variable": {
                    "value": "value_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights[:-1] * value_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "map_structure_363": {
                "variable": {
                    "value": "(states, feats, actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "unfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "(states, feats, actions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientTape_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_policy_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_215": {
                "variable": {
                    "value": "obs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.value(imag_feat, tf.float32)[:-1]",
                            "Subscript"
                        ],
                        [
                            "self._slow_value(imag_feat, tf.float32).mode()",
                            "Call"
                        ],
                        [
                            "self.value(imag_feat, tf.float32).mode()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GradientTape_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_342": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_357": {
                "values": {
                    "value": "[start[k][None], v[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_374": {
                "x": {
                    "value": "self._config.actor_entropy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_377": {
                "x": {
                    "value": "self._config.actor_state_entropy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumprod_387": {
                "x": {
                    "value": "tf.concat([tf.ones_like(discount[:1]), discount[:-1]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_395": {
                "input": {
                    "value": "imag_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_402": {
                "variable": {
                    "value": "imag_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "imag_action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(imag_action, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(imag_action, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_414": {
                "x": {
                    "value": "self._config.actor_entropy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_417": {
                "x": {
                    "value": "self._config.actor_state_entropy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_420": {
                "input_tensor": {
                    "value": "weights[:-1] * actor_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "input_tensor": {
                    "value": "disen_only_image_pred.log_prob(tf.cast(data['image'], tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_208": {
                "x": {
                    "value": "obs['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_dtype_213": {
                "type_value": {
                    "value": "value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_339": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "repeats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_348": {
                "input": {
                    "value": "feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dynamics.get_feat(post)",
                            "Call"
                        ],
                        [
                            "0 * dynamics.get_feat(start)",
                            "BinOp"
                        ],
                        [
                            "dynamics.get_feat(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_362": {
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[s[0], s[1] // repeats, repeats] + s[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_373": {
                "input": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(imag_feat, imag_state, imag_action)",
                            "Call"
                        ],
                        [
                            "tf.cast(reward, tf.float32)",
                            "Call"
                        ],
                        [
                            "reward + self._config.actor_state_entropy() * state_ent",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_387": {
                "values": {
                    "value": "[tf.ones_like(discount[:1]), discount[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_406": {
                "variable": {
                    "value": "imag_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "imag_action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(imag_action, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(imag_action, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_108": {
                "input": {
                    "value": "feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dynamics.get_feat(post)",
                            "Call"
                        ],
                        [
                            "0 * dynamics.get_feat(start)",
                            "BinOp"
                        ],
                        [
                            "dynamics.get_feat(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_110": {
                "x": {
                    "value": "data[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "like",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred.log_prob(tf.cast(data[name], tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_143": {
                "x": {
                    "value": "data[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "input_tensor": {
                    "value": "like_disen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_disen.log_prob(tf.cast(data[name], tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_156": {
                "x": {
                    "value": "data['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_325": {
                "input": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tools.lambda_return(reward[:-1], value[:-1], discount[:-1], bootstrap=value[-1], lambda_=self._config.discount_lambda, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_403": {
                "input": {
                    "value": "target - self.value(imag_feat[:-1], tf.float32).mode()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_149": {
                "x": {
                    "value": "data['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_388": {
                "input": {
                    "value": "discount[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_407": {
                "input": {
                    "value": "target - self.value(imag_feat[:-1], tf.float32).mode()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_131": {
                "input": {
                    "value": "feat_disen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.disen_dynamics.get_feat(post_disen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_132": {
                "input_tensor": {
                    "value": "pred_disen.log_prob(tf.cast(data[name], tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_133": {
                "x": {
                    "value": "data[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DreamerV2/networks.py": {
        "tensorflow": {
            "reshape_196": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obs['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,) + tuple(obs['image'].shape[-3:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], np.prod(x.shape[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(obs['image'])[:-3], [x.shape[-1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_273": {
                "variable": {
                    "value": "(mean, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self._shape[-1], self._shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_274": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "{'none': lambda : mean, 'tanh5': lambda : 5.0 * tf.math.tanh(mean / 5.0)}[self._mean_act]()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, mean1.dtype) + mean2 * tf.cast(mask_use2, mean2.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hmean', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ],
                        [
                            "5 * tf.tanh(mean / 5)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(mask, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype)",
                            "Call"
                        ],
                        [
                            "self.get('mask1', tfkl.Conv2D, 1, 1, **kwargs)(mask_feat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_301": {
                "variable": {
                    "value": "mask_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask1, mask2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "{'none': lambda : mean, 'tanh5': lambda : 5.0 * tf.math.tanh(mean / 5.0)}[self._mean_act]()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, mean1.dtype) + mean2 * tf.cast(mask_use2, mean2.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hmean', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ],
                        [
                            "5 * tf.tanh(mean / 5)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_444": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "3 * size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "norm is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "split_460": {
                "variable": {
                    "value": "(reset, cand, update)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "parts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._layer(tf.concat([inputs, state], -1))",
                            "Call"
                        ],
                        [
                            "tf.cast(parts, tf.float32)",
                            "Call"
                        ],
                        [
                            "self._norm(parts)",
                            "Call"
                        ],
                        [
                            "tf.cast(parts, dtype)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_461": {
                "variable": {
                    "value": "reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(reset)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_463": {
                "variable": {
                    "value": "update",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "update + self._update_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GRUCell_29": {
                "variable": {
                    "value": "self._cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._deter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "stoch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "stoch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "state['stoch']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(stoch, shape)",
                            "Call"
                        ],
                        [
                            "self.get_dist(stats).sample()",
                            "Call"
                        ],
                        [
                            "self.get_dist(stats).mode()",
                            "Call"
                        ],
                        [
                            "self.get_dist(stats).sample()",
                            "Call"
                        ],
                        [
                            "self.get_dist(stats).mode()",
                            "Call"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "stoch.shape[:-2] + [self._stoch * self._discrete]",
                            "BinOp"
                        ],
                        [
                            "prev_stoch.shape[:-2] + [self._stoch * self._discrete]",
                            "BinOp"
                        ],
                        [
                            "prev_action.shape[:-1] + [self._embed]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.shape(obs['image'])[:-3], [x.shape[-1]]], 0)",
                            "Call"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_83": {
                "values": {
                    "value": "[stoch, state['deter']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "state['logit']",
                            "Subscript"
                        ],
                        [
                            "tf.cast(logit, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x.shape[:-1] + [self._stoch, self._discrete])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prior['deter'], embed]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "prev_stoch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_stoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_state['stoch']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(prev_stoch, shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "stoch.shape[:-2] + [self._stoch * self._discrete]",
                            "BinOp"
                        ],
                        [
                            "prev_stoch.shape[:-2] + [self._stoch * self._discrete]",
                            "BinOp"
                        ],
                        [
                            "prev_action.shape[:-1] + [self._embed]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.shape(obs['image'])[:-3], [x.shape[-1]]], 0)",
                            "Call"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_129": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_stoch, prev_action, embed]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_stoch, prev_action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x.shape[:-1] + [self._stoch, self._discrete]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_154": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(value, free)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_177": {
                "variable": {
                    "value": "pri",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kld(dist(prior), dist(post))",
                            "Call"
                        ],
                        [
                            "kld(dist(prior), dist(sg(post)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_178": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kld(dist(sg(prior)), dist(post))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "stoch.shape[:-2] + [self._stoch * self._discrete]",
                            "BinOp"
                        ],
                        [
                            "prev_stoch.shape[:-2] + [self._stoch * self._discrete]",
                            "BinOp"
                        ],
                        [
                            "prev_action.shape[:-1] + [self._embed]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.shape(obs['image'])[:-3], [x.shape[-1]]], 0)",
                            "Call"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_226": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 32 * self._depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2, 2, 32 * self._depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_241": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "{'none': lambda : mean, 'tanh5': lambda : 5.0 * tf.math.tanh(mean / 5.0)}[self._mean_act]()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, mean1.dtype) + mean2 * tf.cast(mask_use2, mean2.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hmean', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ],
                        [
                            "5 * tf.tanh(mean / 5)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_261": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 32 * self._depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2, 2, 32 * self._depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_279": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "{'none': lambda : mean, 'tanh5': lambda : 5.0 * tf.math.tanh(mean / 5.0)}[self._mean_act]()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, mean1.dtype) + mean2 * tf.cast(mask_use2, mean2.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hmean', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ],
                        [
                            "5 * tf.tanh(mean / 5)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_280": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(mask, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype)",
                            "Call"
                        ],
                        [
                            "self.get('mask1', tfkl.Conv2D, 1, 1, **kwargs)(mask_feat)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.cast(std, dtype)",
                            "Call"
                        ],
                        [
                            "{'softplus': lambda : tf.nn.softplus(std), 'abs': lambda : tf.math.abs(std + 1), 'sigmoid': lambda : tf.nn.sigmoid(std), 'sigmoid2': lambda : 2 * tf.nn.sigmoid(std / 2)}[self._std_act]()",
                            "Call"
                        ],
                        [
                            "std + self._min_std",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hstd', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(std) + 0.01",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(std, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "self._std",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + 5) + 5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.sigmoid(std / 2) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(features)[:-1], self._shape], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_378": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_379": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "{'none': lambda : mean, 'tanh5': lambda : 5.0 * tf.math.tanh(mean / 5.0)}[self._mean_act]()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, mean1.dtype) + mean2 * tf.cast(mask_use2, mean2.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hmean', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ],
                        [
                            "5 * tf.tanh(mean / 5)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNormalization_446": {
                "variable": {
                    "value": "self._norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_457": {
                "variable": {
                    "value": "parts",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._layer(tf.concat([inputs, state], -1))",
                            "Call"
                        ],
                        [
                            "tf.cast(parts, tf.float32)",
                            "Call"
                        ],
                        [
                            "self._norm(parts)",
                            "Call"
                        ],
                        [
                            "tf.cast(parts, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_459": {
                "variable": {
                    "value": "parts",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._layer(tf.concat([inputs, state], -1))",
                            "Call"
                        ],
                        [
                            "tf.cast(parts, tf.float32)",
                            "Call"
                        ],
                        [
                            "self._norm(parts)",
                            "Call"
                        ],
                        [
                            "tf.cast(parts, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_policy_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_54": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0] + list(range(2, len(x.shape)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0] + list(range(2, len(x.shape)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_95": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "{'none': lambda : mean, 'tanh5': lambda : 5.0 * tf.math.tanh(mean / 5.0)}[self._mean_act]()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, mean1.dtype) + mean2 * tf.cast(mask_use2, mean2.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hmean', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ],
                        [
                            "5 * tf.tanh(mean / 5)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_96": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.cast(std, dtype)",
                            "Call"
                        ],
                        [
                            "{'softplus': lambda : tf.nn.softplus(std), 'abs': lambda : tf.math.abs(std + 1), 'sigmoid': lambda : tf.nn.sigmoid(std), 'sigmoid2': lambda : 2 * tf.nn.sigmoid(std / 2)}[self._std_act]()",
                            "Call"
                        ],
                        [
                            "std + self._min_std",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hstd', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(std) + 0.01",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(std, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "self._std",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + 5) + 5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.sigmoid(std / 2) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "stoch.shape[:-2] + [self._stoch * self._discrete]",
                            "BinOp"
                        ],
                        [
                            "prev_stoch.shape[:-2] + [self._stoch * self._discrete]",
                            "BinOp"
                        ],
                        [
                            "prev_action.shape[:-1] + [self._embed]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.shape(obs['image'])[:-3], [x.shape[-1]]], 0)",
                            "Call"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "prev_action.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_238": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_274": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_276": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_307": {
                "x": {
                    "value": "mask_use1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "mean1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_326": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VarianceScaling_369": {
                "variable": {
                    "value": "kw[kernel_initializer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "self._outscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_377": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_389": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_454": {
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_173": {
                "x": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kld(dist(prior), dist(post))",
                            "Call"
                        ],
                        [
                            "kld(dist(prior), dist(sg(post)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "free",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "map_structure_175": {
                "func": {
                    "value": "tf.stop_gradient",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_179": {
                "x": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(kld(dist(sg(prior)), dist(post)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "free",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_305": {
                "x": {
                    "value": "mask_use1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "mean1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_306": {
                "x": {
                    "value": "mask_use2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "mean2.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_330": {
                "features": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.cast(std, dtype)",
                            "Call"
                        ],
                        [
                            "{'softplus': lambda : tf.nn.softplus(std), 'abs': lambda : tf.math.abs(std + 1), 'sigmoid': lambda : tf.nn.sigmoid(std), 'sigmoid2': lambda : 2 * tf.nn.sigmoid(std / 2)}[self._std_act]()",
                            "Call"
                        ],
                        [
                            "std + self._min_std",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hstd', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(std) + 0.01",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(std, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "self._std",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + 5) + 5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.sigmoid(std / 2) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_331": {
                "values": {
                    "value": "[tf.shape(features)[:-1], self._shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_336": {
                "x": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.cast(std, dtype)",
                            "Call"
                        ],
                        [
                            "{'softplus': lambda : tf.nn.softplus(std), 'abs': lambda : tf.math.abs(std + 1), 'sigmoid': lambda : tf.nn.sigmoid(std), 'sigmoid2': lambda : 2 * tf.nn.sigmoid(std / 2)}[self._std_act]()",
                            "Call"
                        ],
                        [
                            "std + self._min_std",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hstd', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(std) + 0.01",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(std, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "self._std",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + 5) + 5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.sigmoid(std / 2) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softplus_380": {
                "features": {
                    "value": "std + self._init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_388": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_400": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "shape": {
                    "value": "[batch_size, self._stoch, self._discrete]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "shape": {
                    "value": "[batch_size, self._stoch, self._discrete]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_46": {
                "shape": {
                    "value": "[batch_size, self._stoch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "shape": {
                    "value": "[batch_size, self._stoch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_48": {
                "shape": {
                    "value": "[batch_size, self._stoch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_57": {
                "input": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "swap(action)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_71": {
                "input": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "swap(action)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_206": {
                "input": {
                    "value": "obs['image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_390": {
                "x": {
                    "value": "mean / 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_391": {
                "features": {
                    "value": "std + 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_399": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_239": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_275": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_277": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_327": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_401": {
                "features": {
                    "value": "std + self._init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_407": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "{'none': lambda : mean, 'tanh5': lambda : 5.0 * tf.math.tanh(mean / 5.0)}[self._mean_act]()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, mean1.dtype) + mean2 * tf.cast(mask_use2, mean2.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hmean', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ],
                        [
                            "5 * tf.tanh(mean / 5)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_413": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_414": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_415": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "{'none': lambda : mean, 'tanh5': lambda : 5.0 * tf.math.tanh(mean / 5.0)}[self._mean_act]()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "mean1 * tf.cast(mask_use1, mean1.dtype) + mean2 * tf.cast(mask_use2, mean2.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hmean', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ],
                        [
                            "5 * tf.tanh(mean / 5)",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(mean, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_160": {
                "features": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.cast(std, dtype)",
                            "Call"
                        ],
                        [
                            "{'softplus': lambda : tf.nn.softplus(std), 'abs': lambda : tf.math.abs(std + 1), 'sigmoid': lambda : tf.nn.sigmoid(std), 'sigmoid2': lambda : 2 * tf.nn.sigmoid(std / 2)}[self._std_act]()",
                            "Call"
                        ],
                        [
                            "std + self._min_std",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hstd', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(std) + 0.01",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(std, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "self._std",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + 5) + 5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.sigmoid(std / 2) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_161": {
                "x": {
                    "value": "std + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_162": {
                "x": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.cast(std, dtype)",
                            "Call"
                        ],
                        [
                            "{'softplus': lambda : tf.nn.softplus(std), 'abs': lambda : tf.math.abs(std + 1), 'sigmoid': lambda : tf.nn.sigmoid(std), 'sigmoid2': lambda : 2 * tf.nn.sigmoid(std / 2)}[self._std_act]()",
                            "Call"
                        ],
                        [
                            "std + self._min_std",
                            "BinOp"
                        ],
                        [
                            "self.get(f'hstd', tfkl.Dense, np.prod(self._shape))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(std) + 0.01",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(std, tf.concat([tf.shape(features)[:-1], self._shape], 0))",
                            "Call"
                        ],
                        [
                            "self._std",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + 5) + 5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softplus(std + self._init_std) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "2 * tf.nn.sigmoid(std / 2) + self._min_std",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_332": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_422": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_157": {
                "x": {
                    "value": "mean / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_163": {
                "x": {
                    "value": "std / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_416": {
                "x": {
                    "value": "std / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_428": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([prior['deter'], embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'obi{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prev_stoch, prev_action, embed], -1)",
                            "Call"
                        ],
                        [
                            "self.get(f'ini{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'imo{i}', tfkl.Dense, self._hidden, self._act)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, self._stoch * self._discrete, None)(x)",
                            "Call"
                        ],
                        [
                            "self.get(name, tfkl.Dense, 2 * self._stoch, None)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(obs['image'], (-1,) + tuple(obs['image'].shape[-3:]))",
                            "Call"
                        ],
                        [
                            "self.get('h1', Conv, 1 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h2', Conv, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', Conv, 4 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', Conv, 8 * self._depth, self._kernels[3], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x.shape[0], np.prod(x.shape[1:])])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 32 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h1', tfkl.Dense, 128 * self._depth, None)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 2, 2, 32 * self._depth])",
                            "Call"
                        ],
                        [
                            "self.get('h2', ConvT, 4 * self._depth, self._kernels[0], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h3', ConvT, 2 * self._depth, self._kernels[1], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h4', ConvT, 1 * self._depth, self._kernels[2], **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "self.get('h5', ConvT, 2 * self._shape[-1], self._kernels[3], strides=2)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act)(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.get(f'h{index}', tfkl.Dense, self._units, self._act, **kw)(x)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, 2 * self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.get(f'hout', tfkl.Dense, self._size)(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "parts.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "DreamerV2/tools.py": {
        "tensorflow": {
            "concat_434": {
                "variable": {
                    "value": "next_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[value[1:], bootstrap[None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_578": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B, H, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_579": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B, H, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_603": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B, H, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_structure_42": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: x.numpy()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "create_file_writer_84": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "str(logdir)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_queue": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "numpy_function_137": {
                "func": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_147": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_339": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "super().sample(sample_shape, seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._sample_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_367": {
                "variable": {
                    "value": "self._threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "threshold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_406": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_407": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less_equal(tf.abs(y), 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(y, -0.99999997, 0.99999997)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "atanh_410": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_411": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_415": {
                "variable": {
                    "value": "log2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(2.0, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_429": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(reward, dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(reward.shape.ndims))",
                            "Call"
                        ],
                        [
                            "[axis] + dims[1:axis] + [0] + dims[axis + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_430": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(value, dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(reward.shape.ndims))",
                            "Call"
                        ],
                        [
                            "[axis] + dims[1:axis] + [0] + dims[axis + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_431": {
                "variable": {
                    "value": "pcont",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pcont",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pcont * tf.ones_like(reward)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(pcont, dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(reward.shape.ndims))",
                            "Call"
                        ],
                        [
                            "[axis] + dims[1:axis] + [0] + dims[axis + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_433": {
                "variable": {
                    "value": "bootstrap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_440": {
                "variable": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "returns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "static_scan(lambda agg, cur: cur[0] + cur[1] * lambda_ * agg, (inputs, pcont), bootstrap, reverse=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(returns, dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(reward.shape.ndims))",
                            "Call"
                        ],
                        [
                            "[axis] + dims[1:axis] + [0] + dims[axis + 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_473": {
                "variable": {
                    "value": "varibs",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "[module.variables for module in modules]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "global_norm_484": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tape.gradient(loss, varibs)",
                            "Call"
                        ],
                        [
                            "self._opt.get_unscaled_gradients(grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_543": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: x[index]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reward + pcont * next_values * (1 - lambda_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pack_sequence_as_549": {
                "structure": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "outputs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[[] for _ in tf.nest.flatten(start)]",
                            "ListComp"
                        ],
                        [
                            "[list(reversed(x)) for x in outputs]",
                            "ListComp"
                        ],
                        [
                            "[tf.stack(x, 0) for x in outputs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "normal_581": {
                "variable": {
                    "value": "proposals",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B, P, H, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_583": {
                "variable": {
                    "value": "proposals",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "proposals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(proposals, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(tf.clip_by_value(proposals, -1, 1)) + proposals - tf.stop_gradient(proposals)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_584": {
                "variable": {
                    "value": "flat_proposals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proposals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(proposals, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(tf.clip_by_value(proposals, -1, 1)) + proposals - tf.stop_gradient(proposals)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B * P, H, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_587": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(scores, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B, P)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_588": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ],
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "Variable",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_589": {
                "variable": {
                    "value": "best",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "proposals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(proposals, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(tf.clip_by_value(proposals, -1, 1)) + proposals - tf.stop_gradient(proposals)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[index for (index, d) in enumerate(done) if d]",
                            "ListComp"
                        ],
                        [
                            "range(len(tf.nest.flatten(inputs)[0]))",
                            "Call"
                        ],
                        [
                            "reversed(indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_590": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(proposals, indices, axis=1, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_591": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_606": {
                "variable": {
                    "value": "proposals",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B, P, H, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_625": {
                "variable": {
                    "value": "(e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_mean / tf.sqrt(e * e + v + 0.0001)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_627": {
                "variable": {
                    "value": "(e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_rawstd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_rawstd / tf.sqrt(e * e + v + 0.0001)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_629": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "mean + step_size * grad_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_structure_55": {
                "func": {
                    "value": "lambda x, y: x.assign(y)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(lambda x: x.numpy(), self.variables)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_288": {
                "x": {
                    "value": "self._dist.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_291": {
                "x": {
                    "value": "self._dist.mode()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_294": {
                "x": {
                    "value": "self._dist.entropy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_297": {
                "x": {
                    "value": "self._dist.sample(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_315": {
                "input_tensor": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dist.sample(self._samples)",
                            "Call"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_335": {
                "x": {
                    "value": "super().mode()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._sample_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_343": {
                "x": {
                    "value": "probs - tf.stop_gradient(probs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._sample_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_355": {
                "x": {
                    "value": "self._exact.mode()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._sample_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_358": {
                "x": {
                    "value": "self._exact.entropy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._sample_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_361": {
                "x": {
                    "value": "super().sample(sample_shape, seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._sample_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_385": {
                "variable": {
                    "value": "clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "event",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "super().sample(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "event - tf.stop_gradient(event) + tf.stop_gradient(clipped)",
                            "BinOp"
                        ],
                        [
                            "event * self._mult",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.low + self._clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.high - self._clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_402": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LossScaleOptimizer_464": {
                "variable": {
                    "value": "self._opt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_477": {
                "tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._opt.get_scaled_loss(loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "self._name + '_loss'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_488": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tape.gradient(loss, varibs)",
                            "Call"
                        ],
                        [
                            "self._opt.get_unscaled_gradients(grads)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self._clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_norm": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.global_norm(grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_548": {
                "values": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_556": {
                "shape": {
                    "value": "dist.batch_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_565": {
                "input_tensor": {
                    "value": "tf.reduce_mean(probs, 2) * tf.math.log(tf.reduce_mean(probs, 2) + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_policy_574": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_577": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_policy_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_602": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_604": {
                "shape": {
                    "value": "(B, H, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softplus_610": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "rawstd",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.54 * tf.ones((B, H, A), dtype)",
                            "BinOp"
                        ],
                        [
                            "rawstd + step_size * grad_rawstd",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_615": {
                "variable": {
                    "value": "flat_proposals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proposals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(proposals, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(tf.clip_by_value(proposals, -1, 1)) + proposals - tf.stop_gradient(proposals)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B * P, H, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_618": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(scores, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B, P)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_626": {
                "x": {
                    "value": "e * e + v + 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_628": {
                "x": {
                    "value": "e * e + v + 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_679": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step + (done * length).sum()",
                            "BinOp"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "structure": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(lambda x: x.numpy(), self.variables)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_52": {
                "structure": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(lambda x: x.numpy(), self.variables)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_155": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name if isinstance(name, str) else name.decode('utf-8')",
                            "IfExp"
                        ],
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "video.transpose((1, 2, 0, 3, 4)).reshape((T, H, B * W, C))",
                            "Call"
                        ],
                        [
                            "video.transpose((0, 2, 1, 3, 4)).reshape((1, B * H, T * W, C))",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step + (done * length).sum()",
                            "BinOp"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_320": {
                "params": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._dist.sample(self._samples)",
                            "Call"
                        ],
                        [
                            "self._dist.sample(self._samples)",
                            "Call"
                        ],
                        [
                            "tf.cast(super().sample(sample_shape, seed), self._sample_dtype)",
                            "Call"
                        ],
                        [
                            "sample + tf.cast(probs - tf.stop_gradient(probs), self._sample_dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmax(logprob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_325": {
                "input_tensor": {
                    "value": "logprob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._dist.log_prob(sample)",
                            "Call"
                        ],
                        [
                            "self.log_prob(sample)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_equal_408": {
                "x": {
                    "value": "tf.abs(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_409": {
                "t": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.99999997",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.99999997",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_415": {
                "value": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_425": {
                "input": {
                    "value": "reward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(reward, dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_numerics_486": {
                "tensor": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.global_norm(grads)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "self._name + '_norm'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_538": {
                "structure": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_policy_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_587": {
                "input_tensor": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ],
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_607": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_623": {
                "x": {
                    "value": "tf.reduce_prod(tf.shape(scores))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dtype or prec.global_policy().compute_dtype",
                            "BoolOp"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "prec.global_policy().compute_dtype",
                            "Attribute"
                        ],
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_683": {
                "variable": {
                    "value": "mix",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "step / duration",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_688": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "step / warmup",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_110": {
                "name": {
                    "value": "'scalars/' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(value, dims)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_112": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name if isinstance(name, str) else name.decode('utf-8')",
                            "IfExp"
                        ],
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(value, dims)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_policy_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_320": {
                "input": {
                    "value": "logprob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._dist.log_prob(sample)",
                            "Call"
                        ],
                        [
                            "self.log_prob(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_policy_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_343": {
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.components_distribution.probs_parameter()",
                            "Call"
                        ],
                        [
                            "dist.probs_parameter()",
                            "Call"
                        ],
                        [
                            "super().probs_parameter()",
                            "Call"
                        ],
                        [
                            "probs[None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_policy_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_371": {
                "x": {
                    "value": "(event - self.mean()) ** 2 + self._threshold ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_387": {
                "input": {
                    "value": "event",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "super().sample(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "event - tf.stop_gradient(event) + tf.stop_gradient(clipped)",
                            "BinOp"
                        ],
                        [
                            "event * self._mult",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_408": {
                "x": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(tf.abs(y), 1.0), tf.clip_by_value(y, -0.99999997, 0.99999997), y)",
                            "Call"
                        ],
                        [
                            "tf.atanh(y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_416": {
                "features": {
                    "value": "-2.0 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_policy_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_539": {
                "structure": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reward + pcont * next_values * (1 - lambda_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_566": {
                "input_tensor": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.components_distribution.probs_parameter()",
                            "Call"
                        ],
                        [
                            "dist.probs_parameter()",
                            "Call"
                        ],
                        [
                            "super().probs_parameter()",
                            "Call"
                        ],
                        [
                            "probs[None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_567": {
                "x": {
                    "value": "tf.reduce_mean(probs, 2) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_614": {
                "input": {
                    "value": "proposals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(proposals, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(tf.clip_by_value(proposals, -1, 1)) + proposals - tf.stop_gradient(proposals)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_618": {
                "input_tensor": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ],
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_622": {
                "input_tensor": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ],
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_623": {
                "input_tensor": {
                    "value": "tf.shape(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_545": {
                "structure": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start",
                            "Name"
                        ],
                        [
                            "fn(last, inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_613": {
                "input": {
                    "value": "tf.clip_by_value(proposals, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_621": {
                "input": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros((B, H, A), dtype)",
                            "Call"
                        ],
                        [
                            "tf.zeros((B, H, A), dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mean + step_size * grad_mean, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_621": {
                "input": {
                    "value": "std",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ones((B, H, A), dtype)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(var + 1e-06)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(rawstd)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_623": {
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ],
                        [
                            "objective(states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(scores, -1), (B, P))",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_44": {
                "structure": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(lambda x: x.numpy(), self.variables)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_53": {
                "structure": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(lambda x: x.numpy(), self.variables)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_456": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Nadam_457": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adamax_458": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_459": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_460": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_567": {
                "input_tensor": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.components_distribution.probs_parameter()",
                            "Call"
                        ],
                        [
                            "dist.probs_parameter()",
                            "Call"
                        ],
                        [
                            "super().probs_parameter()",
                            "Call"
                        ],
                        [
                            "probs[None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_613": {
                "t": {
                    "value": "proposals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(proposals, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.random.normal((B, P, H, A), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "proposals * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(tf.clip_by_value(proposals, -1, 1)) + proposals - tf.stop_gradient(proposals)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}