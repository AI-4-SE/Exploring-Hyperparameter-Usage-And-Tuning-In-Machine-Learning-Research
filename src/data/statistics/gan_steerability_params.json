{
    "graphs/biggan/transform_base.py": {
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "truncation",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_size, img_size, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_size, img_size, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "compute_weighted_loss_117": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "losses": {
                    "value": "tf.square(transformed_output - target)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "loss_lpips",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lpips_tf.lpips(mask * transformed_output, mask * target, model='net-lin', net='alex')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_164": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_165": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_167": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables(scope=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_56": {
                "variable": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "variable": {
                    "value": "T3",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_58": {
                "variable": {
                    "value": "T4",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_62": {
                "variable": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim_z))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_73": {
                "variable": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim_z))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out_g + [z] + out_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_130": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reset_default_graph_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_65": {
                "variable": {
                    "value": "z_step_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_prev + T2(T1(z_prev))",
                            "BinOp"
                        ],
                        [
                            "z_step * z_norm / z_step_norm",
                            "BinOp"
                        ],
                        [
                            "z_prev + T4(T3(z_prev))",
                            "BinOp"
                        ],
                        [
                            "z_step * z_norm / z_step_norm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_76": {
                "variable": {
                    "value": "z_step_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_prev + T2(T1(z_prev))",
                            "BinOp"
                        ],
                        [
                            "z_step * z_norm / z_step_norm",
                            "BinOp"
                        ],
                        [
                            "z_prev + T4(T3(z_prev))",
                            "BinOp"
                        ],
                        [
                            "z_step * z_norm / z_step_norm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, Nsliders)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.normal(0.0, 0.1, [1, z.shape[1], Nsliders])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "walk",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_117": {
                "x": {
                    "value": "transformed_output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tf.multiply(tf.square(transformed_output - target), mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_133": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_170": {
                "scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "multiply_125": {
                "x": {
                    "value": "tf.square(transformed_output - target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_125": {
                "x": {
                    "value": "transformed_output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_131": {
                "scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "input": {
                    "value": "alpha[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_134": {
                "scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/pgan/transform_base.py": {
        "tensorflow": {
            "placeholder_30": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, Gs.input_shapes[1][1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "variable": {
                    "value": "outputs_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Gs.get_output_for(z, labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_size, img_size, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_size, img_size, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_110": {
                "variable": {
                    "value": "transformed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Gs.get_output_for(z_new, labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "compute_weighted_loss_114": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "losses": {
                    "value": "tf.square(transformed_output - target)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "loss_lpips",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lpips_tf.lpips(mask * transformed_output, mask * target, model='net-lin', net='alex')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_session_154": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_155": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_162": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables(scope=self.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InteractiveSession_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_126": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_52": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_53": {
                "variable": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_54": {
                "variable": {
                    "value": "T3",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "variable": {
                    "value": "T4",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_59": {
                "variable": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim_z))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_70": {
                "variable": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim_z))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out_g + [z] + out_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, Nsliders)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.normal(0.0, 0.1, [1, z.shape[1], Nsliders])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'walk'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_114": {
                "x": {
                    "value": "transformed_output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "tf.multiply(tf.square(transformed_output - target), mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_129": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_162": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_49": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'walk'",
                            "Constant"
                        ]
                    ]
                }
            },
            "norm_62": {
                "variable": {
                    "value": "z_step_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_prev + T2(T1(z_prev))",
                            "BinOp"
                        ],
                        [
                            "z_step * z_norm / z_step_norm",
                            "BinOp"
                        ],
                        [
                            "z_prev + T4(T3(z_prev))",
                            "BinOp"
                        ],
                        [
                            "z_step * z_norm / z_step_norm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_73": {
                "variable": {
                    "value": "z_step_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_prev + T2(T1(z_prev))",
                            "BinOp"
                        ],
                        [
                            "z_step * z_norm / z_step_norm",
                            "BinOp"
                        ],
                        [
                            "z_prev + T4(T3(z_prev))",
                            "BinOp"
                        ],
                        [
                            "z_step * z_norm / z_step_norm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_121": {
                "x": {
                    "value": "tf.square(transformed_output - target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_variable_initialized_156": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variables_initializer_160": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for (v, f) in zip(global_vars, is_not_initialized) if not f]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "trainable_variables_161": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_121": {
                "x": {
                    "value": "transformed_output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_127": {
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'walk'",
                            "Constant"
                        ]
                    ]
                }
            },
            "expand_dims_101": {
                "input": {
                    "value": "alpha[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_130": {
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'walk'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "graphs/stylegan/transform_base.py": {
        "tensorflow": {
            "placeholder_41": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim_z)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_44": {
                "variable": {
                    "value": "outputs_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Gs.get_output_for(z, None, is_validation=True, randomize_noise=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_size, img_size, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_size, img_size, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "compute_weighted_loss_148": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "losses": {
                    "value": "tf.square(transformed_output - target)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "loss_lpips",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lpips_tf.lpips(mask * transformed_output, mask * target, model='net-lin', net='alex')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "float_im",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "outputs_orig.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_196": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_197": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_204": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables(scope=self.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "latent_space",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent_space_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs.components.mapping.get_output_for(z, None, is_validation=True, randomize_noise=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, latent_space_orig.shape[1] * latent_space_orig.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "latent_space_new_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent_space_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_space",
                            "Name"
                        ],
                        [
                            "latent_space_new + tf.expand_dims(alpha[:, i], axis=1) * w[:, :, i]",
                            "BinOp"
                        ],
                        [
                            "w[alpha, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, latent_space_orig.shape[1], latent_space_orig.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "transformed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Gs.components.synthesis.get_output_for(latent_space_new_reshape, is_validation=True, randomize_noise=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "variable": {
                    "value": "transformed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Gs.get_output_for(latent_space_new, None, is_validation=True, randomize_noise=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_161": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "avg_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([avg_w] * nreps, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_77": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_latent_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_space.shape[1].value",
                            "Attribute"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(None, dim_latent_space)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "glorot_normal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_78": {
                "variable": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_latent_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_space.shape[1].value",
                            "Attribute"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(None, dim_latent_space)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "glorot_normal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_79": {
                "variable": {
                    "value": "T3",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_latent_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_space.shape[1].value",
                            "Attribute"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(None, dim_latent_space)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "glorot_normal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_80": {
                "variable": {
                    "value": "T4",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_latent_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_space.shape[1].value",
                            "Attribute"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(None, dim_latent_space)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "glorot_normal",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_84": {
                "variable": {
                    "value": "latent_space_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(latent_space_orig, [-1, latent_space_orig.shape[1] * latent_space_orig.shape[2]])",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_99": {
                "variable": {
                    "value": "latent_space_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(latent_space_orig, [-1, latent_space_orig.shape[1] * latent_space_orig.shape[2]])",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out_g + [latent_space] + out_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, Nsliders)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.normal(0.0, 0.1, w_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'walk'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_148": {
                "x": {
                    "value": "transformed_output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "tf.multiply(tf.square(transformed_output - target), mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_164": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_170": {
                "value": {
                    "value": "float_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, outputs_orig.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_204": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'walk'",
                            "Constant"
                        ]
                    ]
                }
            },
            "multiply_155": {
                "x": {
                    "value": "tf.square(transformed_output - target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_size, img_size, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_variable_initialized_198": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variables_initializer_202": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for (v, f) in zip(global_vars, is_not_initialized) if not f]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "trainable_variables_203": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_76": {
                "values": {
                    "value": "[avg_w] * nreps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_89": {
                "variable": {
                    "value": "latent_space_step_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent_space_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_space_prev + T2(T1(latent_space_prev))",
                            "BinOp"
                        ],
                        [
                            "latent_space_step * latent_space_norm / latent_space_step_norm",
                            "BinOp"
                        ],
                        [
                            "avg_w + self.psi * (latent_space_step - avg_w)",
                            "BinOp"
                        ],
                        [
                            "latent_space_prev + T4(T3(latent_space_prev))",
                            "BinOp"
                        ],
                        [
                            "latent_space_step * latent_space_norm / latent_space_step_norm",
                            "BinOp"
                        ],
                        [
                            "avg_w + self.psi * (latent_space_step - avg_w)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_104": {
                "variable": {
                    "value": "latent_space_step_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent_space_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_space_prev + T2(T1(latent_space_prev))",
                            "BinOp"
                        ],
                        [
                            "latent_space_step * latent_space_norm / latent_space_step_norm",
                            "BinOp"
                        ],
                        [
                            "avg_w + self.psi * (latent_space_step - avg_w)",
                            "BinOp"
                        ],
                        [
                            "latent_space_prev + T4(T3(latent_space_prev))",
                            "BinOp"
                        ],
                        [
                            "latent_space_step * latent_space_norm / latent_space_step_norm",
                            "BinOp"
                        ],
                        [
                            "avg_w + self.psi * (latent_space_step - avg_w)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_155": {
                "x": {
                    "value": "transformed_output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_162": {
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'walk'",
                            "Constant"
                        ]
                    ]
                }
            },
            "expand_dims_130": {
                "input": {
                    "value": "alpha[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_165": {
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'walk'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "resources/deeplab.py": {
        "tensorflow": {
            "get_default_graph_24": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MakeDirs_175": {
                "dirname": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(__file__)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "import_graph_def_42": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.GraphDef.FromString(file_handle.read())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "steer_aug/DCGAN-tensorflow/model_argminGW2_rot2d.py": {
        "tensorflow": {
            "placeholder_126": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_size, img_size, Nsliders)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_size, img_size, Nsliders)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.Nsliders)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_129": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.uniform(-1, 1, [1, self.z_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "walk",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + image_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "real_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "self.d_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits, tf.ones_like(self.D))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits_, tf.zeros_like(self.D_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits_, tf.ones_like(self.D_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_190": {
                "variable": {
                    "value": "self.d_loss_fake_new",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits_new_, tf.zeros_like(self.D_new_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_192": {
                "variable": {
                    "value": "self.g_loss_new",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits_new_, tf.ones_like(self.D_new_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_210": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_215": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_297": {
                "variable": {
                    "value": "d_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_299": {
                "variable": {
                    "value": "g_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_306": {
                "variable": {
                    "value": "w_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.learning_rate * 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_873": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ckpts'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.y_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "compute_weighted_loss_194": {
                "losses": {
                    "value": "tf.square(self.G_new - self.target)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_534": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_547": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_554": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_565": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_586": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.z_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_588": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(self.h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_592": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(self.h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_596": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_600": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn3(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_612": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_615": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(linear(z, self.gfc_dim, 'g_h0_lin'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_619": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_621": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_625": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(deconv2d(h1, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_633": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_644": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_647": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(h0, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_650": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(h1, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_653": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(h2, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_656": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn3(h3, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_667": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_670": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(linear(z, self.gfc_dim, 'g_h0_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_673": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_675": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_678": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(deconv2d(h1, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_685": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_696": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_699": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(h0, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_702": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(h1, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_705": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(h2, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_708": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn3(h3, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_719": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_722": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(linear(z, self.gfc_dim, 'g_h0_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_725": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_727": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_730": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(deconv2d(h1, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "write_graph_861": {
                "graph_or_graph_def": {
                    "value": "tf.graph_util.convert_variables_to_constants(self.sess, self.sess.graph_def, ['generator_1/Tanh'])",
                    "type": "Call",
                    "possible_values": []
                },
                "logdir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ckpts'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}-{:06d}_frz.pb'.format(filename, step)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_178": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_cond_concat(image, yb)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_183": {
                "input": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_185": {
                "input": {
                    "value": "self.D_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_187": {
                "input": {
                    "value": "self.D_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_191": {
                "input": {
                    "value": "self.D_new_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_193": {
                "input": {
                    "value": "self.D_new_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_194": {
                "x": {
                    "value": "self.G_new - self.target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_306": {
                "scope": {
                    "value": "walk",
                    "type": "str",
                    "possible_values": []
                }
            },
            "initialize_all_variables_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_605": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_629": {
                "x": {
                    "value": "deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_660": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_682": {
                "x": {
                    "value": "deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_712": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_734": {
                "x": {
                    "value": "deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_862": {
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "self.sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "['generator_1/Tanh']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_180": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_cond_concat(image, yb)",
                            "Call"
                        ]
                    ]
                },
                "targets": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_543": {
                "tensor": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn3(conv2d(h2, self.df_dim * 8, name='d_h3_conv')))",
                            "Call"
                        ],
                        [
                            "linear(h2, 1, 'd_h3_lin')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_545": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_562": {
                "x": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn3(conv2d(h2, self.df_dim * 8, name='d_h3_conv')))",
                            "Call"
                        ],
                        [
                            "linear(h2, 1, 'd_h3_lin')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "steer_aug/DCGAN-tensorflow/model_vanilla_rot2d.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + image_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "real_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "self.d_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits, tf.ones_like(self.D))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_151": {
                "variable": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits_, tf.zeros_like(self.D_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits_, tf.ones_like(self.D_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_164": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_252": {
                "variable": {
                    "value": "d_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_254": {
                "variable": {
                    "value": "g_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_771": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ckpts'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_434": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_447": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_465": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_477": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.z_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_479": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(self.h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_483": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(self.h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_487": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_491": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn3(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_503": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_506": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(linear(z, self.gfc_dim, 'g_h0_lin'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_510": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_512": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_522": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_529": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_540": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_543": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(h0, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_546": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(h1, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_549": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(h2, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_552": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn3(h3, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_563": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_566": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(linear(z, self.gfc_dim, 'g_h0_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_569": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_571": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_574": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(deconv2d(h1, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_582": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_593": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_596": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(h0, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_599": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(h1, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_602": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(h2, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_605": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn3(h3, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_616": {
                "variable": {
                    "value": "yb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_619": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(linear(z, self.gfc_dim, 'g_h0_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_622": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_624": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_627": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(deconv2d(h1, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "write_graph_759": {
                "graph_or_graph_def": {
                    "value": "tf.graph_util.convert_variables_to_constants(self.sess, self.sess.graph_def, ['generator_1/Tanh'])",
                    "type": "Call",
                    "possible_values": []
                },
                "logdir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ckpts'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}-{:06d}_frz.pb'.format(filename, step)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_145": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_cond_concat(image, yb)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_150": {
                "input": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "input": {
                    "value": "self.D_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_154": {
                "input": {
                    "value": "self.D_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_496": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_556": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_578": {
                "x": {
                    "value": "deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_609": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_631": {
                "x": {
                    "value": "deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_760": {
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "self.sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "['generator_1/Tanh']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_147": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_cond_concat(image, yb)",
                            "Call"
                        ]
                    ]
                },
                "targets": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_443": {
                "tensor": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn3(conv2d(h2, self.df_dim * 8, name='d_h3_conv')))",
                            "Call"
                        ],
                        [
                            "linear(h2, 1, 'd_h3_lin')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_445": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_462": {
                "x": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn3(conv2d(h2, self.df_dim * 8, name='d_h3_conv')))",
                            "Call"
                        ],
                        [
                            "linear(h2, 1, 'd_h3_lin')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_525": {
                "x": {
                    "value": "deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/detectors.py": {
        "tensorflow": {
            "GraphDef_10": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_13": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "detector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_9": {
                "name": {
                    "value": "resources/ssd_mobilenet_v1_coco_2017_11_17/frozen_inference_graph.pb",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}