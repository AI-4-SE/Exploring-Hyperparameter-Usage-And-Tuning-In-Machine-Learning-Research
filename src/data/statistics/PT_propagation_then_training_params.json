{
    "early_stop.py": {
        "torch": {}
    },
    "models.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_29": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(input, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Linear1(torch.matmul(adj, x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Linear2(torch.matmul(adj, x))",
                            "Call"
                        ],
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "(1 - self.alpha) * torch.matmul(adj, h) + self.alpha * h0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_44": {
                "input": {
                    "value": "self.Linear2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_55": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Linear2(torch.matmul(adj, x))",
                            "Call"
                        ],
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "(1 - self.alpha) * torch.matmul(adj, h) + self.alpha * h0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(torch.matmul(adj, x)))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_67": {
                "input": {
                    "value": "self.Linear(self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_83": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Linear2(torch.matmul(adj, x))",
                            "Call"
                        ],
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "(1 - self.alpha) * torch.matmul(adj, h) + self.alpha * h0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_15": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(torch.matmul(adj, x)))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_17": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(torch.matmul(adj, x)))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.Linear1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Linear2(torch.matmul(adj, x))",
                            "Call"
                        ],
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "(1 - self.alpha) * torch.matmul(adj, h) + self.alpha * h0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_112": {
                "input": {
                    "value": "torch.mul(torch.log_softmax(y_hat, dim=-1), y_soft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0",
                            "variable"
                        ],
                        [
                            "(1 - self.alpha) * torch.matmul(adj, y) + self.alpha * y0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_106": {
                "input": {
                    "value": "torch.mul(torch.log_softmax(y_hat, dim=-1), torch.mul(y_soft, y_hat_con ** exp))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_112": {
                "input": {
                    "value": "torch.log_softmax(y_hat, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y_soft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_106": {
                "input": {
                    "value": "y_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y_hat_con ** exp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "torch.mul(torch.log_softmax(y_hat, dim=-1), torch.mul(y_soft, y_hat_con))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "torch.mul(torch.log_softmax(y_hat, dim=-1), y_soft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_106": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_108": {
                "input": {
                    "value": "y_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y_hat_con",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.detach(torch.softmax(y_hat, dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_110": {
                "input": {
                    "value": "torch.log_softmax(y_hat, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y_soft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_108": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_110": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_APPNP.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_54": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_68": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_44": {
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "model.Linear1.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_GCN.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_52": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_66": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_42": {
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "model.Linear1.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_MLP.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_52": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_66": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_42": {
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "model.Linear1.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_PT.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "model.Linear1.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_SGC.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_51": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_65": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "args.ini_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_41": {
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "model.Linear.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(labels.shape[0], labels.max().item() + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.adj_matrix",
                            "Attribute"
                        ],
                        [
                            "str_noise(adj, labels, str_noise_rate, seed)",
                            "Call"
                        ],
                        [
                            "adj + sp.eye(adj.shape[0])",
                            "BinOp"
                        ],
                        [
                            "normalize_adj(adj)",
                            "Call"
                        ],
                        [
                            "sparse_mx_to_torch_sparse_tensor(adj)",
                            "Call"
                        ],
                        [
                            "adj.tocoo().astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0",
                            "variable"
                        ],
                        [
                            "torch.matmul(adj, y)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * y + alpha * y0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_121": {
                "variable": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(labels[i].cpu().numpy().astype(np.int64))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "labels.max().item() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "labels[i].cpu().numpy().astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}