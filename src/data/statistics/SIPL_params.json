{
    "code/Runners.py": {
        "sklearn": {}
    },
    "code/Utility.py": {
        "sklearn": {
            "KMeans_129": {
                "variable": {
                    "value": "clusterer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "nb_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(percentage * nb_sample)",
                            "Call"
                        ]
                    ]
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "elkan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_131": {
                "variable": {
                    "value": "clusterer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "nb_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(percentage * nb_sample)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/pmlp_utility.py": {
        "sklearn": {
            "KMeans_555": {
                "variable": {
                    "value": "clusterer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "nb_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(hyperparameters['cluster_scale'] * topology[-1][0], nb_select)",
                            "Call"
                        ],
                        [
                            "min(hyperparameters['cluster_scale'] * topology[-1][0], nb_select)",
                            "Call"
                        ]
                    ]
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "elkan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_557": {
                "variable": {
                    "value": "clusterer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "nb_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(hyperparameters['cluster_scale'] * topology[-1][0], nb_select)",
                            "Call"
                        ],
                        [
                            "min(hyperparameters['cluster_scale'] * topology[-1][0], nb_select)",
                            "Call"
                        ]
                    ]
                }
            },
            "KMeans_641": {
                "variable": {
                    "value": "clusterer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "nb_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(hyperparameters['cluster_scale'] * topology[-1][0], nb_select)",
                            "Call"
                        ],
                        [
                            "min(hyperparameters['cluster_scale'] * topology[-1][0], nb_select)",
                            "Call"
                        ]
                    ]
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "elkan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_643": {
                "variable": {
                    "value": "clusterer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "nb_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(hyperparameters['cluster_scale'] * topology[-1][0], nb_select)",
                            "Call"
                        ],
                        [
                            "min(hyperparameters['cluster_scale'] * topology[-1][0], nb_select)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/PLN.py": {
        "tensorflow": {
            "convert_to_tensor_117": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_true, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(y_true.T, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_118": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_pred, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(y_pred.T, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_129": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_true.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_130": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_pred.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_120": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_true, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(y_true.T, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_pred, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(y_pred.T, dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}