{
    "training/plot/plot_features.py": {
        "sklearn": {
            "PCA_188": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3 * K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "svd_solver": {
                    "value": "solver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'auto'",
                            "Method Argument"
                        ]
                    ]
                },
                "whiten": {
                    "value": "whiten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_56": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "variable": {
                    "value": "image_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_image.unsqueeze(0).cpu() * std_values + mean_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "image_source",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_69": {
                "variable": {
                    "value": "image_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_71": {
                "variable": {
                    "value": "image_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image.unsqueeze(0).cpu() * std_values + mean_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "image_target",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_71": {
                "variable": {
                    "value": "image_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "variable": {
                    "value": "image_target_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image_prime.unsqueeze(0).cpu() * std_values + mean_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "image_target_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_73": {
                "variable": {
                    "value": "image_target_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_75": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_197": {
                "variable": {
                    "value": "pca_ff",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_341": {
                "variable": {
                    "value": "flows",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_378": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_407": {
                "variable": {
                    "value": "img_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(img_grid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_42": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(0).unsqueeze(0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_240": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(0, h)[None].repeat(h, 1), torch.arange(0, h)[:, None].repeat(1, h)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_353": {
                "input": {
                    "value": "(A * A.log()).sum(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_329": {
                "start": {
                    "value": "u.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_240": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x1.shape[-1] ** 0.5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "admin/loading.py": {
        "torch": {
            "load_82": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_list[-1]",
                            "Subscript"
                        ],
                        [
                            "os.path.expanduser(checkpoint)",
                            "Call"
                        ],
                        [
                            "checkpoint_list[0]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "admin/multigpu.py": {
        "torch": {}
    },
    "admin/tensorboard.py": {
        "torch": {
            "SummaryWriter_16": {
                "variable": {
                    "value": "tb_info_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.directory, 'info')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_13": {
                "log_dir": {
                    "value": "os.path.join(self.directory, name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "assets/save_training_dataset_to_disk.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HomoAffTpsDataset(image_path=args.image_data_path, csv_file=args.csv_path, transforms=source_img_transforms, transforms_target=target_img_transforms, pyramid_param=pyramid_param, get_flow=True, output_image_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/MegaDepth/megadepth.py": {
        "torch": {
            "from_numpy_464": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.astype(np.bool if version.parse(torch.__version__) >= version.parse('1.1') else np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_462": {
                "variable": {
                    "value": "mask[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask[i].astype(np.bool if version.parse(torch.__version__) >= version.parse('1.1') else np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/geometric_matching_datasets/ETH3D_interval.py": {
        "torch": {}
    },
    "datasets/geometric_matching_datasets/dataset_video.py": {
        "torch": {}
    },
    "datasets/geometric_matching_datasets/hpatches.py": {
        "torch": {
            "from_numpy_143": {
                "variable": {
                    "value": "XwarpHom",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "YwarpHom",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "ZwarpHom",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[2, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "grid_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Xwarp.view(h_scale, w_scale), Ywarp.view(h_scale, w_scale)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/geometric_matching_datasets/training_dataset.py": {
        "torch": {
            "Tensor_97": {
                "variable": {
                    "value": "self.THETA_IDENTITY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "XwarpHom",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "YwarpHom",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "ZwarpHom",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[2, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "grid_full",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Xwarp, Ywarp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "grid_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Xwarp_crop_range, Ywarp_crop_range]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_batch.index_select(3, idx_pad_left), image_batch, image_batch.index_select(3, idx_pad_right))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_batch.index_select(2, idx_pad_top), image_batch, image_batch.index_select(2, idx_pad_bottom))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_447": {
                "variable": {
                    "value": "self.grid_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_448": {
                "variable": {
                    "value": "self.grid_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_490": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(Xmat - Xmat.transpose(0, 1), 2) + torch.pow(Ymat - Ymat.transpose(0, 1), 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(P_dist_squared)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(OO, X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_496": {
                "tensors": {
                    "value": "(K, P)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_498": {
                "variable": {
                    "value": "Li",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.cat((K, P), 1), torch.cat((P.transpose(0, 1), Z), 1)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_532": {
                "variable": {
                    "value": "W_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, :self.N, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_536": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, self.N:, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_557": {
                "variable": {
                    "value": "A_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, self.N:, :self.N].expand((batch_size, 3, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, :self.N, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_561": {
                "variable": {
                    "value": "A_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, self.N:, :self.N].expand((batch_size, 3, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, self.N:, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_604": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(delta_X, 2) + torch.pow(delta_Y, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(dist_squared)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_115": {
                "variable": {
                    "value": "warped_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_img.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.Tensor(np.dstack((source_img.astype(np.float32), source_img.astype(np.float32), source_img.astype(np.float32))))",
                            "Call"
                        ],
                        [
                            "image.transpose(1, 2).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate_grid(out_h, out_w, theta)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_117": {
                "variable": {
                    "value": "warped_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_img.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.Tensor(np.dstack((source_img.astype(np.float32), source_img.astype(np.float32), source_img.astype(np.float32))))",
                            "Call"
                        ],
                        [
                            "image.transpose(1, 2).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate_grid(out_h, out_w, theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_272": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_361": {
                "variable": {
                    "value": "cropped_source_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_363": {
                "variable": {
                    "value": "cropped_target_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_626": {
                "tensors": {
                    "value": "(points_X_prime, points_Y_prime)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_126": {
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.THETA_IDENTITY",
                            "Attribute"
                        ],
                        [
                            "theta.expand(1, 2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "data.iloc[2:11].values.astype('double').reshape(3, 3)",
                            "Call"
                        ],
                        [
                            "data.iloc[2:8].values.astype('float').reshape(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.astype(np.float32)).expand(1, 2, 3)",
                            "Call"
                        ],
                        [
                            "data.iloc[2:].values.astype('float')",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(theta, 1), 2)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "theta.expand(1, 18, 1, 1)",
                            "Call"
                        ],
                        [
                            "theta.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size((1, 3, out_h, out_w))",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_264": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_268": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_276": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_330": {
                "variable": {
                    "value": "img_src_orig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_473": {
                "tensors": {
                    "value": "(self.grid_X, self.grid_Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_485": {
                "input": {
                    "value": "Xmat - Xmat.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_486": {
                "input": {
                    "value": "Ymat - Ymat.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_490": {
                "input": {
                    "value": "P_dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(Xmat - Xmat.transpose(0, 1), 2) + torch.pow(Ymat - Ymat.transpose(0, 1), 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_598": {
                "input": {
                    "value": "delta_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_Y_for_summation - P_Y",
                            "BinOp"
                        ],
                        [
                            "p_Y_for_summation - P_Y.expand_as(p_Y_for_summation)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_604": {
                "input": {
                    "value": "dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(delta_X, 2) + torch.pow(delta_Y, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_619": {
                "input": {
                    "value": "torch.mul(W_X, U.expand_as(W_X))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_625": {
                "input": {
                    "value": "torch.mul(W_Y, U.expand_as(W_Y))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_128": {
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.THETA_IDENTITY",
                            "Attribute"
                        ],
                        [
                            "theta.expand(1, 2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "data.iloc[2:11].values.astype('double').reshape(3, 3)",
                            "Call"
                        ],
                        [
                            "data.iloc[2:8].values.astype('float').reshape(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.astype(np.float32)).expand(1, 2, 3)",
                            "Call"
                        ],
                        [
                            "data.iloc[2:].values.astype('float')",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(theta, 1), 2)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "theta.expand(1, 18, 1, 1)",
                            "Call"
                        ],
                        [
                            "theta.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size((1, 3, out_h, out_w))",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_334": {
                "variable": {
                    "value": "img_orig_target_vrbl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_src_orig.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([Xwarp, Ywarp], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_337": {
                "variable": {
                    "value": "img_orig_target_vrbl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_src_orig.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([Xwarp, Ywarp], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_388": {
                "variable": {
                    "value": "grid_m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cv2.resize(grid.numpy(), (layer_size, layer_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_497": {
                "tensors": {
                    "value": "(P.transpose(0, 1), Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_618": {
                "input": {
                    "value": "A_X[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_Y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 1].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_Y_batch.expand((batch_size,) + points_Y_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_619": {
                "input": {
                    "value": "W_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N)), Q_X)",
                            "Call"
                        ],
                        [
                            "W_X.unsqueeze(3).unsqueeze(4).transpose(1, 4).repeat(1, points_h, points_w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.expand_as(W_X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_624": {
                "input": {
                    "value": "A_Y[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_Y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 1].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_Y_batch.expand((batch_size,) + points_Y_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_625": {
                "input": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N)), Q_Y)",
                            "Call"
                        ],
                        [
                            "W_Y.unsqueeze(3).unsqueeze(4).transpose(1, 4).repeat(1, points_h, points_w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.expand_as(W_Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_397": {
                "variable": {
                    "value": "grid_m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cv2.resize(grid.numpy(), (layer_size, layer_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_617": {
                "input": {
                    "value": "A_X[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_X_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 0].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_X_batch.expand((batch_size,) + points_X_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_623": {
                "input": {
                    "value": "A_Y[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_X_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 0].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_X_batch.expand((batch_size,) + points_X_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/listdataset.py": {
        "torch": {}
    },
    "datasets/load_pre_made_datasets/load_data_and_add_discontinuity_dataset_with_interpolation.py": {
        "torch": {
            "unsqueeze_160": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_160": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_161": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/mixture_of_datasets.py": {
        "torch": {
            "ones_like_66": {
                "variable": {
                    "value": "dict_element[correspondence_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dict_element['correspondence_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "input": {
                    "value": "dict_element['correspondence_mask'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/object_augmented_dataset/base_image_dataset.py": {
        "torch": {}
    },
    "datasets/object_augmented_dataset/base_video_dataset.py": {
        "torch": {}
    },
    "datasets/object_augmented_dataset/bounding_box_utils.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bboxes, dtype=torch.float32, device=mask.device)",
                            "Call"
                        ],
                        [
                            "bboxes.reshape(batch_shape + (4,))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_19": {
                "variable": {
                    "value": "mx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.sum(dim=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_20": {
                "variable": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mx.min(), my.min(), mx.max(), my.max()] if len(mx) > 0 and len(my) > 0 else [0, 0, 0, 0]",
                            "IfExp"
                        ],
                        [
                            "[mx.min(), my.min(), mx.max(), my.max()] if len(mx) > 0 and len(my) > 0 else [0, 0, 0, 0]",
                            "IfExp"
                        ],
                        [
                            "torch.tensor(bb, dtype=torch.float32, device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1 + 0.5 * s, s), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, s), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "(x1 + 0.5 * s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "(x1, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1 + 0.5 * s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/object_augmented_dataset/coco.py": {
        "torch": {
            "Tensor_193": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_195": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/object_augmented_dataset/synthetic_object_augmentation_for_pairs_multiple_ob.py": {
        "torch": {
            "zeros_170": {
                "variable": {
                    "value": "bg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bg_image.shape[0], bg_image.shape[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fg_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "fg_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_257": {
                "variable": {
                    "value": "mask_of_objects_in_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occluded_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~correspondence_mask",
                            "UnaryOp"
                        ],
                        [
                            "~valid_flow | mask_of_reprojected_object_from_source_to_target",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_258": {
                "variable": {
                    "value": "mask_of_objects_in_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occluded_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~correspondence_mask",
                            "UnaryOp"
                        ],
                        [
                            "~valid_flow | mask_of_reprojected_object_from_source_to_target",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_259": {
                "variable": {
                    "value": "mask_of_reprojected_object_from_source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occluded_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~correspondence_mask",
                            "UnaryOp"
                        ],
                        [
                            "~valid_flow | mask_of_reprojected_object_from_source_to_target",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_554": {
                "variable": {
                    "value": "coord_all",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[y1, y1, y2, y2], [x1, x2, x2, x1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "bbox_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tl, sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_559": {
                "variable": {
                    "value": "bbox_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_565": {
                "variable": {
                    "value": "t_mat_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.identity(3)",
                            "Call"
                        ],
                        [
                            "t_scale @ t_rot @ t_shear @ t_mat @ t_translation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_567": {
                "variable": {
                    "value": "coords_xy1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords[1, :], coords[0, :], torch.ones_like(coords[1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_569": {
                "variable": {
                    "value": "coords_xy_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_mat_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(t_mat).float()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "coords_xy1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((coords[1, :], coords[0, :], torch.ones_like(coords[1, :])))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_234": {
                "variable": {
                    "value": "flow_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "background_sample['flow_map']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "correspondence_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "background_sample['correspondence_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_533": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_578": {
                "ndarray": {
                    "value": "mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv.warpPerspective(mask.numpy(), h, (mask.shape[1], mask.shape[0]), cv.INTER_LINEAR, borderMode=self.border_flag)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_433": {
                "variable": {
                    "value": "flow_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_file.permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "i_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.size_flow",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_433": {
                "variable": {
                    "value": "flow_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_438": {
                "variable": {
                    "value": "mask_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correspondence_mask.unsqueeze(0).unsqueeze(0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "i_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.size_flow",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_438": {
                "variable": {
                    "value": "mask_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_557": {
                "input": {
                    "value": "coord_transf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_coords(coord_all, image_shape, *rand_params).flip(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "background_sample['mask_zero_borders']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_342": {
                "variable": {
                    "value": "flow_file",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_mask_fg.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.from_numpy(flow_fg_object).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "flow_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_bg",
                            "variable"
                        ],
                        [
                            "torch.where(target_mask_fg.unsqueeze(2), torch.from_numpy(flow_fg_object).float(), flow_file)",
                            "Call"
                        ],
                        [
                            "flow_file",
                            "variable"
                        ],
                        [
                            "self.target_transform(flow_file)",
                            "Call"
                        ],
                        [
                            "list_of_flows",
                            "variable"
                        ]
                    ]
                }
            },
            "max_558": {
                "input": {
                    "value": "coord_transf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_coords(coord_all, image_shape, *rand_params).flip(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_567": {
                "input": {
                    "value": "coords[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_357": {
                "variable": {
                    "value": "mask_fg_object_source_in_target_frame",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_342": {
                "ndarray": {
                    "value": "flow_fg_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dstack([flow_x, flow_y])",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_372": {
                "variable": {
                    "value": "mask_occluded_in_source",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/optical_flow_datasets/mpisintel.py": {
        "torch": {}
    },
    "datasets/semantic_matching_datasets/caltech_dataset.py": {
        "torch": {
            "tensor_84": {
                "variable": {
                    "value": "x_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda pt: float(pt), pts[pts.columns[0]][idx].split(',')))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "y_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda pt: float(pt), pts[pts.columns[1]][idx].split(',')))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack([x_pts, y_pts]), pad_pts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "(2, self.max_pts - n_pts)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_99": {
                "input": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.stack([x_pts, y_pts]), pad_pts], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_97": {
                "tensors": {
                    "value": "[x_pts, y_pts]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/semantic_matching_datasets/pf_dataset.py": {
        "torch": {
            "t_100": {
                "variable": {
                    "value": "point_A_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(point_source_coords)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_217": {
                "variable": {
                    "value": "point_A_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(point_source_coords)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_101": {
                "input": {
                    "value": "point_A_coords.max(1)[0] - point_A_coords.min(1)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_218": {
                "input": {
                    "value": "point_A_coords[:, :N_pts].max(1)[0] - point_A_coords[:, :N_pts].min(1)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/semantic_matching_datasets/pfpascal.py": {
        "torch": {
            "tensor_77": {
                "variable": {
                    "value": "src_kp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "read_mat(src_anns, 'kps')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "trg_kp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "read_mat(trg_anns, 'kps')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "src_box",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "read_mat(src_anns, 'bbox')[0].astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "trg_box",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "read_mat(trg_anns, 'bbox')[0].astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_90": {
                "tensors": {
                    "value": "src_kps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "t_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "trg_kps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "t_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_85": {
                "input": {
                    "value": "trg_kk",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/semantic_matching_datasets/pfwillow.py": {
        "torch": {
            "tensor_105": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "point_coords.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_113": {
                "input": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_list[idx, :].reshape(2, 10).copy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(point_coords.astype(np.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "data": {
                    "value": "max(batch['source_image'].shape[0], batch['source_image'].shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_96": {
                "input": {
                    "value": "batch['source_kps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_96": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_96": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/semantic_matching_datasets/semantic_keypoints_datasets.py": {
        "torch": {
            "zeros_like_28": {
                "variable": {
                    "value": "resized_kps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps.clone()",
                            "Call"
                        ],
                        [
                            "kps.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_62": {
                "variable": {
                    "value": "resized_kps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps.clone()",
                            "Call"
                        ],
                        [
                            "kps.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_65": {
                "variable": {
                    "value": "resized_kps[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_kps[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_66": {
                "variable": {
                    "value": "resized_kps[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_kps[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_157": {
                "variable": {
                    "value": "self.range_ts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.max_pts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "batch[n_pts]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "num_pts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point_coords, pad_pts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h_size, w_size, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h_size, w_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_266": {
                "variable": {
                    "value": "point_target_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "point_target_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "w_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_267": {
                "variable": {
                    "value": "point_target_coords[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "point_target_coords[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "h_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_236": {
                "variable": {
                    "value": "pckthres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox[2] - bbox[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "pckthres",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "max(imsize_t[0], imsize_t[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "*size": {
                    "value": "(xy, self.max_pts - n_pts)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_257": {
                "input": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_list[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([point_coords, pad_pts], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_269": {
                "input": {
                    "value": "point_target_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_271": {
                "input": {
                    "value": "point_target_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/semantic_matching_datasets/spair.py": {
        "torch": {
            "tensor_53": {
                "data": {
                    "value": "x['src_kps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "x['trg_kps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "x['src_bndbox']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "x['trg_bndbox']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "x['viewpoint_variation']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "x['scale_variation']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "x['truncation']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "x['occlusion']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/semantic_matching_datasets/tss.py": {
        "torch": {}
    },
    "datasets/synthetic_warp_dataset.py": {
        "torch": {
            "from_numpy_101": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict['image']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "image.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "image.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_122": {
                "variable": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.synthetic_flow_generator().detach()",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_gt, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_140": {
                "variable": {
                    "value": "source_image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(source_image_resized, self.output_size, mode='area')",
                            "Call"
                        ],
                        [
                            "source_image_resized.squeeze(0).permute(1, 2, 0).numpy().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "self.source_image_transform(source_image_resized)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_142": {
                "variable": {
                    "value": "target_image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(target_image_resized, self.output_size, mode='area')",
                            "Call"
                        ],
                        [
                            "target_image_resized.squeeze(0).permute(1, 2, 0).numpy().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "self.target_image_transform(target_image_resized)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_gt[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flow_gt_resized, self.output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_gt_resized.squeeze(0).permute(1, 2, 0).numpy()",
                            "Call"
                        ],
                        [
                            "self.flow_transform(flow_gt_resized)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_149": {
                "variable": {
                    "value": "mask_zero_borders",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_zero_borders.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "mask_zero_borders",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/util.py": {
        "torch": {}
    },
    "demos/demo_confident_matches.py": {
        "torch": {
            "set_grad_enabled_21": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "last_data['image0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_162": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.cvtColor(frame, cv2.COLOR_GRAY2RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_163": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_163": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "demos/demo_warping_videos.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetNoGT(args.data_dir, source_image_transform=input_transform, target_image_transform=input_transform, middle_image=args.middle, start=args.start, end=args.end)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_137": {
                "variable": {
                    "value": "flow_estimated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_estimated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(flow_estimated, size=(h_g, w_g), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_g, w_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "demos/utils.py": {
        "torch": {
            "from_numpy_260": {
                "ndarray": {
                    "value": "frame / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "eval_matching.py": {
        "torch": {
            "set_grad_enabled_17": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_244": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "empty_cache_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_240": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_241": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_242": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PFPascalDataset(settings.env.PFPascal, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.PFWillowDataset(settings.env.PFWillow, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.TSSDataset(os.path.join(settings.env.tss, sub_data), source_image_transform=input_transform, target_image_transform=input_transform, flow_transform=target_transform, co_transform=co_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SPairDataset(settings.env.spair, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CaltechDataset(settings.env.caltech, source_image_transform=input_transform, target_image_transform=input_transform, split='test', flow_transform=target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_pose_estimation.py": {
        "torch": {
            "set_grad_enabled_20": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_248": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_70": {
                "variable": {
                    "value": "Is",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_70": {
                "variable": {
                    "value": "Is",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "Is",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_71": {
                "variable": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_71": {
                "variable": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "mask_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size_of_flow_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(It_numpy.shape[0] // 4, It_numpy.shape[1] // 4)",
                            "Tuple"
                        ],
                        [
                            "It_numpy.shape[:2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "mask_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model_selection.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_27": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/GLUNet/BaseNet.py": {
        "torch": {
            "interpolate_127": {
                "variable": {
                    "value": "up_flow4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalise_and_convert_mapping_to_flow(est_map4)",
                            "Call"
                        ],
                        [
                            "flow4 / div",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 8.0), int(w_original / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_165": {
                "variable": {
                    "value": "up_flow3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 4.0), int(w_original / 4.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "corr2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(corr4, init_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "corr2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/GLUNet/GLU_Net.py": {
        "torch": {
            "interpolate_457": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.estimate_flow_with_flipping_condition(source_img, target_img, output_shape=output_shape, scaling=scaling)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_467": {
                "variable": {
                    "value": "flow_est_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_backward['flow_estimates'][-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est_backward, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.estimate_flow_with_flipping_condition(target_img, source_img, output_shape=output_shape, scaling=scaling)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_472": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + self.warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_507": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + self.warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "up_flow4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalise_and_convert_mapping_to_flow(est_map4)",
                            "Call"
                        ],
                        [
                            "flow4.clone()",
                            "Call"
                        ],
                        [
                            "unnormalise_and_convert_mapping_to_flow(est_map4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_301": {
                "variable": {
                    "value": "up_flow3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ],
                        [
                            "flow3.clone()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 8.0), int(w_original / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_305": {
                "variable": {
                    "value": "up_flow3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ],
                        [
                            "flow3.clone()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 8.0), int(w_original / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "corr2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_338": {
                "variable": {
                    "value": "up_flow2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow2 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 4.0), int(w_original / 4.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "corr1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr1, up_flow2, up_feat2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3, input_refinement)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, input_refinement)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_566": {
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "target_img.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_566": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_271": {
                "variable": {
                    "value": "up_flow3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ],
                        [
                            "flow3.clone()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_274": {
                "variable": {
                    "value": "c23_bis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c22",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_276": {
                "variable": {
                    "value": "c13_bis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c12",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "corr2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "corr1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr1, up_flow2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/GLUNet/Semantic_GLUNet.py": {
        "torch": {
            "Sequential_65": {
                "variable": {
                    "value": "self.__dict__[_modules][level_4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*removed",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_121": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "c24_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c24, F.interpolate(input=c25, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "c14_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c14, F.interpolate(input=c15, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "c23_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c23, F.interpolate(input=c24, size=(32, 32), mode='bilinear', align_corners=False), F.interpolate(input=c25, size=(32, 32), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "c13_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c13, F.interpolate(input=c14, size=(32, 32), mode='bilinear', align_corners=False), F.interpolate(input=c15, size=(32, 32), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_369": {
                "variable": {
                    "value": "corr2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "corr1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr1, up_flow2, up_feat2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_507": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.estimate_flow_with_flipping_condition(source_img, target_img, output_shape=output_shape, scaling=scaling)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_517": {
                "variable": {
                    "value": "flow_est_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_backward['flow_estimates'][-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est_backward, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.estimate_flow_with_flipping_condition(target_img, source_img, output_shape=output_shape, scaling=scaling)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_522": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + self.warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_557": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + self.warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_353": {
                "variable": {
                    "value": "up_flow3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 8.0), int(w_original / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_357": {
                "variable": {
                    "value": "up_flow3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 8.0), int(w_original / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "modules[level_ + str(n_block)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tmp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_227": {
                "input": {
                    "value": "corr4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(c24.shape[0], c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_410": {
                "variable": {
                    "value": "c24_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c24, F.interpolate(input=c25, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "c14_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c14, F.interpolate(input=c15, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_417": {
                "variable": {
                    "value": "average_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(flow4[:, 0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_419": {
                "variable": {
                    "value": "(value, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4[0].view(16 * 16, 16 * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_616": {
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "target_img.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_616": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='bilinear', align_corners=False, recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ],
                        [
                            "self.l_dc_conv4(self.l_dc_conv3(self.l_dc_conv2(self.l_dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='bilinear', align_corners=False, recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ],
                        [
                            "self.l_dc_conv4(self.l_dc_conv3(self.l_dc_conv2(self.l_dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_291": {
                "input": {
                    "value": "c25",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_source_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_292": {
                "input": {
                    "value": "c15",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_302": {
                "input": {
                    "value": "c24",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_source_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_303": {
                "input": {
                    "value": "c25",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_source_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_304": {
                "input": {
                    "value": "c14",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_305": {
                "input": {
                    "value": "c15",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_340": {
                "variable": {
                    "value": "up_flow3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_343": {
                "variable": {
                    "value": "c23_bis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_source_pyr[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_344": {
                "variable": {
                    "value": "c13_bis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target_pyr[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "c24_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c24, F.interpolate(input=c25, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "c14_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c14, F.interpolate(input=c15, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_451": {
                "variable": {
                    "value": "average_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(flow4[:, 0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_453": {
                "variable": {
                    "value": "(value, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4[0].view(16 * 16, 16 * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_417": {
                "input": {
                    "value": "flow4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_411": {
                "input": {
                    "value": "c25",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_source_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_413": {
                "input": {
                    "value": "c15",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_451": {
                "input": {
                    "value": "flow4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_445": {
                "input": {
                    "value": "c25",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_source_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_447": {
                "input": {
                    "value": "c15",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-1]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/PDCNet/PDCNet.py": {
        "torch": {
            "LeakyReLU_49": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "as_tensor_59": {
                "variable": {
                    "value": "self.var_1_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var_1_minus_plus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_60": {
                "variable": {
                    "value": "self.var_2_minus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var_2_minus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Method Argument"
                        ],
                        [
                            "2.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_61": {
                "variable": {
                    "value": "self.var_2_plus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var_2_plus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_62": {
                "variable": {
                    "value": "self.var_2_plus_256",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var_2_plus_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_63": {
                "variable": {
                    "value": "self.var_3_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var_3_minus_plus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "520 ** 2",
                            "Method Argument"
                        ],
                        [
                            "256 ** 2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_64": {
                "variable": {
                    "value": "self.var_3_minus_plus_256",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var_3_minus_plus_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 ** 2",
                            "Method Argument"
                        ],
                        [
                            "256 ** 2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_370": {
                "variable": {
                    "value": "input_flow_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_flow_dec, up_uncertainty_components)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_373": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_429": {
                "variable": {
                    "value": "up_large_log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var_map[:, 1].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(x) for x in output_size]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_431": {
                "variable": {
                    "value": "up_probability_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(x) for x in output_size]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "up_uncertainty_components4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(up_log_var_map4, up_probability_map4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "up_uncertainty_components3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(up_log_var_map3, up_probability_map3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_530": {
                "variable": {
                    "value": "up_uncertainty_components2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(up_log_var_map2, up_probability_map2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "input_uncertainty",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr_uncertainty, flow, up_previous_uncertainty, up_previous_flow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "input_uncertainty",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr_uncertainty, flow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "log_var_map4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(small_log_var_map4, large_log_var_map4, outlier_log_var_map4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "log_var_map4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(small_log_var_map4, large_log_var_map4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, input_refinement)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(small_log_var_map, large_log_var_map, outlier_log_var_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(small_log_var_map, large_log_var_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_423": {
                "variable": {
                    "value": "up_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_flow + up_flow",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(x) for x in output_size]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "up_log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(up_small_log_var_map, up_large_log_var_map, up_outlier_log_var_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "up_log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(up_small_log_var_map, up_large_log_var_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "input_flow_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr, up_flow, up_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "input_flow_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr, up_flow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "input_flow_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr, c_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_332": {
                "input": {
                    "value": "large_log_var_map4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.constrain_large_log_var_map(self.var_2_minus, self.var_2_plus_256, large_log_var_map4)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_332": {
                "input": {
                    "value": "self.var_1_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_334": {
                "input": {
                    "value": "large_log_var_map4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.constrain_large_log_var_map(self.var_2_minus, self.var_2_plus_256, large_log_var_map4)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_334": {
                "input": {
                    "value": "self.var_3_minus_plus_256",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_340": {
                "input": {
                    "value": "large_log_var_map4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.constrain_large_log_var_map(self.var_2_minus, self.var_2_plus_256, large_log_var_map4)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_340": {
                "input": {
                    "value": "self.var_1_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_362": {
                "variable": {
                    "value": "input_flow_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr, c_t, up_flow, up_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_403": {
                "input": {
                    "value": "large_log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.constrain_large_log_var_map(self.var_2_minus, sigma_max, large_log_var_map)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_403": {
                "input": {
                    "value": "self.var_1_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_405": {
                "input": {
                    "value": "large_log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.constrain_large_log_var_map(self.var_2_minus, sigma_max, large_log_var_map)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_405": {
                "input": {
                    "value": "self.var_3_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_411": {
                "input": {
                    "value": "large_log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.constrain_large_log_var_map(self.var_2_minus, sigma_max, large_log_var_map)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_411": {
                "input": {
                    "value": "self.var_1_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_434": {
                "input": {
                    "value": "up_large_log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=log_var_map[:, 1].unsqueeze(1), size=output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_434": {
                "input": {
                    "value": "self.var_1_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_436": {
                "input": {
                    "value": "up_large_log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=log_var_map[:, 1].unsqueeze(1), size=output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_436": {
                "input": {
                    "value": "self.var_3_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_440": {
                "input": {
                    "value": "up_large_log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=log_var_map[:, 1].unsqueeze(1), size=output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_440": {
                "input": {
                    "value": "self.var_1_minus_plus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "input_flow_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr, up_flow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/PDCNet/base_pdcnet.py": {
        "torch": {
            "Tensor_451": {
                "variable": {
                    "value": "target_images_torch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_451": {
                "variable": {
                    "value": "target_images_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_452": {
                "variable": {
                    "value": "source_images_torch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_452": {
                "variable": {
                    "value": "source_images_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_712": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_mapping_to_flow(mapping_estimated_final)",
                            "Call"
                        ],
                        [
                            "flow_est * mask.float() * warping_mask.float() + flow_est_first * (~(mask & warping_mask)).float()",
                            "BinOp"
                        ],
                        [
                            "convert_mapping_to_flow(mapping_estimated_final)",
                            "Call"
                        ],
                        [
                            "flow_est * mask.float() * warping_mask.float() + flow_est_first * (~(mask & warping_mask)).float()",
                            "BinOp"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_133": {
                "variable": {
                    "value": "large_log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_min + (var_max - var_min) * torch.sigmoid(large_log_var_map - torch.log(var_max))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_170": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + self.warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_265": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_265": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_265": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_349": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_349": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_349": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_492": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mapping_from_homography_numpy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dstack((mapping_from_homography_x, mapping_from_homography_y))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_492": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_492": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_591": {
                "variable": {
                    "value": "mask_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_building.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_591": {
                "variable": {
                    "value": "mask_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_593": {
                "variable": {
                    "value": "mask_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_padded.to(self.device).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size_of_flow_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(image_shape_ // 4) for image_shape_ in data_target['size_resized_padded']]",
                            "ListComp"
                        ],
                        [
                            "data_target['size_resized_padded']",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_593": {
                "variable": {
                    "value": "mask_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_597": {
                "variable": {
                    "value": "mask_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size_of_flow_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(image_shape_ // 4) for image_shape_ in data_target['size_resized_padded']]",
                            "ListComp"
                        ],
                        [
                            "data_target['size_resized_padded']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_597": {
                "variable": {
                    "value": "mask_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_720": {
                "variable": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uncertainty_list[0][list_item]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "output['uncertainty_estimates'][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_722": {
                "variable": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uncertainty_list[1][list_item]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "output['uncertainty_estimates'][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_725": {
                "variable": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uncertainty_list[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "output['uncertainty_estimates'][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_727": {
                "variable": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uncertainty_list[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "output['uncertainty_estimates'][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_100": {
                "input": {
                    "value": "corr_uncertainty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.corr_module_for_corr_uncertainty_decoder(self.l2norm(c_source), self.l2norm(c_target))",
                            "Call"
                        ],
                        [
                            "self.corr_module_for_corr_uncertainty_decoder(c_source, c_target)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_136": {
                "input": {
                    "value": "var_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_496": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mapping_from_homography_torch.to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_556": {
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "target_img.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_556": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "input": {
                    "value": "large_log_var_map - torch.log(var_max)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_136": {
                "input": {
                    "value": "large_log_var_map - torch.log(var_max)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_140": {
                "input": {
                    "value": "var_min / max_exp.exp() + torch.exp(large_log_var_map - max_exp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_134": {
                "input": {
                    "value": "var_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_140": {
                "input": {
                    "value": "large_log_var_map - max_exp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_280": {
                "*size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_280": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_282": {
                "*size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_282": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_362": {
                "*size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_362": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_364": {
                "*size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_ori * scaling), int(w_ori * scaling))",
                            "Tuple"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "image_shape",
                            "variable"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_364": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/PDCNet/mod_uncertainty.py": {
        "torch": {
            "sum_17": {
                "variable": {
                    "value": "avg_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_map * torch.exp(log_var_map)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_30": {
                "variable": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_var_map[list_item]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[list_item]",
                            "Subscript"
                        ],
                        [
                            "uncertainty_corr[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty_corr[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty[:, 0].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_31": {
                "variable": {
                    "value": "p_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_map * (1 - torch.exp(-math.sqrt(2) * R / torch.sqrt(var_map))) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_13": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map[list_item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_15": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map[list_item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_second_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, previous_uncertainty)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "uncertainty_and_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(uncertainty_corr, flow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "variable": {
                    "value": "self.predict_uncertainty_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.predict_uncertainty_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_17": {
                "input": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_var_map[list_item]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[list_item]",
                            "Subscript"
                        ],
                        [
                            "uncertainty_corr[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty_corr[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty[:, 0].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_46": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.predict_uncertainty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.predict_uncertainty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.predict_uncertainty_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.predict_uncertainty_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "uncertainty_corr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_var_map, torch.zeros_like(log_var_map, requires_grad=False), proba_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsigmoid_188": {
                "variable": {
                    "value": "small_log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "small_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty[:, 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty[:, 1].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.predict_uncertainty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.predict_uncertainty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsigmoid_134": {
                "variable": {
                    "value": "small_log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "small_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty[:, 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty[:, 1].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_31": {
                "input": {
                    "value": "-math.sqrt(2) * R / torch.sqrt(var_map)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "input": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_var_map[list_item]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[list_item]",
                            "Subscript"
                        ],
                        [
                            "uncertainty_corr[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty_corr[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty[:, 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "uncertainty[:, 0].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_31": {
                "input": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_var_map)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/PWCNet/pwc_net.py": {
        "torch": {
            "ConvTranspose2d_43": {
                "variable": {
                    "value": "deconv_",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_60": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_0(corr6), corr6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5, c15, up_flow6, up_feat6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4, c14, up_flow5, up_feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, c13, up_flow4, up_feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, c12, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_330": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_331": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_353": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_388": {
                "variable": {
                    "value": "source_img_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 3, int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_389": {
                "variable": {
                    "value": "target_img_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 3, int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_490": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.div * flow_est_list[-1]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=(h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=(h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.div * flow_est_list[-1]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_500": {
                "variable": {
                    "value": "flow_est_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.div * output_backward['flow_estimates'][-1]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est_backward, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_505": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + self.warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_348": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv6_0(corr6), corr6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_350": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv6_0(corr6), corr6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_355": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(x.size()).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid, align_corners=True)",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ],
                        [
                            "estimate_mask(confident_mask_type, uncertainty_est, list_item=-1)",
                            "Call"
                        ],
                        [
                            "mask & mapping_estimated[:, 0].ge(0) & mapping_estimated[:, 1].ge(0) & mapping_estimated[:, 0].le(source_img.shape[-1] // scaling - 1) & mapping_estimated[:, 1].le(source_img.shape[-2] // scaling - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_357": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(x.size()).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid, align_corners=True)",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ],
                        [
                            "estimate_mask(confident_mask_type, uncertainty_est, list_item=-1)",
                            "Call"
                        ],
                        [
                            "mask & mapping_estimated[:, 0].ge(0) & mapping_estimated[:, 1].ge(0) & mapping_estimated[:, 0].le(source_img.shape[-1] // scaling - 1) & mapping_estimated[:, 1].le(source_img.shape[-2] // scaling - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_438": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.div * flow_est_list[-1]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=(h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=(h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.div * flow_est_list[-1]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_scale, w_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_443": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.div * flow_est_list[-1]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=(h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=(h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.div * flow_est_list[-1]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_scale, w_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_563": {
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "target_img.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_563": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_matching_net.py": {
        "torch": {
            "as_tensor_35": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_36": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "source_img_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_63": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_64": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_68": {
                "variable": {
                    "value": "source_img_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "source_img_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_124": {
                "variable": {
                    "value": "target_img_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_129": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_130": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "source_img_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_136": {
                "variable": {
                    "value": "target_img_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_670": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_1110": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.uint8(target_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_119": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_177": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_187": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=flow, size=output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_239": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_240": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_281": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_282": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_520": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping, self.device)",
                            "Call"
                        ],
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output['flow_estimates']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_636": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping, self.device)",
                            "Call"
                        ],
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output['flow_estimates']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_708": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_709": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_914": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_917": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_924": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ],
                        [
                            "[0.485",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_925": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ],
                        [
                            "[0.229",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_978": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping, self.device)",
                            "Call"
                        ],
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output['flow_estimates']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_1077": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping, self.device)",
                            "Call"
                        ],
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output['flow_estimates']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_1087": {
                "variable": {
                    "value": "flow_est_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_backward['flow_estimates'][-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est_backward, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_1092": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + self.warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_259": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dc_conv6(self.dc_conv5(self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))))",
                            "Call"
                        ],
                        [
                            "self.l_dc_conv6(self.l_dc_conv5(self.l_dc_conv4(self.l_dc_conv3(self.l_dc_conv2(self.l_dc_conv1(x))))))",
                            "Call"
                        ],
                        [
                            "self.dc_conv6_level3(self.dc_conv5_level3(self.dc_conv4_level3(self.dc_conv3_level3(self.dc_conv2_level3(self.dc_conv1_level3(x))))))",
                            "Call"
                        ],
                        [
                            "self.dc_conv6(self.dc_conv5(self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_261": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dc_conv6(self.dc_conv5(self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))))",
                            "Call"
                        ],
                        [
                            "self.l_dc_conv6(self.l_dc_conv5(self.l_dc_conv4(self.l_dc_conv3(self.l_dc_conv2(self.l_dc_conv1(x))))))",
                            "Call"
                        ],
                        [
                            "self.dc_conv6_level3(self.dc_conv5_level3(self.dc_conv4_level3(self.dc_conv3_level3(self.dc_conv2_level3(self.dc_conv1_level3(x))))))",
                            "Call"
                        ],
                        [
                            "self.dc_conv6(self.dc_conv5(self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_651": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(mapping_per_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_651": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_1027": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping, self.device)",
                            "Call"
                        ],
                        [
                            "flow_est_list[0]",
                            "Subscript"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output['flow_estimates']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est_list[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_556": {
                "variable": {
                    "value": "average_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(flow4[:, 0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_558": {
                "variable": {
                    "value": "(value, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4[0].view(16 * 16, 16 * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_670": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_582": {
                "variable": {
                    "value": "average_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(flow4[:, 0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_584": {
                "variable": {
                    "value": "(value, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4[0].view(16 * 16, 16 * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_374": {
                "input": {
                    "value": "corr4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ],
                        [
                            "self.corr(c24, c14)",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.l2norm(corr4)",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ],
                        [
                            "self.leakyRELU(corr4)",
                            "Call"
                        ],
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ],
                        [
                            "self.corr(c24, c14)",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.l2norm(corr4)",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ],
                        [
                            "self.leakyRELU(corr4)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_556": {
                "input": {
                    "value": "flow4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_875": {
                "input": {
                    "value": "corr4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ],
                        [
                            "self.corr(c24, c14)",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.l2norm(corr4)",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ],
                        [
                            "self.leakyRELU(corr4)",
                            "Call"
                        ],
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ],
                        [
                            "self.corr(c24, c14)",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.l2norm(corr4)",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ],
                        [
                            "self.leakyRELU(corr4)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_582": {
                "input": {
                    "value": "flow4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/feature_backbones/VGG_features.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "modules[level_ + str(n_block)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tmp",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/inference_utils.py": {
        "torch": {
            "arange_143": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "wB",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_144": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "hB",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "pts2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x[binary_mask].unsqueeze(1), grid_y[binary_mask].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "pts1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mapping_x[binary_mask].unsqueeze(1), mapping_y[binary_mask].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mapping_from_homography_numpy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dstack((mapping_from_homography_x, mapping_from_homography_y))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_269": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_269": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ndimage.maximum_filter(p_r.squeeze().cpu().numpy(), size=size_of_NMS_window).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_67": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ge_69": {
                "variable": {
                    "value": "mask_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty_est['p_r']",
                            "Subscript"
                        ],
                        [
                            "uncertainty_est['p_r']",
                            "Subscript"
                        ],
                        [
                            "estimate_probability_of_confidence_interval_of_mixture_density(uncertainty_est['weight_map'], uncertainty_est['log_var_map'], R=R)",
                            "Call"
                        ],
                        [
                            "uncertainty_est['p_r']",
                            "Subscript"
                        ],
                        [
                            "estimate_probability_of_confidence_interval_of_mixture_density(uncertainty_est['weight_map'], uncertainty_est['log_var_map'], R=R)",
                            "Call"
                        ],
                        [
                            "uncertainty_est['p_r']",
                            "Subscript"
                        ],
                        [
                            "estimate_probability_of_confidence_interval_of_mixture_density(uncertainty_est['weight_map'], uncertainty_est['log_var_map'], R=R)",
                            "Call"
                        ],
                        [
                            "uncertainty_est['inv_cyclic_consistency_error']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_273": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalize(mapping_from_homography_torch).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "mapping_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "meshgrid_91": {
                "variable": {
                    "value": "(XA, YA)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(size_of_NMS_window, w - size_of_NMS_window, size_of_NMS_window)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(size_of_NMS_window, h - size_of_NMS_window, size_of_NMS_window)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_r.ge(min_confidence / 100).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_91": {
                "start": {
                    "value": "size_of_NMS_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(info[1])",
                            "Call"
                        ],
                        [
                            "int(info[1])",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "w - size_of_NMS_window",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "size_of_NMS_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(info[1])",
                            "Call"
                        ],
                        [
                            "int(info[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_92": {
                "start": {
                    "value": "size_of_NMS_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(info[1])",
                            "Call"
                        ],
                        [
                            "int(info[1])",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "h - size_of_NMS_window",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "size_of_NMS_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(info[1])",
                            "Call"
                        ],
                        [
                            "int(info[1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules/batch_norm.py": {
        "torch": {
            "sqrt_19": {
                "input": {
                    "value": "self.running_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/bilinear_deconv.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "bilinear_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_65": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size[dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_66": {
                "input": {
                    "value": "delta / factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/consensus_network_modules.py": {
        "torch": {
            "unsqueeze_14": {
                "variable": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_16": {
                "variable": {
                    "value": "exp_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - x_k.expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv(x) + self.conv(x.permute(0, 1, 4, 5, 2, 3)).permute(0, 1, 4, 5, 2, 3)",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_45": {
                "variable": {
                    "value": "data_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Z, data, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_104": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_189": {
                "variable": {
                    "value": "(corr4d_B_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4d_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "corr4d_B / (corr4d_B_max + eps)",
                            "BinOp"
                        ],
                        [
                            "corr4d_B.view(batch_size, 1, fs1, fs2, fs3, fs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_190": {
                "variable": {
                    "value": "(corr4d_A_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4d_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "corr4d_A / (corr4d_A_max + eps)",
                            "BinOp"
                        ],
                        [
                            "corr4d_A.view(batch_size, 1, fs1, fs2, fs3, fs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(slices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_212": {
                "variable": {
                    "value": "(corr4d, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tuple(slices), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fmod_213": {
                "variable": {
                    "value": "max_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fmod_214": {
                "variable": {
                    "value": "max_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx.sub(max_l).div(k_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fmod_215": {
                "variable": {
                    "value": "max_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx.sub(max_l).div(k_size).sub(max_k).div(k_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_17": {
                "input": {
                    "value": "exp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sum(exp_x, dim).unsqueeze(dim).expand_as(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_49": {
                "variable": {
                    "value": "output[i, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_padded[i + padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_105": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(feature, 2), 1) + epsilon, 0.5).unsqueeze(1).expand_as(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*nn_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "exp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_17": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_125": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_target.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, htarget * wtarget)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_source.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "feature_source.view(b, c, hsource * wsource).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_source.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "feature_source.view(b, c, hsource * wsource).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_target.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, htarget * wtarget)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - x_k.expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv(x) + self.conv(x.permute(0, 1, 4, 5, 2, 3)).permute(0, 1, 4, 5, 2, 3)",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_53": {
                "input": {
                    "value": "data_padded[i + padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_56": {
                "input": {
                    "value": "data_padded[i + padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/feature_correlation_layer.py": {
        "torch": {
            "pow_18": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_12": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(feature ** 2, 1) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_12": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_37": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_target.view(b, c, h_target * w_target).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, h_target * w_target).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, htarget * wtarget)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_source.transpose(2, 3).contiguous().view(b, c, w_source * h_source)",
                            "Call"
                        ],
                        [
                            "feature_source.contiguous().view(b, c, h_source * w_source)",
                            "Call"
                        ],
                        [
                            "feature_source.view(b, c, hsource * wsource).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_target.view(b, c, h_target * w_target).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, h_target * w_target).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, htarget * wtarget)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_source.transpose(2, 3).contiguous().view(b, c, w_source * h_source)",
                            "Call"
                        ],
                        [
                            "feature_source.contiguous().view(b, c, h_source * w_source)",
                            "Call"
                        ],
                        [
                            "feature_source.view(b, c, hsource * wsource).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_66": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_source.transpose(2, 3).contiguous().view(b, c, w_source * h_source)",
                            "Call"
                        ],
                        [
                            "feature_source.contiguous().view(b, c, h_source * w_source)",
                            "Call"
                        ],
                        [
                            "feature_source.view(b, c, hsource * wsource).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_target.view(b, c, h_target * w_target).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, h_target * w_target).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, htarget * wtarget)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_18": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_12": {
                "input": {
                    "value": "feature ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/local_correlation/correlation.py": {
        "torch": {
            "current_stream_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/mod.py": {
        "torch": {
            "ConvTranspose2d_40": {
                "variable": {
                    "value": "deconv_",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_57": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_58": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nbr_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_129": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nbr_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_222": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_9": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_152": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_157": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_12": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_24": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/non_matching_corr.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.bin_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(initial_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "aug_corr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(correlation, bins0.to(correlation.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/semantic_matching_models/DHPF/base/correlation.py": {
        "torch": {
            "interpolate_10": {
                "variable": {
                    "value": "src_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(src_feat, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "src_feat.view(src_feat.size(0), src_feat.size(1), -1).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_11": {
                "variable": {
                    "value": "trg_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(trg_feat, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "trg_feat.view(trg_feat.size(0), trg_feat.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_16": {
                "input": {
                    "value": "src_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(src_feat, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "src_feat.view(src_feat.size(0), src_feat.size(1), -1).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trg_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(trg_feat, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "trg_feat.view(trg_feat.size(0), trg_feat.size(1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_21": {
                "input": {
                    "value": "correlation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_22": {
                "input": {
                    "value": "correlation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/DHPF/base/geometry.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "feat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(width))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_28": {
                "variable": {
                    "value": "feat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "feat_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(height))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "feat_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_ids.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_48": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-siz2[0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "siz2[0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_49": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-siz2[1]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "siz2[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "gaussian",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(x_axis.pow(2) / 2 / sig_sq[0] + y_axis.pow(2) / 2 / sig_sq[1])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_67": {
                "input": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps_duplicate[0].le(box_duplicate[2])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps_duplicate[1].le(box_duplicate[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "t_67": {
                "variable": {
                    "value": "nbr_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_20": {
                "tensors": {
                    "value": "(x_center, y_center)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_87": {
                "variable": {
                    "value": "(_, trg_argmax_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "variable": {
                    "value": "vector_summator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "geomet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls.rfs[:, :2].unsqueeze(0).repeat(len(kp.t()), 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "prd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prd, pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "prd_kps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "t_84": {
                "variable": {
                    "value": "kpss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kpss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(kpss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "(2, cls.max_pts - np)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/DHPF/base/norm.py": {
        "torch": {
            "interpolate_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_17": {
                "variable": {
                    "value": "vector_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/DHPF/base/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_82": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "weights[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weights[key].clone(), weights[key].clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "weights[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weights[key].clone(), weights[key].clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/DHPF/dhpf.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "pair_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_img, trg_img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_138": {
                "variable": {
                    "value": "layer_sel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(layer_sel).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_138": {
                "variable": {
                    "value": "layer_sel",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_212": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_215": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_222": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_223": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "geometric_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.rhm.run(c.clone().detach()) for c in correlation_matrix]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[img_side, img_side]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_255": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "w_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_263": {
                "variable": {
                    "value": "point_target_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "point_target_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "w_scale - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_264": {
                "variable": {
                    "value": "point_target_coords[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "point_target_coords[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "h_scale - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "variable": {
                    "value": "grid_X_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_275": {
                "variable": {
                    "value": "grid_Y_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "target_coor_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_X_vec, grid_Y_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_282": {
                "variable": {
                    "value": "predicted_source_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prd_kps[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_286": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(h_scale, w_scale, 2).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "flow_est.unsqueeze(0).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "predicted_source_coords - target_coor_resized.view(h_tgt, w_tgt, -1)",
                            "BinOp"
                        ],
                        [
                            "flow_est.unsqueeze(0).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_est, (h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "correlation_to_flow_w_argmax(correlation_matrix_t_to_s.view(b, -1, h, h), output_shape=output_shape, return_mapping=False)",
                            "Call"
                        ],
                        [
                            "correlation_to_flow_w_soft_argmax(correlation_matrix_t_to_s.view(b, -1, h, h), output_shape=output_shape, apply_softmax=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_scale, w_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_258": {
                "input": {
                    "value": "prd_kps[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_252": {
                "input": {
                    "value": "target_coor_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['target_kps'].clone()[0, :batch['n_pts'][0]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((grid_X_vec, grid_Y_vec), 1).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_266": {
                "input": {
                    "value": "point_target_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_280": {
                "input": {
                    "value": "target_coor_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['target_kps'].clone()[0, :batch['n_pts'][0]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((grid_X_vec, grid_Y_vec), 1).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_159": {
                "input": {
                    "value": "src_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_norm + Norm.feat_normalize(src_feat, self.upsample_size)",
                            "BinOp"
                        ],
                        [
                            "base_src_norm",
                            "variable"
                        ],
                        [
                            "src_norm.pow(0.5).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trg_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg_norm + Norm.feat_normalize(trg_feat, self.upsample_size)",
                            "BinOp"
                        ],
                        [
                            "base_trg_norm",
                            "variable"
                        ],
                        [
                            "trg_norm.pow(0.5).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/semantic_matching_models/DHPF/gating.py": {
        "torch": {
            "AdaptiveAvgPool2d_12": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_13": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.reduction_ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.reduction_ffns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.gumbel_ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.gumbel_ffns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "hard_sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "reduction_ffn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, out_channel, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "gumbel_ffn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, hidden_size, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel // self.reduction",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel // self.reduction",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "logits.detach().clone().uniform_() + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_68": {
                "input": {
                    "value": "soft_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(gumbel_input / temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/DHPF/rhm.py": {
        "torch": {
            "sum_27": {
                "variable": {
                    "value": "hspace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hspace.view(-1).index_add(0, self.hbin_ids.view(-1), votes.view(-1)).view_as(self.hspace)",
                            "Call"
                        ],
                        [
                            "torch.sum(hspace, dim=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(hspace.view(1, 1, self.nbins_y, self.nbins_x), self.hsfilter.unsqueeze(0).unsqueeze(0), padding=3).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "variable": {
                    "value": "hspace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hspace.view(1, 1, self.nbins_y, self.nbins_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.hsfilter.unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_31": {
                "input": {
                    "value": "hspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hspace.view(-1).index_add(0, self.hbin_ids.view(-1), votes.view(-1)).view_as(self.hspace)",
                            "Call"
                        ],
                        [
                            "torch.sum(hspace, dim=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(hspace.view(1, 1, self.nbins_y, self.nbins_x), self.hsfilter.unsqueeze(0).unsqueeze(0), padding=3).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.bin_ids.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(rf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_20": {
                "input": {
                    "value": "self.hspace.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/NCNet.py": {
        "torch": {
            "pow_26": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "data_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Z, data, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_304": {
                "variable": {
                    "value": "(corr4d_B_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4d_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "corr4d_B / (corr4d_B_max + eps)",
                            "BinOp"
                        ],
                        [
                            "corr4d_B.view(batch_size, 1, fs1, fs2, fs3, fs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_305": {
                "variable": {
                    "value": "(corr4d_A_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4d_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "corr4d_A / (corr4d_A_max + eps)",
                            "BinOp"
                        ],
                        [
                            "corr4d_A.view(batch_size, 1, fs1, fs2, fs3, fs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(slices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_327": {
                "variable": {
                    "value": "(corr4d, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tuple(slices), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fmod_328": {
                "variable": {
                    "value": "max_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fmod_329": {
                "variable": {
                    "value": "max_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx.sub(max_l).div(k_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fmod_330": {
                "variable": {
                    "value": "max_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx.sub(max_l).div(k_size).sub(max_k).div(k_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_585": {
                "variable": {
                    "value": "grid_X_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_586": {
                "variable": {
                    "value": "grid_Y_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_588": {
                "variable": {
                    "value": "grid_XY_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_X_vec, grid_Y_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_588": {
                "variable": {
                    "value": "grid_XY_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_598": {
                "variable": {
                    "value": "warped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_points.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_610": {
                "variable": {
                    "value": "target_points_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['target_kps'].clone()[0, :batch['n_pts'][0]].to(device)",
                            "Call"
                        ],
                        [
                            "target_points[valid]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_618": {
                "variable": {
                    "value": "warped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_points.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_629": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "output_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_27": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(feature, 2), 1) + epsilon, 0.5).unsqueeze(1).expand_as(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_65": {
                "variable": {
                    "value": "output[i, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_padded[i + padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_230": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*nn_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_355": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_462": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_465": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_472": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_473": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_558": {
                "variable": {
                    "value": "(max_score, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation_from_t_to_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(im_source=source_img, im_target=target_img)",
                            "Call"
                        ],
                        [
                            "correlation_from_t_to_s.view(b, -1, h_, w_)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(correlation_from_t_to_s.view(b, -1, h_, w_), dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward(im_source=source_img, im_target=target_img)",
                            "Call"
                        ],
                        [
                            "correlation_from_t_to_s.view(b, -1, h, w)",
                            "Call"
                        ],
                        [
                            "correlation_from_t_to_s[:, :h * w]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_560": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "flow_est.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_566": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_787": {
                "variable": {
                    "value": "(max_score, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation_from_t_to_s[:, :h * w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_789": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "flow_est.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_793": {
                "variable": {
                    "value": "non_occlusion_thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "non_occlusion_thresh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "flow_est.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_801": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.features.children())[:last_layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list[:last_layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "conv_body",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.features.children())[:-4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "bmm_239": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_B.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_B.view(b, c, hB * wB)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtraction(im_target)",
                            "Call"
                        ],
                        [
                            "feature_B.half()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_A.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "feature_A.view(b, c, hA * wA).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtraction(im_source)",
                            "Call"
                        ],
                        [
                            "feature_A.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_358": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_529": {
                "variable": {
                    "value": "correlation_from_t_to_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation_from_t_to_s.view(b, -1, h_, w_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_592": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_597": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_612": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_617": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_622": {
                "input": {
                    "value": "target_points[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ge_622": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_249": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_A.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "feature_A.view(b, c, hA * wA).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtraction(im_source)",
                            "Call"
                        ],
                        [
                            "feature_A.half()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_B.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_B.view(b, c, hB * wB)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtraction(im_target)",
                            "Call"
                        ],
                        [
                            "feature_B.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "round_630": {
                "input": {
                    "value": "target_points[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv3d_74": {
                "input": {
                    "value": "data_padded[i + padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_81": {
                "input": {
                    "value": "data_padded[i + padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_620": {
                "input": {
                    "value": "target_points[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "le_620": {
                "input": {
                    "value": "output_shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_621": {
                "input": {
                    "value": "target_points[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "le_621": {
                "input": {
                    "value": "output_shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_276": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/SFNet.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list[:layer1_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list[layer1_idx + 1:layer2_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list[layer2_idx + 1:layer3_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list[layer3_idx + 1:layer4_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 1024, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 1024, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 2048, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 2048, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.L2normalize(feature1)",
                            "Call"
                        ],
                        [
                            "feature1.view(b, c, h1 * w1)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_136": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "self.grid_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grid_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "self.grid_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grid_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "self.dx_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "self.dy_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "self.x_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "self.y_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.y_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_171": {
                "variable": {
                    "value": "gauss_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-((x - idx_x) ** 2 + (y - idx_y) ** 2) / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "smoothness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_dx, flow_dy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x.permute(0, 2, 3, 1), grid_y.permute(0, 2, 3, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x - grid_X, grid_y - grid_Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_256": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_303": {
                "variable": {
                    "value": "src_feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feat4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adap_layer_feat4(src_feat4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(src_feat4, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_305": {
                "variable": {
                    "value": "tgt_feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_feat4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adap_layer_feat4(tgt_feat4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tgt_feat4, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_358": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_361": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_375": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_376": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_472": {
                "variable": {
                    "value": "(max_score, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation_from_t_to_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(im_source=source_img, im_target=target_img, mode='inference')",
                            "Call"
                        ],
                        [
                            "correlation_from_t_to_s.view(b, -1, h, w)[:, :h * w]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_474": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "flow_est.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_480": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_650": {
                "variable": {
                    "value": "(max_score, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation_from_t_to_s[:, :h * w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_652": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "flow_est.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_656": {
                "variable": {
                    "value": "non_occlusion_thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "non_occlusion_thresh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "flow_est.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_663": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_179": {
                "input": {
                    "value": "x * beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_228": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(feature2.transpose(1, 2), feature1)",
                            "Call"
                        ],
                        [
                            "corr.view(b, h2 * w2, h1, w1)",
                            "Call"
                        ],
                        [
                            "self.relu(corr)",
                            "Call"
                        ],
                        [
                            "self.apply_gaussian_kernel(corr, sigma=self.kernel_sigma)",
                            "Call"
                        ],
                        [
                            "self.softmax_with_temperature(corr, beta=self.beta, d=1)",
                            "Call"
                        ],
                        [
                            "corr / (corr.sum(dim=1, keepdim=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "corr.view(-1, h, w, h, w)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(output['correlation_from_t_to_s'].view(b, -1, h, w), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_328": {
                "variable": {
                    "value": "warped_src_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "GT_tgt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_S2T",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_329": {
                "variable": {
                    "value": "warped_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "GT_src_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_T2S",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_368": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(input=source_img.float().to(device), size=(h_preprocessed, w_preprocessed), mode='area')",
                            "Call"
                        ],
                        [
                            "F.pad(source_img, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "source_img.float().div(255.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "p2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[16, 16, 16, 16]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_369": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(input=target_img.float().to(device), size=(h_preprocessed, w_preprocessed), mode='area')",
                            "Call"
                        ],
                        [
                            "F.pad(target_img, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "target_img.float().div(255.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "p2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[16, 16, 16, 16]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_443": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['correlation_from_t_to_s'].view(b, -1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_208": {
                "input": {
                    "value": "F.pad(flow, (1, 1, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dx_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_209": {
                "input": {
                    "value": "F.pad(flow, (0, 0, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dy_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_211": {
                "input": {
                    "value": "flow_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(F.pad(flow, (1, 1, 0, 0)), self.dx_kernel) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(flow_dx) * GT_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_212": {
                "input": {
                    "value": "flow_dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(F.pad(flow, (0, 0, 1, 1)), self.dy_kernel) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(flow_dy) * GT_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_434": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "small_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_T2S[:, 1:-1, 1:-1, :]",
                            "Subscript"
                        ],
                        [
                            "small_grid.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "grid_T2S[:, 1:-1, 1:-1, :]",
                            "Subscript"
                        ],
                        [
                            "small_grid.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_612": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "small_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_T2S[:, 1:-1, 1:-1, :]",
                            "Subscript"
                        ],
                        [
                            "small_grid.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "grid_T2S[:, 1:-1, 1:-1, :]",
                            "Subscript"
                        ],
                        [
                            "small_grid.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_208": {
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((grid_x - grid_X, grid_y - grid_Y), 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_209": {
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((grid_x - grid_X, grid_y - grid_Y), 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grid_sample_332": {
                "input": {
                    "value": "flow_T2S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_T2S * GT_tgt_mask",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_S2T",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_333": {
                "input": {
                    "value": "flow_S2T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_S2T * GT_src_mask",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_T2S",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/cats.py": {
        "torch": {
            "zeros_like_24": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_29": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_30": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_52": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.pos_embed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_hyperpixel, 1, img_size, embed_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.pos_embed_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_hyperpixel, img_size, 1, embed_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[MultiscaleBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer) for i in range(depth)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "img_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.pos_embed_x.repeat(1, 1, self.img_size, 1, 1), self.pos_embed_y.repeat(1, 1, 1, self.img_size, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_259": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_269": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(channels[i], self.feature_proj_dim) for i in hyperpixel_ids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_287": {
                "variable": {
                    "value": "self.x_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.x_normal, dtype=torch.float, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_289": {
                "variable": {
                    "value": "self.y_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.y_normal, dtype=torch.float, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_298": {
                "variable": {
                    "value": "exp_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_336": {
                "variable": {
                    "value": "gauss_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-((x - idx_x) ** 2 + (y - idx_y) ** 2) / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_371": {
                "variable": {
                    "value": "src_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "src_feats_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_372": {
                "variable": {
                    "value": "tgt_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tgt_feats_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_373": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "corrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "flow_t_to_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x_t_to_s, grid_y_t_to_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_424": {
                "variable": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_427": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_preprocessed, w_preprocessed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_435": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_436": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_518": {
                "variable": {
                    "value": "(max_score, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation_from_t_to_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output['correlation_from_t_to_s']",
                            "Subscript"
                        ],
                        [
                            "correlation_from_t_to_s.view(b, -1, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_520": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "flow_est.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_526": {
                "variable": {
                    "value": "cyclic_consistency_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est + warp(flow_est_backward, flow_est)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_53": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(feature, 2), dim) + epsilon, 0.5).unsqueeze(dim).expand_as(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_244": {
                "variable": {
                    "value": "feats[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone.conv1.forward(img)",
                            "Call"
                        ],
                        [
                            "self.backbone.bn1.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.relu.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.maxpool.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].conv1.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].bn1.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].relu.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].conv2.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].bn2.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].relu.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].conv3.forward(feat)",
                            "Call"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].bn3.forward(feat)",
                            "Call"
                        ],
                        [
                            "feat + res",
                            "BinOp"
                        ],
                        [
                            "self.backbone.__getattr__('layer%d' % lid)[bid].relu.forward(feat)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "flow_t_to_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x_t_to_s, grid_y_t_to_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_386": {
                "variable": {
                    "value": "flow_est_t_to_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_t_to_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((grid_x_t_to_s, grid_y_t_to_s), dim=1)",
                            "Call"
                        ],
                        [
                            "unnormalise_and_convert_mapping_to_flow(flow_t_to_s)",
                            "Call"
                        ],
                        [
                            "torch.cat((grid_x_t_to_s, grid_y_t_to_s), dim=1)",
                            "Call"
                        ],
                        [
                            "unnormalise_and_convert_mapping_to_flow(flow_t_to_s)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target.shape[-2:]",
                            "Subscript"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "flow_s_to_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x_s_to_t, grid_y_s_to_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_396": {
                "variable": {
                    "value": "flow_est_s_to_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_s_to_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((grid_x_s_to_t, grid_y_s_to_t), dim=1)",
                            "Call"
                        ],
                        [
                            "unnormalise_and_convert_mapping_to_flow(flow_s_to_t)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target.shape[-2:]",
                            "Subscript"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_483": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_485": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation_to_flow_w_argmax(correlation_from_t_to_s, output_shape)",
                            "Call"
                        ],
                        [
                            "torch.cat((grid_x, grid_y), dim=1)",
                            "Call"
                        ],
                        [
                            "unnormalise_and_convert_mapping_to_flow(flow_est)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_est, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_target.shape[-2:]",
                            "Subscript"
                        ],
                        [
                            "(int(h_scale * scaling), int(w_scale * scaling))",
                            "Tuple"
                        ],
                        [
                            "(h_scale, w_scale)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_hyperpixel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_hyperpixel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "(x.transpose(-1, -2), target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "(x, source)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "data": {
                    "value": "self.x_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "self.y_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_343": {
                "input": {
                    "value": "correlation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_344": {
                "input": {
                    "value": "correlation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_155": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_270": {
                "in_features": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feature_proj_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/semantic_matching_models/eval_util_dynamic.py": {
        "torch": {
            "stack_35": {
                "variable": {
                    "value": "M_A_norm_overscales",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "M_A_norm_overscales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(M_A_norm_overscales, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "M_B_norm_overscales",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "M_B_norm_overscales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(M_B_norm_overscales, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "MergedA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M_A_norm_overscales * A_scaleatts_set.view(B, S, 1, Ha, Wa)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_40": {
                "variable": {
                    "value": "MergedB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M_B_norm_overscales * B_scaleatts_set.view(B, S, 1, Hb, Wb)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_129": {
                "variable": {
                    "value": "distB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(deltaX, 2) + torch.pow(deltaY, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_130": {
                "variable": {
                    "value": "(vals, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "distB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.pow(deltaX, 2) + torch.pow(deltaY, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "warped_points_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(warped_points_x, warped_points_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "pck",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_points.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_77": {
                "variable": {
                    "value": "(match_A_vals, idx_A_Bvec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MergeA",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_91": {
                "variable": {
                    "value": "(match_B_vals, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MergeB",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_221": {
                "variable": {
                    "value": "N_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ne(p_src[0, :], -1) * torch.ne(p_src[1, :], -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_222": {
                "input": {
                    "value": "p_src[:, :N_pts] - p_wrp[:, :N_pts]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "le_224": {
                "variable": {
                    "value": "correct_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(p_src[:, :N_pts] - p_wrp[:, :N_pts], 2), 0), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "L_pck_mat * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_225": {
                "variable": {
                    "value": "pck[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "correct_points.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "nc_A_Bvec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MergeA",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "nc_B_Avec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MergeB",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_154": {
                "input": {
                    "value": "(target_points_norm[:, 0, :] - grid > 0).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_158": {
                "input": {
                    "value": "(target_points_norm[:, 1, :] - grid > 0).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "(X[idx.view(-1)].view(b, 1, N).contiguous(), Y[idx.view(-1)].view(b, 1, N).contiguous())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_179": {
                "input": {
                    "value": "target_points_norm - P_m_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_180": {
                "input": {
                    "value": "target_points_norm - P_p_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_181": {
                "input": {
                    "value": "target_points_norm - P_p_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_182": {
                "input": {
                    "value": "target_points_norm - P_m_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_129": {
                "input": {
                    "value": "deltaY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_points_norm[:, 1, :].unsqueeze(1) - yB.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_222": {
                "input": {
                    "value": "torch.pow(p_src[:, :N_pts] - p_wrp[:, :N_pts], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ne_221": {
                "input": {
                    "value": "p_src[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/semantic_matching_models/resnet.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_156": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "run_training.py": {
        "torch": {
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initial_seed_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_models.py": {
        "torch": {
            "device_138": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "query_image_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query_image_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(query_image_).permute(2, 0, 1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_54": {
                "variable": {
                    "value": "query_image_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "query_image_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "reference_image_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reference_image_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(reference_image_).permute(2, 0, 1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_55": {
                "variable": {
                    "value": "reference_image_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "variable": {
                    "value": "reference_image_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_136": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/GLUNet/train_GLUNet_GOCor_dynamic.py": {
        "torch": {
            "Adam_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_133": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/GLUNet/train_GLUNet_GOCor_static.py": {
        "torch": {
            "Adam_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_104": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/GLUNet/train_GLUNet_dynamic.py": {
        "torch": {
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_124": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/GLUNet/train_GLUNet_static.py": {
        "torch": {
            "Adam_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/GLUNet/train_GLUNet_with_synthetically_generated_data.py": {
        "torch": {
            "Adam_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_167": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PDCNet/train_GLUNet_GOCor_star_stage1.py": {
        "torch": {
            "Adam_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_141": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PDCNet/train_GLUNet_GOCor_star_stage2.py": {
        "torch": {
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_169": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_138": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PDCNet/train_PDCNet_plus_stage1.py": {
        "torch": {
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_154": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_126": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PDCNet/train_PDCNet_plus_stage2.py": {
        "torch": {
            "Adam_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PDCNet/train_PDCNet_stage1.py": {
        "torch": {
            "Adam_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_146": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PDCNet/train_PDCNet_stage2.py": {
        "torch": {
            "Adam_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params}, {'params': model.pyramid.parameters(), 'lr': settings.lr_feature_backbone}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_187": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': base_params}, {'params': model.pyramid.parameters(), 'lr': settings.lr_feature_backbone}], lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_143": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PWarpC/train_strongly_supervised_PWarpC_SFNet_pfpascal.py": {
        "torch": {
            "Adam_152": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_155": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PWarpC/train_strongly_supervised_PWarpC_SFNet_spair_from_pfpascal.py": {
        "torch": {
            "Adam_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_172": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PWarpC/train_weakly_supervised_PWarpC_SFNet_pfpascal.py": {
        "torch": {
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_167": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/PWarpC/train_weakly_supervised_PWarpC_SFNet_spair_from_pfpascal.py": {
        "torch": {
            "Adam_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/WarpC/train_WarpCBaseNet_vgg16_stage1.py": {
        "torch": {
            "Adam_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_160": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.step_size_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_106": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/WarpC/train_WarpC_GLUNet_stage1.py": {
        "torch": {
            "Adam_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_163": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.step_size_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/WarpC/train_WarpC_GLUNet_stage2.py": {
        "torch": {
            "Adam_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_184": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.step_size_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_settings/WarpC/train_ft_WarpCSemanticGLUNet.py": {
        "torch": {
            "Adam_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_151": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=settings.lr, weight_decay=0.0004)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "settings.step_size_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_101": {
                "f": {
                    "value": "settings.initial_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "training/actors/PWarpC_actor.py": {
        "torch": {
            "isnan_34": {
                "input": {
                    "value": "correlation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_35": {
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_36": {
                "input": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_166": {
                "input": {
                    "value": "correlation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_167": {
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_168": {
                "input": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_358": {
                "input": {
                    "value": "correlation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_359": {
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_360": {
                "input": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_479": {
                "input": {
                    "value": "loss_pairwise.detach() + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_533": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/actors/PWarpC_actor_DHPF.py": {
        "torch": {
            "sum_30": {
                "variable": {
                    "value": "vector_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_106": {
                "input": {
                    "value": "correlation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_107": {
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_108": {
                "input": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_284": {
                "input": {
                    "value": "correlation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_285": {
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_286": {
                "input": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_378": {
                "input": {
                    "value": "loss_neg.detach() + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/actors/batch_processing.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_22": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_50": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_91": {
                "variable": {
                    "value": "flow_gt_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mini_batch['flow_map'][0].to(self.device)",
                            "Call"
                        ],
                        [
                            "flow_gt_original.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "unormalise_and_convert_mapping_to_flow(mapping_gt_original.permute(0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "mini_batch['flow_map'].to(self.device)",
                            "Call"
                        ],
                        [
                            "flow_gt_original.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "mask_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "mask_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_153": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_222": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_253": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_253": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_114": {
                "variable": {
                    "value": "mask_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_114": {
                "variable": {
                    "value": "mask_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/actors/warp_consistency_actor_BaseNet.py": {
        "torch": {
            "interpolate_26": {
                "variable": {
                    "value": "estimated_flow_target_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_target_to_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(target_image, source_image)['flow_estimates'][-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(estimated_flow_target_to_source, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.net(im_target=mini_batch['target_image'], im_source=mini_batch['source_image'], im_target_pyr=im_target_pyr, im_source_pyr=im_source_pyr)['flow_estimates']",
                            "Subscript"
                        ],
                        [
                            "estimated_flow_target_to_source['flow_estimates']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_28": {
                "variable": {
                    "value": "estimated_flow_source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_source_to_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(source_image, target_image)['flow_estimates'][-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(estimated_flow_source_to_target, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.net(im_target=mini_batch['source_image'], im_source=mini_batch['target_image'], im_target_pyr=im_source_pyr, im_source_pyr=im_target_pyr)['flow_estimates']",
                            "Subscript"
                        ],
                        [
                            "estimated_flow_source_to_target['flow_estimates']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_71": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_138": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/actors/warp_consistency_actor_GLUNet.py": {
        "torch": {
            "interpolate_41": {
                "variable": {
                    "value": "estimated_flow_target_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_target_to_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_target_to_source['flow_estimates'][-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(estimated_flow_target_to_source, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_flow_target_to_source['flow_estimates']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_43": {
                "variable": {
                    "value": "estimated_flow_source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_source_to_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_source_to_target['flow_estimates'][-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(estimated_flow_source_to_target, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_source_to_target['flow_estimates']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_151": {
                "variable": {
                    "value": "flow_gt_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unormalise_and_convert_mapping_to_flow(mapping_gt.permute(0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "mini_batch['flow_map'].to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_97": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_165": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_original, w_original)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_170": {
                "variable": {
                    "value": "mask_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_170": {
                "variable": {
                    "value": "mask_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "flow_gt_ss_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mini_batch['flow_map_ss'].to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_222": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_original, w_original)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_222": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_227": {
                "variable": {
                    "value": "mask_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_227": {
                "variable": {
                    "value": "mask_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/actors/warp_consistency_utils/classical_losses_unsupervised_actor_GLUNet.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "mini_batch[source_image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch['source_image'].float().to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.resizing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "mini_batch[target_image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch['target_image'].float().to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.resizing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/actors/warp_consistency_utils/online_triplet_creation.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.synthetic_flow_generator(mini_batch=mini_batch, training=training, net=net)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_gt, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_134": {
                "variable": {
                    "value": "source_image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(source_image_resized, self.output_size, mode='area')",
                            "Call"
                        ],
                        [
                            "source_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(source_image_resized, self.output_size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_136": {
                "variable": {
                    "value": "target_image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(target_image_resized, self.output_size, mode='area')",
                            "Call"
                        ],
                        [
                            "target_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(target_image_resized, self.output_size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_138": {
                "variable": {
                    "value": "target_image_prime_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image_prime_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_image_prime[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(target_image_prime_resized, self.output_size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_140": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_gt[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flow_gt_resized, self.output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_145": {
                "variable": {
                    "value": "mask_zero_borders",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_zero_borders.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_145": {
                "variable": {
                    "value": "mask_zero_borders",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_237": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_294": {
                "variable": {
                    "value": "flow_gt_for_unsupervised",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_for_unsupervised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.synthetic_flow_generator_for_unsupervised(mini_batch=mini_batch, training=training, net=net).detach()",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_gt_for_unsupervised, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_309": {
                "variable": {
                    "value": "flow_gt_for_self_supervised",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_for_self_supervised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.synthetic_flow_generator_for_self_supervised(mini_batch=mini_batch, training=training, net=net).detach()",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_gt_for_self_supervised, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_371": {
                "variable": {
                    "value": "source_image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(source_image_resized, self.output_size, mode='area')",
                            "Call"
                        ],
                        [
                            "source_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(source_image_resized, self.output_size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_372": {
                "variable": {
                    "value": "target_image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(target_image_resized, self.output_size, mode='area')",
                            "Call"
                        ],
                        [
                            "target_image[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(target_image_resized, self.output_size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_373": {
                "variable": {
                    "value": "target_image_prime_for_unsupervised_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image_prime_for_unsupervised_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_image_prime_for_unsupervised[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(target_image_prime_for_unsupervised_resized, self.output_size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_375": {
                "variable": {
                    "value": "flow_gt_for_unsupervised_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_for_unsupervised_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_gt_for_unsupervised[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flow_gt_for_unsupervised_resized, self.output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_381": {
                "variable": {
                    "value": "mask_zero_borders_for_unsupervised",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_zero_borders_for_unsupervised.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_381": {
                "variable": {
                    "value": "mask_zero_borders_for_unsupervised",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_385": {
                "variable": {
                    "value": "target_image_prime_for_self_supervised_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image_prime_for_self_supervised_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_image_prime_for_self_supervised[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(target_image_prime_for_self_supervised_resized, self.output_size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_386": {
                "variable": {
                    "value": "flow_gt_for_self_supervised_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_for_self_supervised_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_gt_for_self_supervised[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flow_gt_for_self_supervised_resized, self.output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_392": {
                "variable": {
                    "value": "mask_zero_borders_for_self_supervised",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_zero_borders_for_self_supervised.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_392": {
                "variable": {
                    "value": "mask_zero_borders_for_self_supervised",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_149": {
                "variable": {
                    "value": "flow_gt_target_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_target_to_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "mini_batch['flow_map'][-1].to(self.device)",
                            "Call"
                        ],
                        [
                            "mini_batch['flow_map'].to(self.device)",
                            "Call"
                        ],
                        [
                            "flow_gt_target_to_source[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flow_gt_target_to_source, self.output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "mini_batch['flow_map'].to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "flow_gt_target_to_source[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flow_gt_target_to_source, self.output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_396": {
                "variable": {
                    "value": "flow_gt_target_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_target_to_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "mini_batch['flow_map'][-1].to(self.device)",
                            "Call"
                        ],
                        [
                            "mini_batch['flow_map'].to(self.device)",
                            "Call"
                        ],
                        [
                            "flow_gt_target_to_source[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flow_gt_target_to_source, self.output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "mini_batch['flow_map'].to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "flow_gt_target_to_source[:, :, y_start:y_start + self.crop_size[0], x_start:x_start + self.crop_size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flow_gt_target_to_source, self.output_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_154": {
                "variable": {
                    "value": "mask_gt_target_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_gt_target_to_source.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_401": {
                "variable": {
                    "value": "mask_gt_target_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_gt_target_to_source.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/actors/warp_consistency_utils/synthetic_flow_generation_from_pair_batch.py": {
        "torch": {
            "cat_186": {
                "variable": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "synthetic_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_239": {
                "variable": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "convert_mapping_to_flow(torch.from_numpy(mapping_from_homography_numpy).unsqueeze(0).permute(0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.cat(synthetic_flow, dim=0)",
                            "Call"
                        ],
                        [
                            "next(self.homography_dataloader_iterator)['flow_map'].to(self.device).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "next(self.homography_dataloader_iterator)['flow_map'].to(self.device).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "next(self.homography_dataloader_eval_iterator)['flow_map'].to(self.device).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "next(self.homography_dataloader_eval_iterator)['flow_map'].to(self.device).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_gt, self.size_output_flow, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat(synthetic_flow, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(synthetic_flow, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size_output_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_97": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_125": {
                "variable": {
                    "value": "source_image_for_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_image.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.image_prediction_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "variable": {
                    "value": "target_image_for_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.image_prediction_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_139": {
                "variable": {
                    "value": "consistent_matches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cyclic_consistency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimated_flow_target_to_source + warp(estimated_flow_source_to_target, estimated_flow_target_to_source)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "le_139": {
                "variable": {
                    "value": "consistent_matches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cyclic_cons_thresh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_205": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_260": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "synthetic_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_313": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "synthetic_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_180": {
                "variable": {
                    "value": "flow_gt_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "get_flow_from_predictions(estimated_flow_target_to_source[b_].unsqueeze(0), consistent_matches[b_], scaling, self.size_output_flow, min_nbr_points=self.min_nbr_points)",
                            "Call"
                        ],
                        [
                            "self.alternative_synthetic_flow_generator(mini_batch=mini_batch, training=training)",
                            "Call"
                        ],
                        [
                            "flow_gt_.to(self.device).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "flow_gt_.to(self.device)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_gt_, self.size_output_flow, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(torch.from_numpy(mapping_from_homography_numpy).unsqueeze(0).permute(0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "self.sample_transfo()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size_output_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "mapping_from_homography_numpy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dstack((mapping_from_homography_x, mapping_from_homography_y))",
                            "Call"
                        ],
                        [
                            "np.dstack((mapping_from_homography_x, mapping_from_homography_y))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_66": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "ndarray": {
                    "value": "mapping_from_homography_numpy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dstack((mapping_from_homography_x, mapping_from_homography_y))",
                            "Call"
                        ],
                        [
                            "np.dstack((mapping_from_homography_x, mapping_from_homography_y))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_290": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_290": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/basic_losses.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "flow_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_target_x[mask_gt].unsqueeze(1), flow_target_y[mask_gt].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_est_x[mask_gt].unsqueeze(1), flow_est_y[mask_gt].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_54": {
                "variable": {
                    "value": "EPE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est - flow_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "flow_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_target_x[mask_gt].unsqueeze(1), flow_target_y[mask_gt].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_est_x[mask_gt].unsqueeze(1), flow_est_y[mask_gt].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_97": {
                "variable": {
                    "value": "EPE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est - flow_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_36": {
                "variable": {
                    "value": "upsampled_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_max_pool2d(input * positive, size) - F.adaptive_max_pool2d(-input * negative, size)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "upsampled_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_max_pool2d(input * positive, size) - F.adaptive_max_pool2d(-input * negative, size)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_79": {
                "variable": {
                    "value": "upsampled_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_max_pool2d(input * positive, size) - F.adaptive_max_pool2d(-input * negative, size)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "upsampled_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_max_pool2d(input * positive, size) - F.adaptive_max_pool2d(-input * negative, size)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_122": {
                "variable": {
                    "value": "EPE_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_flow - est_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "L1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(est_flow - gt_flow)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_209": {
                "variable": {
                    "value": "L1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(est_flow - gt_flow)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_210": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_15": {
                "*args": {
                    "value": "-input * negative",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_164": {
                "input": {
                    "value": "est_flow - gt_flow",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_209": {
                "input": {
                    "value": "est_flow - gt_flow",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_127": {
                "input": {
                    "value": "EPE_map.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_127": {
                "input": {
                    "value": "EPE_map.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_169": {
                "input": {
                    "value": "L1.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_169": {
                "input": {
                    "value": "L1.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_215": {
                "input": {
                    "value": "norm.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_215": {
                "input": {
                    "value": "norm.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_125": {
                "input": {
                    "value": "EPE_map.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_125": {
                "input": {
                    "value": "EPE_map.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_167": {
                "input": {
                    "value": "L1.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_167": {
                "input": {
                    "value": "L1.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_213": {
                "input": {
                    "value": "norm.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_213": {
                "input": {
                    "value": "norm.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/cost_volume_losses/geometry.py": {
        "torch": {
            "zeros_73": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "featsShape[0] * featsShape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "map2D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grid_sample_160": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlationMap.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "cur_kps_list.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "permute_160": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "map2D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_244": {
                "variable": {
                    "value": "map2D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map2D.view(1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "hsfilter.unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_268": {
                "variable": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "floor_269": {
                "variable": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "map2D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_278": {
                "variable": {
                    "value": "minimal",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_281": {
                "variable": {
                    "value": "d_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xfloat ** 2 + yfloat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_286": {
                "variable": {
                    "value": "d_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xfloat ** 2 + (1 - yfloat) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_291": {
                "variable": {
                    "value": "d_x_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - xfloat) ** 2 + yfloat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_296": {
                "variable": {
                    "value": "d_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - xfloat) ** 2 + (1 - yfloat) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "map2D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "kpsNum",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_336": {
                "variable": {
                    "value": "xfloored",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_kps_list[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_337": {
                "variable": {
                    "value": "xceiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_kps_list[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_338": {
                "variable": {
                    "value": "xceiled",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "xceiled >= w - 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "xfloored",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(cur_kps_list[:, :, 0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "xceiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ceil(cur_kps_list[:, :, 0])",
                            "Call"
                        ],
                        [
                            "torch.where(xceiled >= w - 1, xfloored, xceiled)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_340": {
                "variable": {
                    "value": "yfloored",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_kps_list[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_341": {
                "variable": {
                    "value": "yceiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_kps_list[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_342": {
                "variable": {
                    "value": "yceiled",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "yceiled >= h - 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "yfloored",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(cur_kps_list[:, :, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "yceiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ceil(cur_kps_list[:, :, 1])",
                            "Call"
                        ],
                        [
                            "torch.where(yceiled >= h - 1, yfloored, yceiled)",
                            "Call"
                        ]
                    ]
                }
            },
            "remainder_344": {
                "variable": {
                    "value": "xremained",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_kps_list[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remainder_345": {
                "variable": {
                    "value": "yremained",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_kps_list[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_347": {
                "variable": {
                    "value": "distanceMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sqrt(xremained * xremained + yremained * yremained), torch.sqrt((xceiled - cur_kps_list[:, :, 0]) * (xceiled - cur_kps_list[:, :, 0]) + yremained * yremained), torch.sqrt(xremained * xremained + (yceiled - cur_kps_list[:, :, 1]) * (yceiled - cur_kps_list[:, :, 1])), torch.sqrt((xceiled - cur_kps_list[:, :, 0]) * (xceiled - cur_kps_list[:, :, 0]) + (yceiled - cur_kps_list[:, :, 1]) * (yceiled - cur_kps_list[:, :, 1]))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "permute_347": {
                "variable": {
                    "value": "distanceMat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_357": {
                "variable": {
                    "value": "indexMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[yceiled * w + xceiled, yceiled * w + xfloored, yfloored * w + xceiled, yfloored * w + xfloored]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "permute_357": {
                "variable": {
                    "value": "indexMat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_369": {
                "variable": {
                    "value": "sumD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "invDMat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / distanceMat",
                            "BinOp"
                        ],
                        [
                            "invDMat / sumD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_387": {
                "variable": {
                    "value": "maps_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "maps_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(maps_all).view(b, kpsNum, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_400": {
                "variable": {
                    "value": "(_, trg_argmax_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "confidence_ts_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "confidence_ts.view(h, w, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_433": {
                "input": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps_duplicate[0].le(box_duplicate[2])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps_duplicate[1].le(box_duplicate[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "t_433": {
                "variable": {
                    "value": "nbr_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_447": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-siz2[0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "siz2[0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_447": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_449": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-siz2[1]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "siz2[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_449": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_452": {
                "variable": {
                    "value": "gaussian",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(x_axis.pow(2) / 2 / sig_sq[0] + y_axis.pow(2) / 2 / sig_sq[1])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_15": {
                "variable": {
                    "value": "src_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(src_feat, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "src_feat.view(src_feat.size(0), src_feat.size(1), -1).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_16": {
                "variable": {
                    "value": "trg_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(trg_feat, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "trg_feat.view(trg_feat.size(0), trg_feat.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (w / float(originalShape[1]))",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "vector_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (w / float(originalShape[1]))",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_69": {
                "tensors": {
                    "value": "(x_center, y_center)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_315": {
                "variable": {
                    "value": "map2D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map2D.view(N, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "hsfilter.unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "maps_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "maps_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(maps_b).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_409": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "map_bilinear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BilinearInterpolate([src_kps[0, i], src_kps[1, i]], confidence_ts, originalShape=originalShape).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_21": {
                "input": {
                    "value": "src_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(src_feat, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "src_feat.view(src_feat.size(0), src_feat.size(1), -1).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trg_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(trg_feat, interp_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "trg_feat.view(trg_feat.size(0), trg_feat.size(1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_282": {
                "input": {
                    "value": "d_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(xfloat ** 2 + yfloat ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "minimal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ],
                        [
                            "torch.as_tensor(1e-05).repeat(N).cuda()",
                            "Call"
                        ],
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "maximum_287": {
                "input": {
                    "value": "d_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(xfloat ** 2 + (1 - yfloat) ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "minimal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ],
                        [
                            "torch.as_tensor(1e-05).repeat(N).cuda()",
                            "Call"
                        ],
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "maximum_292": {
                "input": {
                    "value": "d_x_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt((1 - xfloat) ** 2 + yfloat ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "minimal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ],
                        [
                            "torch.as_tensor(1e-05).repeat(N).cuda()",
                            "Call"
                        ],
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "maximum_297": {
                "input": {
                    "value": "d_bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt((1 - xfloat) ** 2 + (1 - yfloat) ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "minimal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ],
                        [
                            "torch.as_tensor(1e-05).repeat(N).cuda()",
                            "Call"
                        ],
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "arange_306": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_378": {
                "variable": {
                    "value": "map2D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_381": {
                "variable": {
                    "value": "map2D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map2D.view(1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "hsfilter.unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_26": {
                "input": {
                    "value": "correlation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - x.mean(dim=dim).unsqueeze(dim).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "correlation_matrix / standard_deviation.unsqueeze(dim).expand_as(correlation_matrix)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_27": {
                "input": {
                    "value": "correlation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - x.mean(dim=dim).unsqueeze(dim).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "correlation_matrix / standard_deviation.unsqueeze(dim).expand_as(correlation_matrix)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_305": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_310": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_311": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_347": {
                "input": {
                    "value": "xremained * xremained + yremained * yremained",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_348": {
                "input": {
                    "value": "(xceiled - cur_kps_list[:, :, 0]) * (xceiled - cur_kps_list[:, :, 0]) + yremained * yremained",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_351": {
                "input": {
                    "value": "xremained * xremained + (yceiled - cur_kps_list[:, :, 1]) * (yceiled - cur_kps_list[:, :, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_354": {
                "input": {
                    "value": "(xceiled - cur_kps_list[:, :, 0]) * (xceiled - cur_kps_list[:, :, 0]) + (yceiled - cur_kps_list[:, :, 1]) * (yceiled - cur_kps_list[:, :, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/cost_volume_losses/losses_on_matching_and_non_matching_pairs.py": {
        "torch": {
            "sum_38": {
                "variable": {
                    "value": "vector_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_104": {
                "variable": {
                    "value": "trg2src_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg2src_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation_matrix.view(bsz, -1, side, side)",
                            "Call"
                        ],
                        [
                            "F.interpolate(trg2src_dist, [new_side, new_side], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_side, new_side]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "src2trg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src2trg_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation_matrix.view(bsz, side, side, -1).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(src2trg_dist, [new_side, new_side], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_side, new_side]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_213": {
                "variable": {
                    "value": "stats[avg_max_score_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_280": {
                "variable": {
                    "value": "(scores_B, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.reshape(batch_size, feature_size * feature_size, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "Correlation.mutual_nn_filter(nc_B_Avec.view(batch_size, -1, feature_size * feature_size)).view(batch_size, -1, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "normalize(nc_B_Avec)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_281": {
                "variable": {
                    "value": "(scores_A, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.reshape(batch_size, feature_size, feature_size, feature_size * feature_size).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "Correlation.mutual_nn_filter(nc_A_Bvec.view(batch_size, -1, feature_size * feature_size)).view(batch_size, -1, feature_size, feature_size)",
                            "Call"
                        ],
                        [
                            "normalize(nc_A_Bvec)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_342": {
                "variable": {
                    "value": "stats[avg_max_score_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "input": {
                    "value": "A / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_177": {
                "variable": {
                    "value": "src_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch['source_image'], batch['source_image'][neg_subidx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "trg_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch['target_image'], trg_img_neg[neg_subidx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "stats[avg_max_score_neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_242": {
                "input": {
                    "value": "A / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_311": {
                "variable": {
                    "value": "src_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch['source_image'], batch['source_image'][neg_subidx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "trg_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch['target_image'], trg_img_neg[neg_subidx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_344": {
                "variable": {
                    "value": "stats[avg_max_score_neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "src_pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg2src_dist.view(bsz, -1, new_side * new_side).clone() / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "trg_pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src2trg_dist.view(bsz, -1, new_side * new_side).clone() / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_204": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_282": {
                "input": {
                    "value": "scores_A + scores_B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_338": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "input": {
                    "value": "A / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "src_pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Norm.unit_gaussian_normalize(trg2src_dist.view(bsz, -1, new_side * new_side).clone()) / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "trg_pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Norm.unit_gaussian_normalize(src2trg_dist.view(bsz, -1, new_side * new_side).clone()) / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_213": {
                "input": {
                    "value": "correlation_matrix[:self.bsz].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_248": {
                "input": {
                    "value": "x / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_342": {
                "input": {
                    "value": "correlation_matrix[:self.bsz].squeeze().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_215": {
                "input": {
                    "value": "correlation_matrix[self.bsz:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_344": {
                "input": {
                    "value": "correlation_matrix[self.bsz:].squeeze().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_131": {
                "input": {
                    "value": "src_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Norm.l1normalize(trg2src_dist.view(bsz, -1, new_side * new_side))",
                            "Call"
                        ],
                        [
                            "src_pdf + self.eps",
                            "BinOp"
                        ],
                        [
                            "F.softmax(trg2src_dist.view(bsz, -1, new_side * new_side).clone() / self.temperature, dim=2)",
                            "Call"
                        ],
                        [
                            "self.stable_softmax(trg2src_dist.view(bsz, -1, new_side * new_side).clone(), dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Norm.unit_gaussian_normalize(trg2src_dist.view(bsz, -1, new_side * new_side).clone()) / self.temperature, dim=2)",
                            "Call"
                        ],
                        [
                            "trg2src_dist.view(bsz, -1, new_side * new_side).clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "log2_132": {
                "input": {
                    "value": "trg_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Norm.l1normalize(src2trg_dist.view(bsz, -1, new_side * new_side))",
                            "Call"
                        ],
                        [
                            "trg_pdf + self.eps",
                            "BinOp"
                        ],
                        [
                            "F.softmax(src2trg_dist.view(bsz, -1, new_side * new_side).clone() / self.temperature, dim=2)",
                            "Call"
                        ],
                        [
                            "self.stable_softmax(src2trg_dist.view(bsz, -1, new_side * new_side).clone(), dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Norm.unit_gaussian_normalize(src2trg_dist.view(bsz, -1, new_side * new_side).clone()) / self.temperature, dim=2)",
                            "Call"
                        ],
                        [
                            "src2trg_dist.view(bsz, -1, new_side * new_side).clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_134": {
                "input": {
                    "value": "src_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Norm.l1normalize(trg2src_dist.view(bsz, -1, new_side * new_side))",
                            "Call"
                        ],
                        [
                            "src_pdf + self.eps",
                            "BinOp"
                        ],
                        [
                            "F.softmax(trg2src_dist.view(bsz, -1, new_side * new_side).clone() / self.temperature, dim=2)",
                            "Call"
                        ],
                        [
                            "self.stable_softmax(trg2src_dist.view(bsz, -1, new_side * new_side).clone(), dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Norm.unit_gaussian_normalize(trg2src_dist.view(bsz, -1, new_side * new_side).clone()) / self.temperature, dim=2)",
                            "Call"
                        ],
                        [
                            "trg2src_dist.view(bsz, -1, new_side * new_side).clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_135": {
                "input": {
                    "value": "trg_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Norm.l1normalize(src2trg_dist.view(bsz, -1, new_side * new_side))",
                            "Call"
                        ],
                        [
                            "trg_pdf + self.eps",
                            "BinOp"
                        ],
                        [
                            "F.softmax(src2trg_dist.view(bsz, -1, new_side * new_side).clone() / self.temperature, dim=2)",
                            "Call"
                        ],
                        [
                            "self.stable_softmax(src2trg_dist.view(bsz, -1, new_side * new_side).clone(), dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Norm.unit_gaussian_normalize(src2trg_dist.view(bsz, -1, new_side * new_side).clone()) / self.temperature, dim=2)",
                            "Call"
                        ],
                        [
                            "src2trg_dist.view(bsz, -1, new_side * new_side).clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_252": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/cost_volume_losses/losses_on_non_matching_pairs.py": {
        "torch": {
            "mean_58": {
                "variable": {
                    "value": "stats[avg_max_score_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "stats[avg_max_score_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "src_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch['source_image'], batch['source_image'][neg_subidx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "trg_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch['target_image'], trg_img_neg[neg_subidx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "stats[avg_max_score_neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "src_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch['source_image'], batch['source_image'][neg_subidx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "trg_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch['target_image'], trg_img_neg[neg_subidx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_126": {
                "variable": {
                    "value": "stats[avg_max_score_neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_55": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "as_tensor_120": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_58": {
                "input": {
                    "value": "correlation_matrix[:self.bsz].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_124": {
                "input": {
                    "value": "correlation_matrix[:self.bsz].squeeze().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_60": {
                "input": {
                    "value": "correlation_matrix[self.bsz:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_126": {
                "input": {
                    "value": "correlation_matrix[self.bsz:].squeeze().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/cost_volume_losses/losses_with_keypoint_annotations.py": {
        "torch": {
            "arange_360": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix_t_to_s.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix_t_to_s.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_367": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix_t_to_s.shape[0]",
                            "Subscript"
                        ],
                        [
                            "correlation_matrix.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_437": {
                "variable": {
                    "value": "P_warp_supervision",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_warp_supervision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "torch.flatten(P_warp_supervision, start_dim=2).permute(0, 2, 1).contiguous().view(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "P_warp_supervision[mask_for_labels]",
                            "Subscript"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_437": {
                "variable": {
                    "value": "P_warp_supervision",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_450": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_warp_supervision + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_451": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_511": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_512": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_98": {
                "variable": {
                    "value": "kps_src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_99": {
                "variable": {
                    "value": "kps_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ],
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ],
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kps_src.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_233": {
                "variable": {
                    "value": "kps_src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_234": {
                "variable": {
                    "value": "kps_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ],
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ],
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kps_src.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kps_src.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kps_src.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_348": {
                "input": {
                    "value": "source_kp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_kp.clone().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "round_349": {
                "input": {
                    "value": "target_kp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_kp.clone().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_547": {
                "variable": {
                    "value": "kps_src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_548": {
                "variable": {
                    "value": "kps_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ],
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ],
                        [
                            "target_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_trg[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_trg).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_549": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kps_src.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_550": {
                "variable": {
                    "value": "distance_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kps_src.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_552": {
                "variable": {
                    "value": "kps_src_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_124": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[targets, torch.zeros(weights.shape[0], 1).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_227": {
                "input": {
                    "value": "kps_src[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "lt_227": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_566": {
                "variable": {
                    "value": "distance_map_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_map_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid - kps_src_t[j].view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.norm(distance_map_j, dim=-1, p=2).view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([distance_map_j, torch.as_tensor(max(h, w)).cuda().view(1, -1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_91": {
                "input": {
                    "value": "kps_src[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "lt_91": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_118": {
                "input": {
                    "value": "kps_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ],
                        [
                            "source_kp[i][:n_valid_pts[i]]",
                            "Subscript"
                        ],
                        [
                            "kps_src[mask_corr_valid]",
                            "Subscript"
                        ],
                        [
                            "torch.t(kps_src).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "round_540": {
                "input": {
                    "value": "kps_src[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "lt_540": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_569": {
                "variable": {
                    "value": "distance_map_j",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[distance_map_j, torch.as_tensor(max(h, w)).cuda().view(1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_226": {
                "input": {
                    "value": "kps_src[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "lt_226": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_250": {
                "input": {
                    "value": "kps_src[1, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_447": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "P_warp_supervision.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_90": {
                "input": {
                    "value": "kps_src[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "lt_90": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "weights.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_386": {
                "input": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_539": {
                "input": {
                    "value": "kps_src[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "lt_539": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_110": {
                "input": {
                    "value": "kps_trg[1, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_111": {
                "input": {
                    "value": "kps_trg[0, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_246": {
                "input": {
                    "value": "kps_trg[1, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_247": {
                "input": {
                    "value": "kps_trg[0, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_561": {
                "input": {
                    "value": "kps_trg[1, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_562": {
                "input": {
                    "value": "kps_trg[0, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_569": {
                "data": {
                    "value": "max(h, w)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/cost_volume_losses/specific_semantic_network_losses.py": {
        "torch": {
            "le_120": {
                "variable": {
                    "value": "correct_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prd_kps - trg_kps).pow(2).sum(dim=0).pow(0.5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "thres.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "weighted_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(rel_part_weight, part_iou)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_np.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_168": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_178": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_56": {
                "variable": {
                    "value": "kp_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['source_kps'][idx].clone()[:npt].cuda()",
                            "Call"
                        ],
                        [
                            "kp_s * (1.0 / 4.0)",
                            "BinOp"
                        ],
                        [
                            "torch.round(kp_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_62": {
                "variable": {
                    "value": "kp_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['target_kps'][idx].clone()[:npt].cuda()",
                            "Call"
                        ],
                        [
                            "kp_t * (1.0 / 4.0)",
                            "BinOp"
                        ],
                        [
                            "torch.round(kp_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_142": {
                "input": {
                    "value": "(mask1.gt(0.5) == mask2.gt(0.5)).double()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_200": {
                "input": {
                    "value": "loss_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation_matrix_t_to_s.new_zeros(correlation_matrix_t_to_s.size(0))",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.new_zeros(correlation_matrix_t_to_s.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_223": {
                "input": {
                    "value": "loss_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation_matrix_t_to_s.new_zeros(correlation_matrix_t_to_s.size(0))",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.new_zeros(correlation_matrix_t_to_s.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_332": {
                "variable": {
                    "value": "loss_scales_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(score_pos_overscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_43": {
                "variable": {
                    "value": "tk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch['target_kps'][idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_46": {
                "variable": {
                    "value": "tk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch['source_kps'][idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_131": {
                "input": {
                    "value": "mask2.gt(0.5).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "mask2.gt(0.5).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "(mask1.gt(0.5) & mask2.gt(0.5)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "(mask1.gt(0.5) | mask2.gt(0.5)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_231": {
                "input": {
                    "value": "prob + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_332": {
                "tensors": {
                    "value": "score_pos_overscales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_output_positive['score_overscales']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_333": {
                "input": {
                    "value": "torch.cat(score_neg_overscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_135": {
                "input": {
                    "value": "rel_part_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(mask2.gt(0.5).float(), 2, True), 3, True) / torch.sum(mask2.gt(0.5).float())",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "part_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum((mask1.gt(0.5) & mask2.gt(0.5)).float(), 2, True), 3, True) / torch.sum(torch.sum((mask1.gt(0.5) | mask2.gt(0.5)).float(), 2, True), 3, True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_333": {
                "tensors": {
                    "value": "score_neg_overscales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_output_negative['score_overscales']",
                            "Subscript"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "training/losses/cross_entropy_supervised.py": {
        "torch": {
            "zeros_5": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_34": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "zeros_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-target * input",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_pos.gt(0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "output_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-target * input",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(output_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_121": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log2(logits + 1e-07)",
                            "Call"
                        ],
                        [
                            "torch.log(logits + 1e-07)",
                            "Call"
                        ]
                    ]
                }
            },
            "log2_30": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_32": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_93": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log2(logits + 1e-07)",
                            "Call"
                        ],
                        [
                            "torch.log(logits + 1e-07)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_122": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "index_of_target.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_70": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log2(logits + 1e-07)",
                            "Call"
                        ],
                        [
                            "torch.log(logits + 1e-07)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/multiscale_loss.py": {
        "torch": {
            "interpolate_31": {
                "variable": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_41": {
                "variable": {
                    "value": "est_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_119": {
                "variable": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_126": {
                "variable": {
                    "value": "est_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "variable": {
                    "value": "log_var_uncertainty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var_uncertainty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(log_var_uncertainty, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_193": {
                "variable": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(gt_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_200": {
                "variable": {
                    "value": "est_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(est_flow, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(log_var_map, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "uncertainty_list[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_202": {
                "variable": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(weight_map, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "uncertainty_list[1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_195": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_35": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/neg_log_likelihood.py": {
        "torch": {
            "logsumexp_29": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_34": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exponent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_map - math.log(2) - log_var - reg * torch.exp(-0.5 * log_var)",
                            "BinOp"
                        ],
                        [
                            "weight_map - torch.log(2 * PI) - log_var - reg * torch.exp(-log_var)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "PI",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_86": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_90": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exponent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_map - math.log(2) - log_var - reg * torch.exp(-0.5 * log_var)",
                            "BinOp"
                        ],
                        [
                            "weight_map - torch.log(2 * PI) - log_var - reg * torch.exp(-log_var)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_182": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(-log_var)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(gt_flow - est_flow) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "torch.abs((gt_flow - est_flow) * self.ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_43": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ge_43": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_43": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "(gt_flow - est_flow) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_131": {
                "input": {
                    "value": "gt_flow - est_flow",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_141": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ge_141": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_141": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_182": {
                "input": {
                    "value": "-log_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_32": {
                "input": {
                    "value": "(gt_flow - est_flow) * self.ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "-0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_89": {
                "input": {
                    "value": "-log_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_131": {
                "input": {
                    "value": "-0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_41": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_41": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "2 * PI",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_139": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_139": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_39": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_39": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_137": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_137": {
                "input": {
                    "value": "loss.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/probabilistic_warp_consistency_losses.py": {
        "torch": {
            "flatten_128": {
                "variable": {
                    "value": "P_target_prime_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cost_volume_to_probabilistic_mapping(A_target_prime_to_source)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_130": {
                "variable": {
                    "value": "P_source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cost_volume_to_probabilistic_mapping(A_source_to_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_163": {
                "variable": {
                    "value": "P_target_prime_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cost_volume_to_probabilistic_mapping(A_target_prime_to_source)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_165": {
                "variable": {
                    "value": "P_source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cost_volume_to_probabilistic_mapping(A_source_to_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "occ_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h * w + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "P_source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(P_source_to_target, occ_proba)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_216": {
                "variable": {
                    "value": "flow_gt_full",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(flow_gt_full, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "round_233": {
                "variable": {
                    "value": "mapping_gt_x_rounded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mapping_gt[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_234": {
                "variable": {
                    "value": "mapping_gt_y_rounded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mapping_gt[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_324": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "proba_map.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_329": {
                "variable": {
                    "value": "(value_sorted, indice_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proba_map[index, index_of_target]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "indice_for_top_percent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(len(proba) * self.top_percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_330": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proba_map[index, index_of_target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_724": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation_matrix_t_to_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s[:, :h * w].mean(dim=1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s[:, :h * w].max(dim=1)[0].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b, h * w, -1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b, h * w, -1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "self.cost_volume_to_probabilistic_mapping(correlation_matrix_t_to_s)",
                            "Call"
                        ],
                        [
                            "correlation_matrix_t_to_s.permute(0, 2, 3, 1).reshape(b * h * w, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_727": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation_matrix_t_to_s - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_830": {
                "variable": {
                    "value": "stats[avg_max_score_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "mask_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_valid.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "mask_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "proba_map_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proba_map_gt, torch.zeros(proba_map_gt.shape[0], 1).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_445": {
                "variable": {
                    "value": "P_warp_supervision",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_warp_supervision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cost_volume_to_probabilistic_mapping(A_target_prime_to_target)",
                            "Call"
                        ],
                        [
                            "torch.flatten(P_warp_supervision, start_dim=2).permute(0, 2, 1).contiguous().view(b * h * w, -1)",
                            "Call"
                        ],
                        [
                            "P_warp_supervision[mask_for_target]",
                            "Subscript"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_445": {
                "variable": {
                    "value": "P_warp_supervision",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_781": {
                "variable": {
                    "value": "src_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch['source_image'], batch['source_image'][neg_subidx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_782": {
                "variable": {
                    "value": "trg_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch['target_image'], trg_img_neg[neg_subidx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_832": {
                "variable": {
                    "value": "stats[avg_max_score_neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_521": {
                "input": {
                    "value": "correlation_matrix_t_to_s + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_542": {
                "input": {
                    "value": "correlation_matrix_t_to_s + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_566": {
                "input": {
                    "value": "bin_score + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_567": {
                "input": {
                    "value": "pos_sum + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_596": {
                "input": {
                    "value": "bin_score_per_image + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_597": {
                "input": {
                    "value": "pos_score_per_image + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_618": {
                "input": {
                    "value": "correlation_matrix_t_to_s + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_645": {
                "input": {
                    "value": "bin_score + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_646": {
                "input": {
                    "value": "pos_sum + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_672": {
                "input": {
                    "value": "bin_score + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_673": {
                "input": {
                    "value": "pos + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_702": {
                "input": {
                    "value": "bin_score_per_image + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_703": {
                "input": {
                    "value": "pos_score_per_image + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_751": {
                "input": {
                    "value": "bin_score - self.label",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_752": {
                "input": {
                    "value": "pos_sum - (1 - self.label)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_725": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "target.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_828": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_255": {
                "*size": {
                    "value": "proba_map_gt.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_830": {
                "input": {
                    "value": "correlation_matrix[:self.bsz, :hw].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_832": {
                "input": {
                    "value": "correlation_matrix[self.bsz:, :hw].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_308": {
                "input": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_415": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "P_w_bipath.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_455": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "P_warp_supervision.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_462": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "P_warp_supervision.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_422": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "P_w_bipath.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/ssim_loss.py": {
        "torch": {
            "Tensor_10": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_25": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "loss * mask.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "input": {
                    "value": "match.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.windowMask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.window_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.window_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "training/losses/warp_consistency_losses.py": {
        "torch": {
            "sum_34": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_68": {
                "variable": {
                    "value": "synthetic_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "synthetic_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(synthetic_flow, (h_, w_), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_, w_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "mask_used_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_used.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_, w_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "mask_used_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/plot/plot_GLOCALNet.py": {
        "torch": {
            "interpolate_27": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_98": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_25": {
                "variable": {
                    "value": "occlusion_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion_mask.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "occlusion_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(occlusion_mask.detach(), [h, w])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(occlusion_mask)",
                            "Call"
                        ],
                        [
                            "occlusion_mask.squeeze()[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "flow_est_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_139": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "input": {
                    "value": "weight_map_item.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_194": {
                "input": {
                    "value": "proba_map * torch.exp(log_var)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_176": {
                "input": {
                    "value": "proba_map[ind] * torch.exp(log_var[ind])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_194": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty_info[0].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_176": {
                "input": {
                    "value": "log_var[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "training/plot/plot_GLUNet.py": {
        "torch": {
            "interpolate_19": {
                "variable": {
                    "value": "flow_est_original",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_original, w_original)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_36": {
                "variable": {
                    "value": "flow_est_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net_256",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_256, w_256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_89": {
                "variable": {
                    "value": "flow_est_original",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_original, w_original)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_112": {
                "variable": {
                    "value": "flow_est_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net_256",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_256, w_256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_182": {
                "variable": {
                    "value": "flow_est_original",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_original, w_original)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_205": {
                "variable": {
                    "value": "flow_est_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net_256",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_256, w_256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_387": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_403": {
                "variable": {
                    "value": "flow_est_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net_256",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_256, w_256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_241": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "proba_map_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map_256.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_367": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_436": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_437": {
                "variable": {
                    "value": "proba_map_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map_256.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_235": {
                "input": {
                    "value": "weight_map_item.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "input": {
                    "value": "weight_map_256[item].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_430": {
                "input": {
                    "value": "weight_map_item.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_431": {
                "input": {
                    "value": "weight_map_256[item].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_297": {
                "input": {
                    "value": "proba_map * torch.exp(log_var)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_349": {
                "input": {
                    "value": "proba_map_256 * torch.exp(log_var_256)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_279": {
                "input": {
                    "value": "proba_map[ind].detach() * torch.exp(log_var[ind].detach())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_332": {
                "input": {
                    "value": "proba_map_256[ind].detach() * torch.exp(log_var_256[ind].detach())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_515": {
                "input": {
                    "value": "proba_map * torch.exp(log_var)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_576": {
                "input": {
                    "value": "proba_map_256 * torch.exp(log_var_256)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_576": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_492": {
                "input": {
                    "value": "proba_map[ind].detach() * torch.exp(log_var[ind].detach())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_553": {
                "input": {
                    "value": "proba_map_256[ind].detach() * torch.exp(log_var_256[ind].detach())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_297": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty_info_original[0]",
                            "Subscript"
                        ],
                        [
                            "log_var.detach()",
                            "Call"
                        ],
                        [
                            "uncertainty_info_original[0]",
                            "Subscript"
                        ],
                        [
                            "log_var.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_349": {
                "input": {
                    "value": "log_var_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty_info_256[0]",
                            "Subscript"
                        ],
                        [
                            "log_var_256.detach()",
                            "Call"
                        ],
                        [
                            "uncertainty_info_256[0]",
                            "Subscript"
                        ],
                        [
                            "log_var_256.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_279": {
                "input": {
                    "value": "log_var[ind].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_332": {
                "input": {
                    "value": "log_var_256[ind].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_515": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty_info_original[0]",
                            "Subscript"
                        ],
                        [
                            "log_var.detach()",
                            "Call"
                        ],
                        [
                            "uncertainty_info_original[0]",
                            "Subscript"
                        ],
                        [
                            "log_var.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_576": {
                "input": {
                    "value": "log_var_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty_info_256[0]",
                            "Subscript"
                        ],
                        [
                            "log_var_256.detach()",
                            "Call"
                        ],
                        [
                            "uncertainty_info_256[0]",
                            "Subscript"
                        ],
                        [
                            "log_var_256.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_492": {
                "input": {
                    "value": "log_var[ind].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_553": {
                "input": {
                    "value": "log_var_256[ind].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "training/plot/plot_corr.py": {
        "torch": {
            "tensor_57": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_131": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_131": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_235": {
                "variable": {
                    "value": "image_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_image.unsqueeze(0).cpu() * std_values + mean_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_235": {
                "variable": {
                    "value": "image_source",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_235": {
                "variable": {
                    "value": "image_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_237": {
                "variable": {
                    "value": "image_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image.unsqueeze(0).cpu() * std_values + mean_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_237": {
                "variable": {
                    "value": "image_target",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_237": {
                "variable": {
                    "value": "image_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_239": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_239": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_239": {
                "variable": {
                    "value": "flow_gt_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "source_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_image.unsqueeze(0).cpu() * std_values + mean_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_118": {
                "variable": {
                    "value": "source_image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_118": {
                "variable": {
                    "value": "source_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_120": {
                "variable": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image.unsqueeze(0).cpu() * std_values + mean_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_120": {
                "variable": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_120": {
                "variable": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_124": {
                "variable": {
                    "value": "source_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_image.unsqueeze(0).cpu().float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "source_image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_124": {
                "variable": {
                    "value": "source_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_126": {
                "variable": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image.unsqueeze(0).cpu().float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_126": {
                "variable": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/plot/plot_sparse_keypoints.py": {
        "torch": {
            "interpolate_52": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_101": {
                "variable": {
                    "value": "warping_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warping_mask.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "warping_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warping_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(warping_mask.detach(), [h, w])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(warping_mask)",
                            "Call"
                        ],
                        [
                            "warping_mask.squeeze()[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_105": {
                "variable": {
                    "value": "occlusion_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion_mask.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "variable": {
                    "value": "occlusion_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(occlusion_mask.detach(), [h, w])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(occlusion_mask)",
                            "Call"
                        ],
                        [
                            "occlusion_mask.squeeze()[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "input": {
                    "value": "weight_map_item.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "proba_map * torch.exp(log_var)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "proba_map[ind] * torch.exp(log_var[ind])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_163": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty_info[0].detach()",
                            "Call"
                        ],
                        [
                            "uncertainty_info.squeeze().cpu().detach().numpy().astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_141": {
                "input": {
                    "value": "log_var[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "training/plot/plot_warp_consistency.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image_source.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "std_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image_source.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_36": {
                "variable": {
                    "value": "estimated_flow_target_prime_to_target_directly",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_target_prime_to_target_directly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(estimated_flow_target_prime_to_target_directly, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "estimated_flow_target_prime_to_target_directly.detach().permute(0, 2, 3, 1)[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "F.interpolate(estimated_flow_target_prime_to_target_directly, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "estimated_flow_target_prime_to_target_directly.detach().permute(0, 2, 3, 1)[0].cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "estimated_flow_target_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_target_to_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(estimated_flow_target_to_source, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "estimated_flow_target_to_source.detach().permute(0, 2, 3, 1)[0].cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_72": {
                "variable": {
                    "value": "estimated_flow_target_prime_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_target_prime_to_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(estimated_flow_target_prime_to_target, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "estimated_flow_target_prime_to_target.detach().permute(0, 2, 3, 1)[0].cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "estimated_flow_target_prime_to_target_directly",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_target_prime_to_target_directly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(estimated_flow_target_prime_to_target_directly, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "estimated_flow_target_prime_to_target_directly.detach().permute(0, 2, 3, 1)[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "F.interpolate(estimated_flow_target_prime_to_target_directly, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "estimated_flow_target_prime_to_target_directly.detach().permute(0, 2, 3, 1)[0].cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "variable": {
                    "value": "estimated_flow_target_prime_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_target_prime_to_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(estimated_flow_target_prime_to_source, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "estimated_flow_target_prime_to_source.detach().permute(0, 2, 3, 1)[0].cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_124": {
                "variable": {
                    "value": "estimated_flow_source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow_source_to_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(estimated_flow_source_to_target, (h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "estimated_flow_source_to_target.detach().permute(0, 2, 3, 1)[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "training/trainers/base_trainer.py": {
        "torch": {
            "load_217": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_list[-1]",
                            "Subscript"
                        ],
                        [
                            "'{}/{}/{}_ep{:04d}.pth.tar'.format(self._base_save_dir, self.settings.project_path, net_type, checkpoint)",
                            "Call"
                        ],
                        [
                            "os.path.expanduser(checkpoint)",
                            "Call"
                        ],
                        [
                            "checkpoint_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch, 'actor_type': actor_type, 'net_type': net_type, 'state_dict': net.state_dict(), 'net_info': getattr(net, 'info', None), 'constructor': getattr(net, 'constructor', None), 'optimizer': self.optimizer.state_dict(), 'lr_scheduler': self.lr_scheduler.state_dict(), 'stats': self.stats, 'best_val': self.best_val, 'epoch_of_best_val': self.epoch_of_best_val}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}_{}.tmp'.format(directory, net_type, name)",
                            "Call"
                        ],
                        [
                            "'{}/{}_ep{:04d}.tmp'.format(directory, net_type, self.epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_166": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch, 'actor_type': actor_type, 'net_type': net_type, 'state_dict': net.state_dict(), 'net_info': getattr(net, 'info', None), 'constructor': getattr(net, 'constructor', None), 'optimizer': self.optimizer.state_dict(), 'lr_scheduler': self.lr_scheduler.state_dict(), 'stats': self.stats, 'best_val': self.best_val, 'epoch_of_best_val': self.epoch_of_best_val}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}_{}.tmp'.format(directory, net_type, name)",
                            "Call"
                        ],
                        [
                            "'{}/{}_ep{:04d}.tmp'.format(directory, net_type, self.epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/trainers/matching_trainer.py": {
        "torch": {
            "set_grad_enabled_52": {
                "mode": {
                    "value": "loader.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_73": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils_data/augmentations/color_augmentation_torch.py": {
        "torch": {
            "get_default_dtype_21": {
                "variable": {
                    "value": "default_float_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_88": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(img, dim=-3).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(img, dim=-3)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_94": {
                "variable": {
                    "value": "cr_divisor",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eqc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxc == minc",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(maxc)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxc - minc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fmod_103": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / 6.0 + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "floor_109": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h * 6.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_113": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v * (1.0 - s)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_114": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v * (1.0 - s * f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v * (1.0 - s * (1.0 - f))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eq_118": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i.unsqueeze(dim=-3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.arange(6, device=i.device, dtype=i.dtype).view(-1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, q, p, p, t, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t, v, v, q, p, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "a3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p, p, t, v, v, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "a4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a1, a2, a3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-ksize_half",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "ksize_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "steps": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(self.kernel_size[0], self.kernel_size[1])",
                            "Call"
                        ],
                        [
                            "kernel_size + 1",
                            "BinOp"
                        ],
                        [
                            "_setup_size(kernel_size, 'Kernel load_size should be a tuple/list of two integers')",
                            "Call"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_278": {
                "variable": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * (x / sigma).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_289": {
                "variable": {
                    "value": "kernel2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel1d_y[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel1d_x[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pic.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "pic[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "pic.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "pic.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_73": {
                "variable": {
                    "value": "maxc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_74": {
                "variable": {
                    "value": "minc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_104": {
                "tensors": {
                    "value": "(h, s, maxc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_125": {
                "equation": {
                    "value": "...ijk, ...xijk -> ...xjk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "mask.to(dtype=img.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_to_grayscale(img).to(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_200": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_226": {
                "variable": {
                    "value": "fn_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_367": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_gaussian_kernel2d(kernel_size, sigma, dtype=dtype, device=img.device)",
                            "Call"
                        ],
                        [
                            "kernel.expand(img.shape[-3], 1, kernel.shape[0], kernel.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "img.shape[-3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_382": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_89": {
                "condition": {
                    "value": "eqc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxc == minc",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(maxc)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(img, dim=-3).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(img, dim=-3)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_99": {
                "input": {
                    "value": "maxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(img, dim=-3).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(img, dim=-3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_118": {
                "start": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "i.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "i.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_252": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_316": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_70": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_71": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_179": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_floating_point_182": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "brightness_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "contrast_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "saturation_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_floating_point_358": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "img.to(req_dtype)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.round(img)",
                            "Call"
                        ],
                        [
                            "img.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "img.to(dtype=torch.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "_rgb2hsv(img)",
                            "Call"
                        ],
                        [
                            "torch.stack((h, s, v), dim=-3)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, 0, max=255)",
                            "Call"
                        ],
                        [
                            "img.byte()",
                            "Call"
                        ],
                        [
                            "self.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "img[:, random_order]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "torch_pad(img, padding, mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d(img, kernel, groups=img.shape[-3])",
                            "Call"
                        ],
                        [
                            "_cast_squeeze_out(img, need_cast, need_squeeze, out_dtype)",
                            "Call"
                        ],
                        [
                            "to_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_100": {
                "input": {
                    "value": "maxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(img, dim=-3).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(img, dim=-3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_101": {
                "input": {
                    "value": "maxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(img, dim=-3).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(img, dim=-3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils_data/geometric_transformation_sampling/aff_homo_tps_generation.py": {
        "torch": {
            "unsqueeze_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_136": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_136": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_137": {
                "variable": {
                    "value": "single_o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "variable": {
                    "value": "single_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[-x, -y, -o, z, z, z, x * xp, y * xp, xp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_149": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(A[:, :, :8])",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "-A[:, :, 8].unsqueeze(2)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, single_o]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "self.grid_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "self.grid_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "self.grid_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_88": {
                "variable": {
                    "value": "self.grid_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_172": {
                "variable": {
                    "value": "self.grid_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_173": {
                "variable": {
                    "value": "self.grid_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_210": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(Xmat - Xmat.transpose(0, 1), 2) + torch.pow(Ymat - Ymat.transpose(0, 1), 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(P_dist_squared)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(O, X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "tensors": {
                    "value": "(P.transpose(0, 1), Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_218": {
                "variable": {
                    "value": "Li",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.cat((K, P), 1), torch.cat((P.transpose(0, 1), Z), 1)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_246": {
                "variable": {
                    "value": "W_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, :self.N, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_247": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, self.N:, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_253": {
                "variable": {
                    "value": "A_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, self.N:, :self.N].expand((batch_size, 3, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, :self.N, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_254": {
                "variable": {
                    "value": "A_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, self.N:, :self.N].expand((batch_size, 3, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, self.N:, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_278": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(delta_X, 2) + torch.pow(delta_Y, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(dist_squared)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_341": {
                "variable": {
                    "value": "sampling_grid_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_bound_mask_aff.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sampling_grid_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affTnf(image_batch=None, theta_batch=theta_aff.view(-1, 2, 3), return_sampling_grid=True, return_warped_image=False)",
                            "Call"
                        ],
                        [
                            "torch.mul(in_bound_mask_aff.float(), sampling_grid_aff)",
                            "Call"
                        ],
                        [
                            "torch.add((in_bound_mask_aff.float() - 1) * 10000000000.0, sampling_grid_aff)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_342": {
                "variable": {
                    "value": "sampling_grid_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(in_bound_mask_aff.float() - 1) * 10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "sampling_grid_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affTnf(image_batch=None, theta_batch=theta_aff.view(-1, 2, 3), return_sampling_grid=True, return_warped_image=False)",
                            "Call"
                        ],
                        [
                            "torch.mul(in_bound_mask_aff.float(), sampling_grid_aff)",
                            "Call"
                        ],
                        [
                            "torch.add((in_bound_mask_aff.float() - 1) * 10000000000.0, sampling_grid_aff)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_358": {
                "variable": {
                    "value": "sampling_grid_aff_tps_comp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_bound_mask_aff_tps.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sampling_grid_aff_tps_comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(sampling_grid_aff.transpose(2, 3).transpose(1, 2), sampling_grid_aff_tps, align_corners=True).transpose(1, 2).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(sampling_grid_aff.transpose(2, 3).transpose(1, 2), sampling_grid_aff_tps).transpose(1, 2).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.mul(in_bound_mask_aff_tps.float(), sampling_grid_aff_tps_comp)",
                            "Call"
                        ],
                        [
                            "torch.add((in_bound_mask_aff_tps.float() - 1) * 10000000000.0, sampling_grid_aff_tps_comp)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_359": {
                "variable": {
                    "value": "sampling_grid_aff_tps_comp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(in_bound_mask_aff_tps.float() - 1) * 10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "sampling_grid_aff_tps_comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(sampling_grid_aff.transpose(2, 3).transpose(1, 2), sampling_grid_aff_tps, align_corners=True).transpose(1, 2).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(sampling_grid_aff.transpose(2, 3).transpose(1, 2), sampling_grid_aff_tps).transpose(1, 2).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.mul(in_bound_mask_aff_tps.float(), sampling_grid_aff_tps_comp)",
                            "Call"
                        ],
                        [
                            "torch.add((in_bound_mask_aff_tps.float() - 1) * 10000000000.0, sampling_grid_aff_tps_comp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_391": {
                "variable": {
                    "value": "self.theta_identity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "affine_grid_31": {
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.view(b, 8)",
                            "Call"
                        ],
                        [
                            "theta.contiguous()",
                            "Call"
                        ],
                        [
                            "theta.view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "theta.contiguous()",
                            "Call"
                        ],
                        [
                            "theta.view(b, 6)",
                            "Call"
                        ],
                        [
                            "theta.contiguous()",
                            "Call"
                        ],
                        [
                            "theta.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size((batch_size, self.out_ch, self.out_h, self.out_w))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(grid_Xp, grid_Yp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "tensors": {
                    "value": "(grid_Xp, grid_Yp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_149": {
                "input": {
                    "value": "A[:, :, :8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_297": {
                "tensors": {
                    "value": "(points_X_prime, points_Y_prime)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_346": {
                "variable": {
                    "value": "sampling_grid_aff_tps_comp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sampling_grid_aff.transpose(2, 3).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "sampling_grid_aff_tps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tpsTnf(image_batch=None, theta_batch=theta_aff_tps, return_sampling_grid=True, return_warped_image=False)",
                            "Call"
                        ],
                        [
                            "sampling_grid_aff_tps * self.padding_crop_factor",
                            "BinOp"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_346": {
                "variable": {
                    "value": "sampling_grid_aff_tps_comp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_350": {
                "variable": {
                    "value": "sampling_grid_aff_tps_comp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sampling_grid_aff.transpose(2, 3).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "sampling_grid_aff_tps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tpsTnf(image_batch=None, theta_batch=theta_aff_tps, return_sampling_grid=True, return_warped_image=False)",
                            "Call"
                        ],
                        [
                            "sampling_grid_aff_tps * self.padding_crop_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_350": {
                "variable": {
                    "value": "sampling_grid_aff_tps_comp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_431": {
                "variable": {
                    "value": "warped_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "sampling_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gridGen(theta_batch)",
                            "Call"
                        ],
                        [
                            "sampling_grid * (padding_factor * crop_factor)",
                            "BinOp"
                        ],
                        [
                            "sampling_grid * self.offset_factor",
                            "BinOp"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_433": {
                "variable": {
                    "value": "warped_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "sampling_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gridGen(theta_batch)",
                            "Call"
                        ],
                        [
                            "sampling_grid * (padding_factor * crop_factor)",
                            "BinOp"
                        ],
                        [
                            "sampling_grid * self.offset_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "[z, z, z, -x, -y, -o, x * yp, y * yp, yp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "tensors": {
                    "value": "(self.grid_X, self.grid_Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_208": {
                "input": {
                    "value": "Ymat - Ymat.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_210": {
                "input": {
                    "value": "P_dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(Xmat - Xmat.transpose(0, 1), 2) + torch.pow(Ymat - Ymat.transpose(0, 1), 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_275": {
                "input": {
                    "value": "delta_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_Y_for_summation - P_Y",
                            "BinOp"
                        ],
                        [
                            "points_Y_for_summation - P_Y.expand_as(points_Y_for_summation)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_278": {
                "input": {
                    "value": "dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(delta_X, 2) + torch.pow(delta_Y, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_290": {
                "input": {
                    "value": "torch.mul(W_X, U.expand_as(W_X))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_295": {
                "input": {
                    "value": "torch.mul(W_Y, U.expand_as(W_Y))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_212": {
                "n": {
                    "value": "K.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "m": {
                    "value": "K.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_289": {
                "input": {
                    "value": "A_X[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_Y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 1].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_Y_batch.expand((batch_size,) + points_Y_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_290": {
                "input": {
                    "value": "W_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N)), Q_X)",
                            "Call"
                        ],
                        [
                            "W_X.unsqueeze(3).unsqueeze(4).transpose(1, 4).repeat(1, points_h, points_w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.expand_as(W_X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_294": {
                "input": {
                    "value": "A_Y[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_Y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 1].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_Y_batch.expand((batch_size,) + points_Y_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_295": {
                "input": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N)), Q_Y)",
                            "Call"
                        ],
                        [
                            "W_Y.unsqueeze(3).unsqueeze(4).transpose(1, 4).repeat(1, points_h, points_w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.expand_as(W_Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_288": {
                "input": {
                    "value": "A_X[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_X_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 0].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_X_batch.expand((batch_size,) + points_X_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_293": {
                "input": {
                    "value": "A_Y[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_X_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 0].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_X_batch.expand((batch_size,) + points_X_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils_data/geometric_transformation_sampling/synthetic_warps_sampling.py": {
        "torch": {
            "from_numpy_191": {
                "variable": {
                    "value": "mapping_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.copy(np.fliplr(mapping_gt.squeeze().permute(1, 2, 0).cpu().numpy()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_191": {
                "variable": {
                    "value": "mapping_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "mapping_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_236": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_332": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_416": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_449": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mini_batch['source_image'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "mini_batch['source_image'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "mini_batch['source_image'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "flow.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.size_output_flow[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_output_flow[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "variable": {
                    "value": "theta_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "variable": {
                    "value": "theta_hom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "theta_tps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "theta_tps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "theta_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "theta_hom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "variable": {
                    "value": "theta_hom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_162": {
                "variable": {
                    "value": "theta_tps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "theta_tps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_167": {
                "variable": {
                    "value": "theta_tps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_167": {
                "variable": {
                    "value": "theta_tps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_319": {},
            "permute_319": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_320": {},
            "permute_320": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_376": {},
            "permute_376": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_377": {},
            "permute_377": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_488": {},
            "permute_488": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils_data/image_transforms.py": {
        "torch": {
            "get_default_dtype_178": {
                "variable": {
                    "value": "default_float_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(img, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "array[..., ch_arr]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(array, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "np.transpose(array, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "np.array(array)",
                            "Call"
                        ],
                        [
                            "np.transpose(array, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.array(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_138": {
                "variable": {
                    "value": "resized_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pic.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "pic[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "pic.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "pic.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_160": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + (image - mean) * contrast",
                            "BinOp"
                        ],
                        [
                            "np.clip(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "(image / 255.0) ** random_gamma * 255.0",
                            "BinOp"
                        ],
                        [
                            "image + random_mean",
                            "BinOp"
                        ],
                        [
                            "np.clip(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "to_tensor(image)",
                            "Call"
                        ],
                        [
                            "image.permute(3, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_162": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.view(-1, 1, sz[0], sz[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filter[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.filter_size[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_40": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic).contiguous()",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(img, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "array[..., ch_arr]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "le_40": {
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_154": {
                "start": {
                    "value": "-sz",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sz + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_155": {
                "input": {
                    "value": "-x ** 2 / (2 * s ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_163": {
                "input": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), self.filter[0], padding=(self.filter_size[0], 0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), filter[0].to(image.device), padding=(filter_size[0], 0))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filter[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, self.filter_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_225": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_250": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + (image - mean) * contrast",
                            "BinOp"
                        ],
                        [
                            "np.clip(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "(image / 255.0) ** random_gamma * 255.0",
                            "BinOp"
                        ],
                        [
                            "image + random_mean",
                            "BinOp"
                        ],
                        [
                            "np.clip(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "to_tensor(image)",
                            "Call"
                        ],
                        [
                            "image.permute(3, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_252": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.view(-1, 1, sz[0], sz[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "filter[0].to(image.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "(filter_size[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_253": {
                "variable": {
                    "value": "img_blur",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), self.filter[0], padding=(self.filter_size[0], 0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), filter[0].to(image.device), padding=(filter_size[0], 0))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "filter[1].to(image.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, filter_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_237": {
                "start": {
                    "value": "-sz",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sz + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_238": {
                "input": {
                    "value": "-x ** 2 / (2 * s ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils_data/loaders.py": {
        "torch": {
            "initial_seed_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils_data/sampler.py": {
        "torch": {
            "randperm_27": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ],
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_56": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ],
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils_flow/correlation_to_matches_utils.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_22": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, w - 1, w)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float, requires_grad=False).to(corr.device)",
                            "Call"
                        ],
                        [
                            "x.view(1, 1, w, 1, 1).expand(b, 1, w, h, w)",
                            "Call"
                        ],
                        [
                            "x - M",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, h - 1, h)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float, requires_grad=False).to(corr.device)",
                            "Call"
                        ],
                        [
                            "y.view(1, h, 1, 1, 1).expand(b, h, 1, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_45": {
                "variable": {
                    "value": "gauss_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-((x - idx_x) ** 2 + (y - idx_y) ** 2) / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_111": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((grid_x, grid_y), dim=1)",
                            "Call"
                        ],
                        [
                            "unormalise_and_convert_mapping_to_flow(flow)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "mapping_est",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_source.unsqueeze(-1), y_source.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_139": {
                "variable": {
                    "value": "mapping_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "mapping_est",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_source.unsqueeze(-1), y_source.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_203": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow_gt - flow_est) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_203": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_348": {
                "variable": {
                    "value": "distB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(deltaX, 2) + torch.pow(deltaY, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_349": {
                "variable": {
                    "value": "(vals, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "distB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.pow(deltaX, 2) + torch.pow(deltaY, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "warped_points_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(warped_points_x, warped_points_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_367": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_451": {
                "variable": {
                    "value": "grid_X_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_452": {
                "variable": {
                    "value": "grid_Y_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_454": {
                "variable": {
                    "value": "grid_XY_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_X_vec, grid_Y_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_454": {
                "variable": {
                    "value": "grid_XY_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_464": {
                "variable": {
                    "value": "warped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_points.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_475": {
                "variable": {
                    "value": "grid_X_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_476": {
                "variable": {
                    "value": "grid_Y_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_478": {
                "variable": {
                    "value": "grid_XY_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_X_vec, grid_Y_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_478": {
                "variable": {
                    "value": "grid_XY_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_488": {
                "variable": {
                    "value": "warped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_points.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_86": {
                "variable": {
                    "value": "x_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_93": {
                "variable": {
                    "value": "y_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_146": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(flow, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping_est)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_est, output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping_est)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_est, (h_flow, w_flow), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "flow_est[mask_gt]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(flow, size=output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping_est)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_est, output_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "convert_mapping_to_flow(mapping_est)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow_est, (h_flow, w_flow), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "flow_est.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "flow_est[mask_gt]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_flow, w_flow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_196": {
                "variable": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_gt.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_flow, w_flow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_196": {
                "variable": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "input": {
                    "value": "x / temperature_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_277": {
                "variable": {
                    "value": "nc_A_Bvec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_280": {
                "variable": {
                    "value": "(match_A_vals, idx_A_Bvec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_282": {
                "variable": {
                    "value": "(match_A_vals, idx_A_Bvec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_293": {
                "variable": {
                    "value": "nc_B_Avec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_296": {
                "variable": {
                    "value": "(match_B_vals, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_298": {
                "variable": {
                    "value": "(match_B_vals, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_373": {
                "input": {
                    "value": "(target_points_norm[:, 0, :] - grid > 0).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_377": {
                "input": {
                    "value": "(target_points_norm[:, 1, :] - grid > 0).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_388": {
                "tensors": {
                    "value": "(X[idx.view(-1)].view(b, 1, N).contiguous(), Y[idx.view(-1)].view(b, 1, N).contiguous())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_398": {
                "input": {
                    "value": "target_points_norm - P_m_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_399": {
                "input": {
                    "value": "target_points_norm - P_p_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_400": {
                "input": {
                    "value": "target_points_norm - P_p_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_401": {
                "input": {
                    "value": "target_points_norm - P_m_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_458": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_463": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_482": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_487": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr / temperature_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_348": {
                "input": {
                    "value": "deltaY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_points_norm[:, 1, :].unsqueeze(1) - yB.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils_flow/flow_and_mapping_operations.py": {
        "torch": {
            "zeros_like_366": {
                "variable": {
                    "value": "tensor_unnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_382": {
                "variable": {
                    "value": "tensor_unnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_402": {
                "variable": {
                    "value": "tensor_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_417": {
                "variable": {
                    "value": "tensor_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "tensor.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_61": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_79": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_80": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_134": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_135": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_152": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_153": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_210": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_215": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_216": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_234": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_239": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_240": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_318": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils_flow/pixel_wise_mapping.py": {
        "torch": {
            "arange_68": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_86": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "vgrid.clone()",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ],
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_88": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "vgrid.clone()",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ],
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_116": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "vgrid.clone()",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ],
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_118": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "vgrid.clone()",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ],
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "validation/compute_matches_at_sparse_keypoints_from_pair_list.py": {
        "torch": {
            "set_grad_enabled_15": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_236": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_245": {
                "variable": {
                    "value": "source_torch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_245": {
                "variable": {
                    "value": "source_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "source_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_246": {
                "variable": {
                    "value": "target_torch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_246": {
                "variable": {
                    "value": "target_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_246": {
                "variable": {
                    "value": "target_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_90": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_600": {
                "variable": {
                    "value": "flow_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flow_from_1_to_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_flo(os.path.join(save_flow_dir, '{}-forward-flow.flo'.format(name_of_pair_for_flow)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(flow_from_1_to_0).unsqueeze(0).permute(0, 3, 1, 2).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_600": {
                "variable": {
                    "value": "flow_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_600": {
                "variable": {
                    "value": "flow_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_602": {
                "variable": {
                    "value": "mask_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_from_1_to_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageio.imread(os.path.join(save_flow_dir, '{}-forward-mask.png'.format(name_of_pair_for_flow))).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask_from_1_to_0 / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask_from_1_to_0).unsqueeze(0).cuda().float()",
                            "Call"
                        ],
                        [
                            "mask_from_1_to_0.bool() if version.parse(torch.__version__) >= version.parse('1.1') else mask_from_1_to_0.byte()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "unsqueeze_602": {
                "variable": {
                    "value": "mask_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_626": {
                "variable": {
                    "value": "flow_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flow_from_0_to_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_flo(os.path.join(save_flow_dir, '{}-backward-flow.flo'.format(name_of_pair_for_flow)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(flow_from_0_to_1).unsqueeze(0).permute(0, 3, 1, 2).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_626": {
                "variable": {
                    "value": "flow_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_626": {
                "variable": {
                    "value": "flow_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_628": {
                "variable": {
                    "value": "mask_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_from_0_to_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageio.imread(os.path.join(save_flow_dir, '{}-backward-mask.png'.format(name_of_pair_for_flow))).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask_from_0_to_1 / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask_from_0_to_1).unsqueeze(0).cuda().float()",
                            "Call"
                        ],
                        [
                            "mask_from_0_to_1.bool() if version.parse(torch.__version__) >= version.parse('1.1') else mask_from_0_to_1.byte()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "unsqueeze_628": {
                "variable": {
                    "value": "mask_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validation/compute_matching_keypoints_from_pair_list.py": {
        "torch": {
            "set_grad_enabled_8": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "variable": {
                    "value": "flow_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flow_from_1_to_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_flo(os.path.join(save_flow_dir, '{}-forward-flow.flo'.format(name_of_pair_for_flow)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(flow_from_1_to_0).unsqueeze(0).permute(0, 3, 1, 2).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_318": {
                "variable": {
                    "value": "flow_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_318": {
                "variable": {
                    "value": "flow_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_320": {
                "variable": {
                    "value": "mask_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_from_1_to_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageio.imread(os.path.join(save_flow_dir, '{}-forward-mask.png'.format(name_of_pair_for_flow))).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask_from_1_to_0 / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask_from_1_to_0).unsqueeze(0).cuda().float()",
                            "Call"
                        ],
                        [
                            "mask_from_1_to_0.bool() if version.parse(torch.__version__) >= version.parse('1.1') else mask_from_1_to_0.byte()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "unsqueeze_320": {
                "variable": {
                    "value": "mask_from_1_to_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_344": {
                "variable": {
                    "value": "flow_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flow_from_0_to_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_flo(os.path.join(save_flow_dir, '{}-backward-flow.flo'.format(name_of_pair_for_flow)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(flow_from_0_to_1).unsqueeze(0).permute(0, 3, 1, 2).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_344": {
                "variable": {
                    "value": "flow_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_344": {
                "variable": {
                    "value": "flow_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "mask_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_from_0_to_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageio.imread(os.path.join(save_flow_dir, '{}-backward-mask.png'.format(name_of_pair_for_flow))).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask_from_0_to_1 / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask_from_0_to_1).unsqueeze(0).cuda().float()",
                            "Call"
                        ],
                        [
                            "mask_from_0_to_1.bool() if version.parse(torch.__version__) >= version.parse('1.1') else mask_from_0_to_1.byte()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "unsqueeze_346": {
                "variable": {
                    "value": "mask_from_0_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "validation/compute_point_cloud.py": {
        "torch": {
            "tensor_41": {
                "variable": {
                    "value": "F_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fund",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "max(Issize) * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "max(Itsize) * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_48": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[f_s, f_t]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_53": {
                "variable": {
                    "value": "K1",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_57": {
                "variable": {
                    "value": "K2",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_62": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "E / torch.norm(E)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_62": {
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K2.t() @ F_tensor @ K1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "validation/flow_evaluation/evaluate_per_dataset.py": {
        "torch": {
            "from_numpy_77": {
                "variable": {
                    "value": "flow_est",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate((flow_est_x.reshape(-1, 1), flow_est_y.reshape(-1, 1)), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "flow_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate((flow_gt_x.reshape(-1, 1), flow_gt_y.reshape(-1, 1)), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_145": {
                "variable": {
                    "value": "Is",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_145": {
                "variable": {
                    "value": "Is",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "Is",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_146": {
                "variable": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_146": {
                "variable": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_209": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow_est - flow_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_209": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_210": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_252": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow_est - flow_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_252": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_298": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow_est - flow_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_298": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_449": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow_est - flow_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_449": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_355": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ETHInterval(root=data_dir, path_list=os.path.join(data_dir, 'info_ETH3D_files', '{}_every_5_rate_of_{}'.format(name_dataset, rate)), source_image_transform=input_images_transform, target_image_transform=input_images_transform, flow_transform=gt_flow_transform, co_transform=co_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "validation/flow_evaluation/metrics_flow.py": {
        "torch": {
            "norm_16": {
                "variable": {
                    "value": "EPE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_65": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_66": {
                "variable": {
                    "value": "gt_magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_20": {
                "variable": {
                    "value": "EPE_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "EPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(target_flow - input_flow, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "EPE.mean().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_47": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "validation/flow_evaluation/metrics_segmentation_matching.py": {
        "torch": {
            "unsqueeze_17": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "weighted_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(relative_part_weight, part_iou)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "(warped_mask.data.gt(0.5) == target_mask.data.gt(0.5)).double()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "target_mask.data.gt(0.5).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "target_mask.data.gt(0.5).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "(warped_mask.data.gt(0.5) & target_mask.data.gt(0.5)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "(warped_mask.data.gt(0.5) | target_mask.data.gt(0.5)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_27": {
                "input": {
                    "value": "relative_part_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(target_mask.data.gt(0.5).float(), 2, True), 3, True) / torch.sum(target_mask.data.gt(0.5).float())",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "part_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum((warped_mask.data.gt(0.5) & target_mask.data.gt(0.5)).float(), 2, True), 3, True) / torch.sum(torch.sum((warped_mask.data.gt(0.5) | target_mask.data.gt(0.5)).float(), 2, True), 3, True)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "validation/flow_evaluation/metrics_uncertainty.py": {
        "torch": {
            "sum_42": {
                "variable": {
                    "value": "avg_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_map * torch.exp(log_var)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_45": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_var_map[0][-1]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0][list_item]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_46": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_map * (1 - torch.exp(-math.sqrt(2) * R / torch.sqrt(var))) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_60": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_var_map[0][-1]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0][list_item]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_61": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_map * (1 - torch.exp(-math.sqrt(2) * R / torch.sqrt(var))) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var_map[1][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var_map[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var_map[1][list_item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var_map[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_93": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_137": {
                "input": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_var_map[0][-1]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0][list_item]",
                            "Subscript"
                        ],
                        [
                            "log_var_map[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_46": {
                "input": {
                    "value": "-math.sqrt(2) * R / torch.sqrt(var)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_61": {
                "input": {
                    "value": "-math.sqrt(2) * R / torch.sqrt(var)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_var)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_61": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_var)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_var)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "validation/plot.py": {
        "torch": {
            "sigmoid_64": {
                "variable": {
                    "value": "warping_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warping_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(warping_mask).squeeze().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "warping_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "occlusion_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "occlusion_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncertainty_comp_est['weight_map']",
                            "Subscript"
                        ],
                        [
                            "uncertainty_comp_est['weight_map']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_294": {
                "variable": {
                    "value": "proba_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_290": {
                "input": {
                    "value": "weight_map_item.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "validation/utils.py": {
        "torch": {
            "arange_260": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "wB",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_261": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "hB",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "pts2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x[binary_mask].unsqueeze(1), grid_y[binary_mask].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "pts1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mapping_x[binary_mask].unsqueeze(1), mapping_y[binary_mask].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_354": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mapping_from_homography_numpy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dstack((mapping_from_homography_x, mapping_from_homography_y))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_354": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_354": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_358": {
                "variable": {
                    "value": "mapping_from_homography_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalize(mapping_from_homography_torch).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "mapping_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}