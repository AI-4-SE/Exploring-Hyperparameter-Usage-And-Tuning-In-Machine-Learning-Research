{
    "dafne/data/datasets/dafne_dataset_mapper.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "gt_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(instances.gt_masks).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "instances.gt_boxes.tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_43": {
                "variable": {
                    "value": "instances.gt_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_44": {
                "variable": {
                    "value": "instances.gt_corners_area",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/data/datasets/dota.py": {
        "torch": {}
    },
    "dafne/data/datasets/hrsc2016.py": {
        "torch": {
            "tensor_171": {
                "variable": {
                    "value": "gt_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(instances.gt_masks).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "instances.gt_boxes.tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_179": {
                "variable": {
                    "value": "instances.gt_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_180": {
                "variable": {
                    "value": "instances.gt_corners_area",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/data/datasets/icdar15.py": {
        "torch": {}
    },
    "dafne/data/datasets/ucas_aod.py": {
        "torch": {}
    },
    "dafne/data/transforms/transform.py": {
        "torch": {}
    },
    "dafne/evaluation/dafne_evaluator.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "self._cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm.gather(self._predictions, dst=0)",
                            "Call"
                        ],
                        [
                            "list(itertools.chain(*predictions))",
                            "Call"
                        ],
                        [
                            "self._predictions",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/evaluation/dota_evaluation.py": {
        "torch": {
            "cat_210": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['scores'] for x in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['corners'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['labels'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['centerness'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_205": {
                "variable": {
                    "value": "ret.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_207": {
                "variable": {
                    "value": "ret.pred_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_208": {
                "variable": {
                    "value": "ret.pred_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_411": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_folder, 'results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/evaluation/hrsc_evaluation.py": {
        "torch": {
            "cat_199": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['scores'] for x in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['corners'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['labels'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_194": {
                "variable": {
                    "value": "ret.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_196": {
                "variable": {
                    "value": "ret.pred_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_197": {
                "variable": {
                    "value": "ret.pred_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_folder, 'results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/evaluation/icdar15_evaluation.py": {
        "torch": {
            "cat_202": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['scores'] for x in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['corners'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['labels'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_197": {
                "variable": {
                    "value": "ret.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_199": {
                "variable": {
                    "value": "ret.pred_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_200": {
                "variable": {
                    "value": "ret.pred_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_348": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_folder, 'results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/evaluation/ucas_aod_evaluation.py": {
        "torch": {
            "cat_200": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['scores'] for x in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['corners'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p['labels'] for p in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_195": {
                "variable": {
                    "value": "ret.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_197": {
                "variable": {
                    "value": "ret.pred_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_198": {
                "variable": {
                    "value": "ret.pred_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_folder, 'results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/evaluation/voc_eval.py": {
        "torch": {}
    },
    "dafne/layers/deform_conv.py": {
        "torch": {
            "stack_52": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ymin, xmin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ymax, xmin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "br",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ymin, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(off_0, off_1, off_2, off_3, off_4, off_5, off_6, off_7, off_8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_106": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ymin, xmin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ymax, xmin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "br",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ymin, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(off_0, off_1, off_2, off_3, off_4, off_5, off_6, off_7, off_8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(off_0, off_1, off_2, off_3, off_4, off_5, off_6, off_7, off_8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/backbone/dla.py": {
        "torch": {
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "variable"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "variable"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottle_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottle_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottle_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottle_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "variable"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottle_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottle_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottle_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "BottleneckX.cardinality",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottle_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.base_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, channels[0], kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_207": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(stride, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_286": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_298": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(torch.cat(x, 1))",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + children[0]",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x + residual.sum() * 0.0",
                            "BinOp"
                        ],
                        [
                            "self.root(x2, x1, *children)",
                            "Call"
                        ],
                        [
                            "self.tree2(x1, children=children)",
                            "Call"
                        ],
                        [
                            "self.base_layer(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, name)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_247": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_275": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_276": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "variable"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_292": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "variable"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_296": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/backbone/fpn.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/backbone/layers.py": {
        "torch": {
            "pad_292": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, expanded_padding, mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(input, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_322": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_80": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, expanded_padding, mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(input, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "expanded_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((self.padding[1] + 1) // 2, self.padding[1] // 2, (self.padding[0] + 1) // 2, self.padding[0] // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_99": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, expanded_padding, mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(input, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_293": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, expanded_padding, mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(input, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_315": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_333": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_23": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_90": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, expanded_padding, mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(input, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_95": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, expanded_padding, mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(input, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_97": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, expanded_padding, mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(input, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "F.pad(input, self.padding)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/backbone/lpf.py": {
        "torch": {
            "Tensor_35": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_89": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(a)",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_48": {
                "input": {
                    "value": "self.pad(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(a)",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_102": {
                "input": {
                    "value": "self.pad(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/backbone/mobilenet.py": {
        "torch": {
            "Sequential_14": {
                "*args": {
                    "value": "Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[conv_bn(3, input_channel, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "dafne/modeling/backbone/resnet_lpf.py": {
        "torch": {
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Downsample(filt_size=filter_size, stride=stride, channels=planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Downsample(filt_size=filter_size, stride=stride, channels=planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.MaxPool2d(kernel_size=2, stride=1), Downsample(filt_size=filter_size, stride=2, channels=planes[0])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Downsample(filt_size=filter_size, stride=2, channels=planes[0]), nn.MaxPool2d(kernel_size=2, stride=1), Downsample(filt_size=filter_size, stride=2, channels=planes[0])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_169": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_173": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/backbone/vovnet.py": {
        "torch": {
            "AdaptiveAvgPool2d_112": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(conv1x1(in_channel, concat_ch, module_name, 'concat'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu6_106": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "*args": {
                    "value": "OrderedDict(stem)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "OrderedDict(conv3x3(in_channel, stage_ch, module_name, i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_185": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/dafne/dafne.py": {
        "torch": {
            "arange_38": {
                "variable": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_39": {
                "variable": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_40": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([init_value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "in_channels_cls",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_43": {
                "tensors": {
                    "value": "(shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "variable": {
                    "value": "self.ctrness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.channels for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "in_channels[0]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "variable": {
                    "value": "self.corners_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.channels for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "in_channels[0]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.xywha_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.channels for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "in_channels[0]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "variable": {
                    "value": "self.center_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.channels for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "in_channels[0]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "self.base_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([-2.0, 2.0, 2.0, 2.0, 2.0, -2.0, -2.0, -2.0]).view(1, 8, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_258": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(init_value=1.0) for _ in range(self.num_levels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tanh_34": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_473": {
                "variable": {
                    "value": "reg_ctrness",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(feature.shape[0], 1, *feature.shape[2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "feature.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_34": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_xywha.unbind(1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_235": {
                "data": {
                    "value": "[-2.0, 2.0, 2.0, 2.0, 2.0, -2.0, -2.0, -2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "in_channels": {
                    "value": "_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_347": {
                "*args": {
                    "value": "*tower",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "reg_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0, c1, c2, c3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_331": {
                "num_groups": {
                    "value": "head_in_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "head_in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_381": {
                "tensors": {
                    "value": "(corners_tower, c0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_382": {
                "tensors": {
                    "value": "(corners_tower, c0, c1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_383": {
                "tensors": {
                    "value": "(corners_tower, c0, c1, c2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_431": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_432": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y + h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_433": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x + w, y + h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_434": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x + w, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_435": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0, c1, c2, c3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_441": {
                "variable": {
                    "value": "sin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_xywha.unbind(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(alpha) * np.pi - np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_442": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_xywha.unbind(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(alpha) * np.pi - np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_443": {
                "tensors": {
                    "value": "[sin, cos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_335": {
                "num_features": {
                    "value": "head_in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_438": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_xywha.unbind(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(alpha) * np.pi - np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dafne/modeling/dafne/dafne_outputs.py": {
        "torch": {
            "abs_61": {
                "variable": {
                    "value": "nom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y2 - y1) * x0 - (x2 - x1) * y0 + x2 * y1 - y2 * x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_62": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y2 - y1) ** 2 + (x2 - x1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0, c1, c2, c3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_74": {
                "variable": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c1, c2, c3, c0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "loc_to_size_range",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loc_to_size_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_to_size_range, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "locations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(locations, dim=0)",
                            "Call"
                        ],
                        [
                            "locations",
                            "Method Argument"
                        ],
                        [
                            "locations",
                            "Method Argument"
                        ],
                        [
                            "locations",
                            "Method Argument"
                        ],
                        [
                            "locations",
                            "Method Argument"
                        ],
                        [
                            "locations",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_350": {
                "variable": {
                    "value": "center_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left, top, right, bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_626": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels != num_classes",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_626": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_633": {
                "variable": {
                    "value": "class_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "instances.logits_pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_91": {
                "input": {
                    "value": "ctrness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                            "BinOp"
                        ],
                        [
                            "ctrness ** (1 / alpha)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_105": {
                "input": {
                    "value": "_cross2d(x, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_245": {
                "variable": {
                    "value": "training_targets[im_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_targets[im_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "num_loc_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(loc) for loc in locations]",
                            "ListComp"
                        ],
                        [
                            "num_loc_list",
                            "Method Argument"
                        ],
                        [
                            "num_loc_list",
                            "Method Argument"
                        ],
                        [
                            "num_loc_list",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_303": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bitmasks.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "bitmasks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_304": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bitmasks.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "bitmasks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_333": {
                "variable": {
                    "value": "center_gt[beg:end, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "xmin > boxes[beg:end, :, 0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_x[beg:end] - stride",
                            "BinOp"
                        ],
                        [
                            "torch.min(detections_poly[:, 0::2], dim=1).values",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes[beg:end, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_336": {
                "variable": {
                    "value": "center_gt[beg:end, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "ymin > boxes[beg:end, :, 1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_y[beg:end] - stride",
                            "BinOp"
                        ],
                        [
                            "torch.min(detections_poly[:, 1::2], dim=1).values",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes[beg:end, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_339": {
                "variable": {
                    "value": "center_gt[beg:end, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "xmax > boxes[beg:end, :, 2]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes[beg:end, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_x[beg:end] + stride",
                            "BinOp"
                        ],
                        [
                            "torch.max(detections_poly[:, 0::2], dim=1).values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_342": {
                "variable": {
                    "value": "center_gt[beg:end, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "ymax > boxes[beg:end, :, 3]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes[beg:end, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_y[beg:end] + stride",
                            "BinOp"
                        ],
                        [
                            "torch.max(detections_poly[:, 1::2], dim=1).values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_391": {
                "variable": {
                    "value": "reg_targets_ltrb_per_im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l, t, r, b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_405": {
                "variable": {
                    "value": "reg_targets_corners_per_im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0_centered, y0_centered, x1_centered, y1_centered, x2_centered, y2_centered, x3_centered, y3_centered]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_822": {
                "variable": {
                    "value": "cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_pred * ctrness_pred[:, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_829": {
                "variable": {
                    "value": "cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_pred * ctrness_pred[:, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_860": {
                "variable": {
                    "value": "detections_poly",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[per_locations[:, 0] + per_box_regression_corners[:, 0], per_locations[:, 1] + per_box_regression_corners[:, 1], per_locations[:, 0] + per_box_regression_corners[:, 2], per_locations[:, 1] + per_box_regression_corners[:, 3], per_locations[:, 0] + per_box_regression_corners[:, 4], per_locations[:, 1] + per_box_regression_corners[:, 5], per_locations[:, 0] + per_box_regression_corners[:, 6], per_locations[:, 1] + per_box_regression_corners[:, 7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_890": {
                "variable": {
                    "value": "hbboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kthvalue_918": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.post_nms_topk + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_922": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_922": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "tensors": {
                    "value": "targets_per_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*training_targets)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_698": {
                "input": {
                    "value": "instances.ctrness_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "ctrness_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_ctrness_targets(instances.reg_targets_abcd, self.centerness_alpha)",
                            "Call"
                        ],
                        [
                            "compute_ctrness_targets(instances.reg_targets_ltrb, self.centerness_alpha)",
                            "Call"
                        ],
                        [
                            "compute_ctrness_targets(instances.reg_targets_abcd, self.centerness_alpha)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_886": {
                "input": {
                    "value": "detections_poly[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_887": {
                "input": {
                    "value": "detections_poly[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_888": {
                "input": {
                    "value": "detections_poly[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_889": {
                "input": {
                    "value": "detections_poly[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/losses/box_intersection_2d.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "line1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[polys1, polys1[..., [1, 2, 3, 0], :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "line2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[polys2, polys2[..., [1, 2, 3, 0], :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1 + t * (x2 - x1), y1 + t * (y2 - y1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "p_ab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ab * am",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "norm_ab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ab * ab",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "p_ad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ad * am",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "norm_ad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ad * ad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[polys1, polys2, inters.view([n, -1, 2])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c1_in_2, c2_in_1, mask_inter.view([n, -1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_140": {
                "variable": {
                    "value": "num_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_160": {
                "variable": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([polys1, polys2, inters.view([n, -1, 2])], dim=1)",
                            "Call"
                        ],
                        [
                            "vertices.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "build_vertices(polys1, polys2, c12, c21, inters, mask_inter)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_sorted.unsqueeze(-1).repeat([1, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_163": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selected[..., 0:-1, 0] * selected[..., 1:, 1] - selected[..., 0:-1, 1] * selected[..., 1:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(total, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "vertices * mask.float().unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_164": {
                "input": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selected[..., 0:-1, 0] * selected[..., 1:, 1] - selected[..., 0:-1, 1] * selected[..., 1:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(total, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dafne/modeling/losses/smooth_l1.py": {
        "torch": {
            "abs_148": {
                "variable": {
                    "value": "l1_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_154": {
                "variable": {
                    "value": "l1_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tmp - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_155": {
                "variable": {
                    "value": "l1_abs[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "math.pi / 2.0 - l1_abs[:, 4]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_62": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_65": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < self.beta",
                            "Compare"
                        ],
                        [
                            "n < self.beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / self.beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * self.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_132": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(input - target)",
                            "Call"
                        ],
                        [
                            "torch.abs(input_tmp - target)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_135": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(input - target)",
                            "Call"
                        ],
                        [
                            "torch.abs(input_tmp - target)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_138": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < self.beta",
                            "Compare"
                        ],
                        [
                            "n < self.beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / self.beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * self.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_102": {
                "input": {
                    "value": "torch.stack((loss_0, loss_1, loss_2), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_171": {
                "input": {
                    "value": "torch.stack((loss_0, loss_1), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "(loss_0, loss_1, loss_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_171": {
                "tensors": {
                    "value": "(loss_0, loss_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/losses/utils.py": {
        "torch": {}
    },
    "dafne/modeling/nms/nms.py": {
        "torch": {
            "empty_64": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/one_stage_detector.py": {
        "torch": {
            "Conv2d_115": {
                "variable": {
                    "value": "top_module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "zip(processed_results, batched_inputs)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.TOP_MODULE.DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/modeling/tta.py": {
        "torch": {
            "from_numpy_129": {
                "variable": {
                    "value": "torch_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(new_image.transpose(2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "inst.pred_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "original_pred_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfm.inverse().apply_coords(pred_corners_np)",
                            "Call"
                        ],
                        [
                            "original_pred_corners.reshape(N, C)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_208": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_image(ret.pop('file_name'), self.tta_mapper.image_format)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_208": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dafne/utils/experiment.py": {
        "torch": {
            "manual_seed_149": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_194": {
                "variable": {
                    "value": "num_cuda_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_208": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=cuda_device_id_vis)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "cuda_device_id_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_cuda_devices))",
                            "Call"
                        ],
                        [
                            "list(range(len(cuda_device_id)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dafne/utils/mail.py": {
        "torch": {}
    },
    "dafne/utils/sort_corners.py": {
        "torch": {
            "ones_16": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 10, 100, 1000, 10000, 100000]",
                            "List"
                        ],
                        [
                            "T.shape[0]",
                            "Subscript"
                        ],
                        [
                            "bboxes.shape[0]",
                            "Subscript"
                        ],
                        [
                            "bboxes.shape[0]",
                            "Subscript"
                        ],
                        [
                            "num_boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_points_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "T.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "bbox_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p1_, p2_, p3_, p4_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "bboxes_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(bboxes_sorted, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "S_new[cond]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s2[cond], s3[cond])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "p2_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu', 'cuda']",
                            "List"
                        ],
                        [
                            "bboxes.device",
                            "Attribute"
                        ],
                        [
                            "bboxes.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_149": {
                "variable": {
                    "value": "bbox_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p1_, p2_, p3_, p4_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_161": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 10, 100, 1000, 10000, 100000]",
                            "List"
                        ],
                        [
                            "T.shape[0]",
                            "Subscript"
                        ],
                        [
                            "bboxes.shape[0]",
                            "Subscript"
                        ],
                        [
                            "bboxes.shape[0]",
                            "Subscript"
                        ],
                        [
                            "num_boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu', 'cuda']",
                            "List"
                        ],
                        [
                            "bboxes.device",
                            "Attribute"
                        ],
                        [
                            "bboxes.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_72": {
                "input": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes.new_zeros(num_boxes, dtype=bool)",
                            "Call"
                        ],
                        [
                            "done | cond",
                            "BinOp"
                        ],
                        [
                            "bboxes.new_zeros(num_boxes, dtype=bool)",
                            "Call"
                        ],
                        [
                            "done | cond",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_135": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s2, s3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmark.py": {
        "torch": {
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_92": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tools/demo/demo.py": {
        "torch": {
            "device_168": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/plain_train_net.py": {
        "torch": {
            "SGD_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SOLVER.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "cfg.SOLVER.NESTEROV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_593": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneStageRCNNWithTTA(cfg, model)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SOLVER.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_132": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Stream_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net.py": {
        "torch": {
            "GradScaler_75": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Stream_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/vis/feature_maps.py": {
        "torch": {
            "device_208": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_263": {
                "variable": {
                    "value": "hbox_polymask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmin, ymax, xmax, ymax, xmax, ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_188": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image.astype('float32').transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}