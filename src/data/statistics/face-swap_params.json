{
    "face_swap/api.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(image)",
                            "Call"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.tensor(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/data_lib.py": {
        "torch": {}
    },
    "face_swap/env.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/face_detector/mtcnn.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/face_detector/mtcnn_pytorch/src/detector.py": {
        "torch": {
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/face_detector/mtcnn_pytorch/src/first_stage.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/face_detector/mtcnn_pytorch/src/get_nets.py": {
        "torch": {
            "Sequential_40": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 10, 3, 1)), ('prelu1', nn.PReLU(10)), ('pool1', nn.MaxPool2d(2, 2, ceil_mode=True)), ('conv2', nn.Conv2d(10, 16, 3, 1)), ('prelu2', nn.PReLU(16)), ('conv3', nn.Conv2d(16, 32, 3, 1)), ('prelu3', nn.PReLU(32))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.conv6_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 28, 3, 1)), ('prelu1', nn.PReLU(28)), ('pool1', nn.MaxPool2d(3, 2, ceil_mode=True)), ('conv2', nn.Conv2d(28, 48, 3, 1)), ('prelu2', nn.PReLU(48)), ('pool2', nn.MaxPool2d(3, 2, ceil_mode=True)), ('conv3', nn.Conv2d(48, 64, 2, 1)), ('prelu3', nn.PReLU(64)), ('flatten', Flatten()), ('conv4', nn.Linear(576, 128)), ('prelu4', nn.PReLU(128))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.conv6_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 32, 3, 1)), ('prelu1', nn.PReLU(32)), ('pool1', nn.MaxPool2d(3, 2, ceil_mode=True)), ('conv2', nn.Conv2d(32, 64, 3, 1)), ('prelu2', nn.PReLU(64)), ('pool2', nn.MaxPool2d(3, 2, ceil_mode=True)), ('conv3', nn.Conv2d(64, 64, 3, 1)), ('prelu3', nn.PReLU(64)), ('pool3', nn.MaxPool2d(2, 2, ceil_mode=True)), ('conv4', nn.Conv2d(64, 128, 2, 1)), ('prelu4', nn.PReLU(128)), ('flatten', Flatten()), ('conv5', nn.Linear(1152, 256)), ('drop5', nn.Dropout(0.25)), ('prelu5', nn.PReLU(256))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.conv6_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.conv6_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.conv6_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.conv6_1(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_42": {
                "num_parameters": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_46": {
                "num_parameters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_49": {
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_82": {
                "num_parameters": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_83": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_86": {
                "num_parameters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_90": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "576",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_94": {
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_127": {
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_131": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_132": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_135": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_136": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_139": {
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_143": {
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_144": {
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/face_recognizer.py": {
        "torch": {
            "interpolate_17": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(image, self.best_input_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.best_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/faceshifter/AADLayer.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "attr_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "attr_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_h(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cin",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_42": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.conv_h(h))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "face_swap/faceshifter/AEI_Net.py": {
        "torch": {
            "Sequential_21": {
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_c, out_channels=out_c, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_38": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.conv_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "conv_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.deconv_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "deconv_stack[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_96": {
                "variable": {
                    "value": "self.up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_recognizer.FaceRecognizer.embedding_dimension",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg.GENERATOR.DIMS[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "up1_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.INPUT.IMAGE_SIZE // 2 ** len(cfg.GENERATOR.DIMS)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.aad_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AAD_ResBlk(dims[0], dims[0], dims[0], c_id, norm=norm)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "(x, skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "add_block(m, z_attr, z_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_125": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_aad_block(m, z_attrs[-1], z_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_82": {
                "input": {
                    "value": "z_attrs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/faceshifter/HEAR_Net.py": {
        "torch": {
            "Sequential_6": {
                "*args": {
                    "value": "nn.Conv2d(in_c, out_c, kernel_size=4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_c, out_c, kernel_size=4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.up5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c4, m1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c3, m2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "m3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c2, m3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "m4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c1, m4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up4(m3)",
                            "Call"
                        ],
                        [
                            "torch.cat((c1, m4), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_8": {
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_9": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_15": {
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(m4, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.up5(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "face_swap/faceshifter/MultiscaleDiscriminator.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[NLayerDiscriminator(cfg) for _ in range(cfg.DISCRIMINATOR.N_SCALES)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AvgPool2d_77": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "*args": {
                    "value": "nn.Conv2d(cfg.INPUT.N_CHANNELS, cfg.DISCRIMINATOR.BASE_DIM, kernel_size=kw, stride=2, padding=padw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "nn.Conv2d(nf_prev, nf, kernel_size=kw, stride=1, padding=padw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "*args": {
                    "value": "nn.Conv2d(nf, 1, kernel_size=kw, stride=1, padding=padw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "cfg.INPUT.N_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg.DISCRIMINATOR.BASE_DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.CONV_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_26": {
                "negative_slope": {
                    "value": "lrelu_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.LEAKY_RELU_SLOPE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "nn.Conv2d(nf_prev, nf, kernel_size=kw, stride=2, padding=padw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.BASE_DIM",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, cfg.DISCRIMINATOR.MAX_DIM)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, cfg.DISCRIMINATOR.MAX_DIM)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.CONV_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_48": {
                "negative_slope": {
                    "value": "lrelu_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.LEAKY_RELU_SLOPE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.BASE_DIM",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, cfg.DISCRIMINATOR.MAX_DIM)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, cfg.DISCRIMINATOR.MAX_DIM)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.CONV_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.BASE_DIM",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, cfg.DISCRIMINATOR.MAX_DIM)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, cfg.DISCRIMINATOR.MAX_DIM)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.CONV_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_38": {
                "negative_slope": {
                    "value": "lrelu_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DISCRIMINATOR.LEAKY_RELU_SLOPE",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "face_swap/faceshifter/train_AEI.py": {
        "torch": {
            "Adam_35": {
                "variable": {
                    "value": "opt_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cfg.GENERATOR.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "opt_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cfg.DISCRIMINATOR.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, f'model_{it:07d}.ckpt')",
                            "Call"
                        ],
                        [
                            "next((p for (i, p) in self._list_checkpoint_paths() if i == it))",
                            "Call"
                        ],
                        [
                            "self.model_manager.save_checkpoint(self.generator, self.discriminator, self.opt_g, self.opt_d, self.it)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_207": {
                "variable": {
                    "value": "self._summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.model_manager.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "loss_coeff",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / step_period",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "vis_result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_source, img_result, img_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'generator': generator.state_dict(), 'discriminator': discriminator.state_dict(), 'optimizer_g': optimizer_g.state_dict(), 'optimizer_d': optimizer_d.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(ckpt_path, map_location=torch.device('cpu'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, f'model_{it:07d}.ckpt')",
                            "Call"
                        ],
                        [
                            "next((p for (i, p) in self._list_checkpoint_paths() if i == it))",
                            "Call"
                        ],
                        [
                            "self.model_manager.save_checkpoint(self.generator, self.discriminator, self.opt_g, self.opt_d, self.it)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "self.cfg.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_512": {
                "input": {
                    "value": "1 - X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_512": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_514": {
                "input": {
                    "value": "X + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_514": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_340": {
                "input": {
                    "value": "0.5 * torch.mean(torch.pow(img_result - img_target, 2).reshape(batch_size, -1), dim=1) * same_person",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_96": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_366": {
                "input": {
                    "value": "loss_d_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss_d_fake + hinge_loss(d_scores_map, False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_328": {
                "x1": {
                    "value": "face_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.face_recognizer(img_source)",
                            "Call"
                        ],
                        [
                            "self.face_recognizer(img_source)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "face_embed_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.face_recognizer(img_result)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_335": {
                "input": {
                    "value": "target_attrs[i] - result_attrs[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_335": {
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_target.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_342": {
                "input": {
                    "value": "torch.pow(img_result - img_target, 2).reshape(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_343": {
                "input": {
                    "value": "img_result - img_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_343": {
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_target.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "face_swap/utils.py": {
        "torch": {
            "InstanceNorm2d_284": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}