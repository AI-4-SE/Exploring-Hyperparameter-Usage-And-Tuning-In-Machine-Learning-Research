{
    "benchmarks/run.py": {
        "sklearn": {
            "SGDClassifier_159": {
                "loss": {
                    "value": "log_loss",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "constant",
                    "possible_values": []
                },
                "eta0": {
                    "value": "LEARNING_RATE",
                    "possible_values": [
                        [
                            "0.005",
                            "Constant"
                        ]
                    ]
                },
                "penalty": {
                    "value": "none",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "PyTorchLogReg_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_70": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "n_features",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sigmoid_71": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "BCELoss_169": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_170": {
                "params": {
                    "value": "params",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "possible_values": [
                        [
                            "0.005",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "river/anomaly/test_svm.py": {
        "sklearn": {
            "SGDOneClassSVM_29": {
                "variable": {
                    "value": "sk",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**sklearn_params",
                    "possible_values": []
                }
            }
        }
    },
    "river/checks/__init__.py": {
        "sklearn": {
            "load_linnerud_76": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "river/compat/river_to_sklearn.py": {
        "sklearn": {
            "River2SKLBase_80": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                }
            },
            "River2SKLRegressor_90": {
                "base_class_0": {
                    "value": "sklearn.base.RegressorMixin",
                    "possible_values": []
                },
                "self.river_estimator": {
                    "value": "river_estimator",
                    "possible_values": []
                }
            },
            "River2SKLClassifier_201": {
                "base_class_0": {
                    "value": "sklearn.base.ClassifierMixin",
                    "possible_values": []
                },
                "self.river_estimator": {
                    "value": "river_estimator",
                    "possible_values": []
                }
            },
            "River2SKLTransformer_386": {
                "base_class_0": {
                    "value": "sklearn.base.TransformerMixin",
                    "possible_values": []
                },
                "self.river_estimator": {
                    "value": "river_estimator",
                    "possible_values": []
                }
            },
            "River2SKLClusterer_504": {
                "base_class_0": {
                    "value": "sklearn.base.ClusterMixin",
                    "possible_values": []
                },
                "self.river_estimator": {
                    "value": "river_estimator",
                    "possible_values": []
                }
            },
            "check_X_y_110": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "self.label_encoder_.transform(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_array_188": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "possible_values": []
                },
                "accept_large_sparse": {
                    "value": "True",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numeric",
                    "possible_values": []
                },
                "order": {
                    "value": "None",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_nd": {
                    "value": "False",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "check_X_y_228": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "self.label_encoder_.transform(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unique_labels_290": {
                "variable": {
                    "value": "classes",
                    "possible_values": []
                },
                "*ys": {
                    "value": "y",
                    "possible_values": [
                        [
                            "self.label_encoder_.transform(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_array_334": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "possible_values": []
                },
                "accept_large_sparse": {
                    "value": "True",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numeric",
                    "possible_values": []
                },
                "order": {
                    "value": "None",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_nd": {
                    "value": "False",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "check_array_368": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "possible_values": []
                },
                "accept_large_sparse": {
                    "value": "True",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numeric",
                    "possible_values": []
                },
                "order": {
                    "value": "None",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_nd": {
                    "value": "False",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "check_array_491": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "possible_values": []
                },
                "accept_large_sparse": {
                    "value": "True",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numeric",
                    "possible_values": []
                },
                "order": {
                    "value": "None",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_nd": {
                    "value": "False",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "check_array_524": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "possible_values": []
                },
                "accept_large_sparse": {
                    "value": "True",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numeric",
                    "possible_values": []
                },
                "order": {
                    "value": "None",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_nd": {
                    "value": "False",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "check_array_604": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "possible_values": []
                },
                "accept_large_sparse": {
                    "value": "True",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numeric",
                    "possible_values": []
                },
                "order": {
                    "value": "None",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_nd": {
                    "value": "False",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Pipeline_60": {
                "steps": {
                    "value": "[(name, convert_river_to_sklearn(step)) for (name, step) in estimator.steps.items()]",
                    "possible_values": []
                }
            },
            "check_is_fitted_185": {
                "estimator": {
                    "value": "self",
                    "possible_values": []
                },
                "attributes": {
                    "value": "instance_",
                    "possible_values": []
                }
            },
            "check_is_fitted_331": {
                "estimator": {
                    "value": "self",
                    "possible_values": []
                },
                "attributes": {
                    "value": "instance_",
                    "possible_values": []
                }
            },
            "check_is_fitted_365": {
                "estimator": {
                    "value": "self",
                    "possible_values": []
                },
                "attributes": {
                    "value": "instance_",
                    "possible_values": []
                }
            },
            "check_array_407": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "possible_values": []
                },
                "accept_large_sparse": {
                    "value": "True",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numeric",
                    "possible_values": []
                },
                "order": {
                    "value": "None",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "True",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "True",
                    "possible_values": []
                },
                "allow_nd": {
                    "value": "False",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "check_X_y_409": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "possible_values": [
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ],
                        [
                            "utils.check_array(X, **SKLEARN_INPUT_X_PARAMS)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "self.label_encoder_.transform(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_is_fitted_488": {
                "estimator": {
                    "value": "self",
                    "possible_values": []
                },
                "attributes": {
                    "value": "instance_",
                    "possible_values": []
                }
            },
            "check_is_fitted_601": {
                "estimator": {
                    "value": "self",
                    "possible_values": []
                },
                "attributes": {
                    "value": "instance_",
                    "possible_values": []
                }
            },
            "LabelEncoder_260": {
                "variable": {
                    "value": "self.label_encoder_",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "river/compat/sklearn_to_river.py": {
        "sklearn": {}
    },
    "river/compat/test_sklearn.py": {
        "sklearn": {
            "SGDRegressor_28": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "check_estimator_23": {
                "estimator": {
                    "value": "skl_estimator",
                    "possible_values": [
                        [
                            "compat.convert_river_to_sklearn(estimator)",
                            "Call"
                        ],
                        [
                            "compat.convert_river_to_sklearn(river_estimator)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_estimator_31": {
                "estimator": {
                    "value": "skl_estimator",
                    "possible_values": [
                        [
                            "compat.convert_river_to_sklearn(estimator)",
                            "Call"
                        ],
                        [
                            "compat.convert_river_to_sklearn(river_estimator)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "river/conftest.py": {
        "sklearn": {},
        "torch": {}
    },
    "river/linear_model/test_glm.py": {
        "sklearn": {
            "SGDRegressor_216": {
                "variable": {
                    "value": "sk",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**sklearn_params",
                    "possible_values": []
                }
            },
            "SGDRegressor_240": {
                "variable": {
                    "value": "sk",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**sklearn_params",
                    "possible_values": []
                }
            },
            "SGDClassifier_322": {
                "variable": {
                    "value": "sk",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**sklearn_params",
                    "possible_values": []
                }
            },
            "Perceptron_362": {
                "variable": {
                    "value": "sk",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**sklearn_params",
                    "possible_values": []
                }
            },
            "make_regression_378": {
                "variable": {
                    "value": "(X, y, true_coeffs)",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "possible_values": []
                },
                "n_features": {
                    "value": "20",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "4",
                    "possible_values": []
                },
                "coef": {
                    "value": "True",
                    "possible_values": []
                },
                "random_state": {
                    "value": "273",
                    "possible_values": []
                }
            },
            "SGDRegressor_398": {
                "variable": {
                    "value": "sk",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**{'learning_rate': 'constant', 'eta0': 0.01, 'alpha': 0.1, 'penalty': 'l1'}",
                    "possible_values": []
                }
            },
            "make_classification_426": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "possible_values": []
                },
                "n_features": {
                    "value": "20",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "4",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "273",
                    "possible_values": []
                }
            },
            "SGDClassifier_445": {
                "variable": {
                    "value": "sk",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**{'learning_rate': 'constant', 'eta0': 0.01, 'alpha': 0.001, 'penalty': 'l1', 'loss': 'log_loss'}",
                    "possible_values": []
                }
            },
            "log_loss_473": {
                "y_true": {
                    "value": "y",
                    "possible_values": [
                        [
                            "pd.Series(y)",
                            "Call"
                        ],
                        [
                            "pd.Series(y)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "sk_pred",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "river/metrics/test_cross_entropy.py": {
        "sklearn": {
            "log_loss_31": {
                "y_true": {
                    "value": "y_true[:-1]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[:-1]",
                    "possible_values": []
                }
            },
            "log_loss_27": {
                "y_true": {
                    "value": "y_true[:i + 1]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[:i + 1]",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1, 2]",
                    "possible_values": []
                }
            }
        }
    },
    "river/metrics/test_fbeta.py": {
        "sklearn": {}
    },
    "river/metrics/test_log_loss.py": {
        "sklearn": {
            "log_loss_22": {
                "y_true": {
                    "value": "y_true[:-1]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[:-1]",
                    "possible_values": []
                }
            },
            "log_loss_19": {
                "y_true": {
                    "value": "y_true[:i + 1]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[:i + 1]",
                    "possible_values": []
                }
            }
        }
    },
    "river/metrics/test_metrics.py": {
        "sklearn": {}
    },
    "river/metrics/test_r2.py": {
        "sklearn": {}
    },
    "river/naive_bayes/test_naive_bayes.py": {
        "sklearn": {}
    },
    "river/stream/iter_sklearn.py": {
        "sklearn": {}
    }
}