{
    "assd_resnet101.py": {
        "torch": {
            "cat_95": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[priors[:, :2] + locs[:, :2] * variances[0] * priors[:, 2:], priors[:, 2:] * torch.exp(locs[:, 2:] * variances[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_117": {
                "variable": {
                    "value": "area",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "x2 - x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_143": {
                "variable": {
                    "value": "yy1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "y1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_144": {
                "variable": {
                    "value": "xx1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_145": {
                "variable": {
                    "value": "yy2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "y2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_146": {
                "variable": {
                    "value": "xx2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "x2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_154": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(w, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_155": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "hw_flattern(h)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_159": {
                "variable": {
                    "value": "rem_areas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(y2 - y1, x2 - x1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(nms_thresh)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_221": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_229": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "hw_flattern(f)",
                            "Call"
                        ],
                        [
                            "torch.transpose(f, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_232": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "hw_flattern(h)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "hw_flattern(f)",
                            "Call"
                        ],
                        [
                            "torch.transpose(f, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "hw_flattern(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_235": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(f, g)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_237": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(s, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "hw_flattern(h)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_238": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(beta, h)",
                            "Call"
                        ],
                        [
                            "torch.transpose(o, 1, 2)",
                            "Call"
                        ],
                        [
                            "o.view(x.shape)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_271": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_272": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_273": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_274": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_280": {
                "variable": {
                    "value": "self.extra_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "add_extras(layer_cfg['extra'], batch_norm=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_281": {
                "variable": {
                    "value": "self.conf_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "build_conf(layer_cfg['pred'], num_blocks, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_282": {
                "variable": {
                    "value": "self.locs_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "build_locs(layer_cfg['pred'], num_blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_286": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_289": {
                "variable": {
                    "value": "self.fusion_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fusionModule()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_290": {
                "variable": {
                    "value": "self.fusion_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "768",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_291": {
                "variable": {
                    "value": "self.fusion_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "768",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_294": {
                "variable": {
                    "value": "self.att_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "make_attention()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_297": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_bilinear_344": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fusion_layers[1](feat1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(65, 65)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_bilinear_345": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fusion_layers[2](feat2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(65, 65)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_346": {
                "variable": {
                    "value": "feat[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fusion_conv(self.fusion_bn(torch.cat([feat0, feat1, feat2], dim=1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in locs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in conf]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_137": {
                "input": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(nms_thresh)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_138": {
                "input": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(nms_thresh)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_139": {
                "input": {
                    "value": "y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(nms_thresh)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_140": {
                "input": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(nms_thresh)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_319": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplances[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "cfg_i[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_blocks[i] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "cfg_i[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_blocks[i] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "self.output[i, cl, :count]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_conf_i_cl[ids[:count]].unsqueeze(1), p_boxes_i_cl[ids[:count]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "locs[:, 2:] * variances[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_308": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_310": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inplances[k + 1]",
                            "Subscript"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_346": {
                "tensors": {
                    "value": "[feat0, feat1, feat2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_coco.py": {
        "torch": {
            "from_numpy_115": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose((2, 0, 1)).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose((2, 0, 1)).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_pascal.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose((2, 0, 1)).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dec_loss.py": {
        "torch": {
            "min_27": {
                "variable": {
                    "value": "max_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 2:].unsqueeze(1).expand(num_a, num_b, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_29": {
                "variable": {
                    "value": "min_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, :2].unsqueeze(1).expand(num_a, num_b, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_32": {
                "variable": {
                    "value": "inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "[c_yx, hw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "[priors[:, :2] - priors[:, 2:] / 2, priors[:, :2] + priors[:, 2:] / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_119": {
                "variable": {
                    "value": "loss_locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_locs[pos_locs_mask].view(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "t_locs[pos_locs_mask].view(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_131": {
                "variable": {
                    "value": "num_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.neg_pos_ratio * num_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "pos_mask.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_137": {
                "variable": {
                    "value": "loss_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_conf[(pos_conf_mask + neg_conf_mask).gt(0)].view(-1, self.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "t_conf[(pos_mask + neg_mask).gt(0)]",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.LongTensor(batch_size, num_priors)",
                            "Call"
                        ],
                        [
                            "t_conf.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_13": {
                "input": {
                    "value": "hw.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_87": {
                "input": {
                    "value": "torch.sum(torch.exp(x - x_max), dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_87": {
                "input": {
                    "value": "torch.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dec_module.py": {
        "torch": {
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "device1",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_137": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(params=filter(lambda p: p.requires_grad, self.model.parameters()), lr=cfg.init_lr, momentum=0.9, weight_decay=cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "dset_loaders",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "PASCALVOC(root=cfg.root, image_sets=cfg.train_sets, transform=transforms.DEC_transforms(phase='train', size=cfg.img_size, mean=cfg.means, std=cfg.std))",
                            "Call"
                        ],
                        [
                            "PASCALVOC(root=cfg.root, image_sets=cfg.test_sets, transform=transforms.DEC_transforms(phase='val', size=cfg.img_size, mean=cfg.means, std=cfg.std))",
                            "Call"
                        ],
                        [
                            "PASCALVOC(root=cfg.root, image_sets=cfg.test_sets, transform=transforms.DEC_transforms(phase='val', size=cfg.img_size, mean=cfg.means, std=cfg.std))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_225": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_364": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_66": {
                "tensors": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "resume_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_247": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "all_boxes[cls_ind + 1][im_ind]",
                            "Subscript"
                        ],
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "all_boxes[cls_ind + 1][im_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ],
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ],
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_311": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "all_boxes[cls_ind + 1][im_ind]",
                            "Subscript"
                        ],
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "all_boxes[cls_ind + 1][im_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ],
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ],
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_398": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "all_boxes[cls_ind + 1][im_ind]",
                            "Subscript"
                        ],
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ],
                        [
                            "all_boxes[cls_ind + 1][im_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ],
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ],
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('weights', 'end_model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('weights', '{:d}_{:.4f}_model.pth'.format(epoch, epoch_loss))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_182": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "priorbox.py": {
        "torch": {
            "Tensor_37": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}