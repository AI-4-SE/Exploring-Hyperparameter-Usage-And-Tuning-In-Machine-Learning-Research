{
    "metrics.py": {
        "sklearn": {
            "cosine_similarity_21": {
                "variable": {
                    "value": "embedding_average",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "g_avg.reshape(1, 300)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "p_avg.reshape(1, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_22": {
                "variable": {
                    "value": "vector_extrema",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "g_extreme.reshape(1, 300)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "p_extreme.reshape(1, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_61": {
                "variable": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "g_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "pred_emb",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/Mem2Seq.py": {
        "sklearn": {},
        "torch": {
            "Adam_52": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_54": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_55": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_404": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_456": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_457": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_458": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_459": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_201": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batches[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(toppi.view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_400": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_token",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_429": {
                "variable": {
                    "value": "m_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.C[hop](story.contiguous().view(story.size(0), -1).long())",
                            "Call"
                        ],
                        [
                            "embed_A.view(story_size + (embed_A.size(-1),))",
                            "Call"
                        ],
                        [
                            "self.C[hop](story.contiguous().view(story.size(0), -1))",
                            "Call"
                        ],
                        [
                            "embed_A.view(story_size + (embed_A.size(-1),))",
                            "Call"
                        ],
                        [
                            "torch.sum(embed_A, 2).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_429": {
                "variable": {
                    "value": "m_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_435": {
                "variable": {
                    "value": "m_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.C[hop + 1](story.contiguous().view(story.size(0), -1).long())",
                            "Call"
                        ],
                        [
                            "embed_C.view(story_size + (embed_C.size(-1),))",
                            "Call"
                        ],
                        [
                            "self.C[hop + 1](story.contiguous().view(story.size(0), -1).long())",
                            "Call"
                        ],
                        [
                            "embed_C.view(story_size + (embed_C.size(-1),))",
                            "Call"
                        ],
                        [
                            "torch.sum(embed_C, 2).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_435": {
                "variable": {
                    "value": "m_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_438": {
                "variable": {
                    "value": "o_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_C * prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_452": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_token",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_476": {
                "variable": {
                    "value": "embed_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.C[hop](story.contiguous().view(story.size(0), -1).long())",
                            "Call"
                        ],
                        [
                            "embed_A.view(story_size + (embed_A.size(-1),))",
                            "Call"
                        ],
                        [
                            "self.C[hop](story.contiguous().view(story.size(0), -1))",
                            "Call"
                        ],
                        [
                            "embed_A.view(story_size + (embed_A.size(-1),))",
                            "Call"
                        ],
                        [
                            "torch.sum(embed_A, 2).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_476": {
                "variable": {
                    "value": "embed_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_480": {
                "variable": {
                    "value": "embed_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.C[hop + 1](story.contiguous().view(story.size(0), -1).long())",
                            "Call"
                        ],
                        [
                            "embed_C.view(story_size + (embed_C.size(-1),))",
                            "Call"
                        ],
                        [
                            "self.C[hop + 1](story.contiguous().view(story.size(0), -1).long())",
                            "Call"
                        ],
                        [
                            "embed_C.view(story_size + (embed_C.size(-1),))",
                            "Call"
                        ],
                        [
                            "torch.sum(embed_C, 2).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_480": {
                "variable": {
                    "value": "embed_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_494": {
                "variable": {
                    "value": "prob_lg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_A * u_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_499": {
                "variable": {
                    "value": "o_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_C * prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_46": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_batches.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_134": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batches[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(toppi.view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_134": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_batches.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_411": {
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_432": {
                "input": {
                    "value": "m_A * u_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_501": {
                "tensors": {
                    "value": "(u[0], o_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_409": {
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/enc_Luong.py": {
        "sklearn": {},
        "torch": {
            "Adam_43": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * self.decoder_learning_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name_dec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_244": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_245": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_246": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_286": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_287": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_288": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_292": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_322": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_325": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.W1(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_326": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.W1(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_333": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_output, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_334": {
                "variable": {
                    "value": "concat_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat(concat_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_268": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_271": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_255": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_292": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_322": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/enc_PTRUNK.py": {
        "sklearn": {},
        "torch": {
            "Adam_45": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * self.decoder_learning_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_47": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_292": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_293": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_294": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_331": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_332": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_333": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_335": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_366": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_369": {
                "variable": {
                    "value": "p_ptr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.W1(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_371": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_ptr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_375": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_embedded, context.squeeze())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_375": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_380": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W(hidden[0][-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_76": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_202": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "toppi.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_316": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_320": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "encoder_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_134": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "toppi.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "encoder_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_303": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_304": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_335": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_366": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/enc_vanilla.py": {
        "sklearn": {},
        "torch": {
            "Adam_47": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * self.decoder_learning_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name_dec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_252": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_253": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_254": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_292": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_293": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_294": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_276": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_279": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/kg_copy_model.py": {
        "sklearn": {},
        "torch": {
            "BCELoss_42": {
                "variable": {
                    "value": "self.sentient_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * self.decoder_learning_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_327": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_328": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "emb_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_329": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_370": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + hidden_size1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_371": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_379": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_h(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_382": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.W_h(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy).view(-1, seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_405": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_406": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_407": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_409": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_output, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_444": {
                "variable": {
                    "value": "concat_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat(concat_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_458": {
                "variable": {
                    "value": "self.sentinel_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim + self.kb_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_459": {
                "variable": {
                    "value": "self.out_kb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.kb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.kb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineSimilarity_461": {
                "variable": {
                    "value": "self.cosine_sim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_463": {
                "variable": {
                    "value": "self.s_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_498": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context.squeeze() + decoder_out, kb_cosine, last_sentient.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "self.kg_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(first_kg_token, first_kg_token + self.kb_max_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "self.kg_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(first_kg_token, first_kg_token + self.kb_max_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__169": {
                "parameters": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__170": {
                "parameters": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__171": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_232": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentient_gate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_299": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentient_gate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_355": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_dropout(self.embedding(inp_q))",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.dropout(inp_emb)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.emb_dim)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_360": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs * input_mask.unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentient_gate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "variable": {
                    "value": "sentinel_values[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sentient_gate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "sentinel_values[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentient_gate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_338": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_339": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_371": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_383": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.W_h(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy).view(-1, seq_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_282": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_283": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_379": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_214": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_276": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_277": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "*size": {
                    "value": "int(max_target_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess_kb_2.py": {
        "sklearn": {
            "cosine_similarity_165": {
                "X": {
                    "value": "relation_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_avg_word2vec(relation)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess_kb_incar.py": {
        "sklearn": {
            "cosine_similarity_151": {
                "X": {
                    "value": "relation_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_avg_word2vec(relation)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "batcher_kb_2.py": {
        "torch": {
            "from_numpy_55": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.vectors.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "x_o",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([max_len_q, b_s], np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "q_c_o",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q_c_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([max_len_q, b_s], np.int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q_c_o).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "y_o",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([max_len_a, b_s], np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "kb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kb_s[j] + kb_r[j] for j in range(len(kb_s))]",
                            "ListComp"
                        ],
                        [
                            "dataset['kb'][i:i + self.batch_size]",
                            "Subscript"
                        ],
                        [
                            "np.zeros([b_s, self.max_kb_len, self.max_kb_sub_len])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(kb).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "vocab_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vocab_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, len(self.stoi) + 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(vocab_mask)",
                            "Call"
                        ],
                        [
                            "(vocab_mask < self.stoi['<eos>']).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_195": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([max_len_q, b_s], np.int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x_mask).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([max_len_a, b_s], np.int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_mask).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "kb_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kb_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([b_s, self.max_kb_len])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(kb_mask).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_kg_copy.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "args.randseed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "args.randseed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_kg_copy_incar.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "args.randseed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "args.randseed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/masked_cross_entropy.py": {
        "torch": {
            "arange_10": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_43": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_47": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/until_temp.py": {
        "torch": {
            "transpose_109": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_79": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_85": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_101": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_110": {}
        }
    },
    "utils/utils_kvr.py": {
        "torch": {
            "transpose_121": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_122": {
                "variable": {
                    "value": "trg_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_124": {
                "variable": {
                    "value": "gete_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_234": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len, entity, entity_cal, entity_nav, entity_wet)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_111": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils_kvr_mem2seq.py": {
        "torch": {
            "transpose_144": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "trg_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_146": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_147": {
                "variable": {
                    "value": "gete_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_148": {
                "variable": {
                    "value": "conv_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_302": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len, entity, entity_cal, entity_nav, entity_wet, conv_seq, kb_arr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_109": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_134": {
                "key": {
                    "value": "lambda x: len(x[-1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_100": {
                "variable": {
                    "value": "story",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_122": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "MEM_TOKEN_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "ones_127": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils_new.py": {
        "torch": {
            "sum_21": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_27": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_47": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/{}.bin'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_33": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_52": {
                "f": {
                    "value": "'models/{}.bin'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "'models/{}.bin'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    }
}