{
    "datasets/image_folder.py": {
        "torch": {}
    },
    "datasets/imagenet.py": {
        "torch": {
            "stack_79": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate_awa2.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageFolder(osp.join(awa2_path, 'JPEGImages'), [name], 'test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "pred_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat, torch.ones(len(feat)).view(-1, 1).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "table",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cnn(data)",
                            "Call"
                        ],
                        [
                            "torch.cat([feat, torch.ones(len(feat)).view(-1, 1).cuda()], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "fcs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_vectors.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_34": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(feat, fcs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_72": {
                "f": {
                    "value": "args.cnn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "len(feat)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_imagenet.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "hits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(top)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(imagenet_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "pred_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat, torch.ones(len(feat)).view(-1, 1).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "table",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cnn(data)",
                            "Call"
                        ],
                        [
                            "torch.cat([feat, torch.ones(len(feat)).view(-1, 1).cuda()], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "fcs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_vectors.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_87": {
                "f": {
                    "value": "args.cnn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "len(feat)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "materials/glove.py": {
        "torch": {
            "zeros_58": {
                "*size": {
                    "value": "self.dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "materials/make_induced_graph.py": {
        "torch": {
            "stack_80": {
                "variable": {
                    "value": "vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(vectors)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "materials/process_resnet.py": {
        "torch": {
            "load_5": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resnet50-raw.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_13": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w, b.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_11": {
                "obj": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load('resnet50-raw.pth')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "resnet50-base.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_88": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv(x, self.adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_22": {
                "*size": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_35": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn_dense.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_92": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv(x, self.adj)",
                            "Call"
                        ],
                        [
                            "conv(x, self.r_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_22": {
                "*size": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_35": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn_dense_att.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.a_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.r_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.a_att",
                            "Attribute"
                        ],
                        [
                            "self.r_att",
                            "Attribute"
                        ],
                        [
                            "F.softmax(att, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_116": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv(x, adj_set, att)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_22": {
                "*size": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_35": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_38": {
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix((np.ones(len(edges)), (edges[:, 0], edges[:, 1])), shape=(n, n), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(inputs, self.w) + self.b",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_199": {
                "variable": {
                    "value": "sd",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.resnet_base.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_gcn_basic.py": {
        "torch": {
            "tensor_50": {
                "variable": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "graph['vectors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_51": {
                "variable": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(graph['vectors']).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(word_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[1] for x in fcfile]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(fc_vectors).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(fc_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[1] for x in fcfile]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(fc_vectors).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(fc_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gcn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_14": {
                "obj": {
                    "value": "gcn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(save_path, name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_15": {
                "obj": {
                    "value": "pred_obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "{'wnids': wnids, 'pred': output_vectors}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(save_path, name + '.pred')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "trlog",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_gcn_dense.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "graph['vectors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_48": {
                "variable": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(graph['vectors']).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(word_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[1] for x in fcfile]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(fc_vectors).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(fc_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_55": {
                "variable": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[1] for x in fcfile]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(fc_vectors).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(fc_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gcn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_14": {
                "obj": {
                    "value": "gcn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(save_path, name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_15": {
                "obj": {
                    "value": "pred_obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "{'wnids': wnids, 'pred': output_vectors}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(save_path, name + '.pred')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "trlog",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_gcn_dense_att.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "graph['vectors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_56": {
                "variable": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(graph['vectors']).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(word_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[1] for x in fcfile]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(fc_vectors).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(fc_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_63": {
                "variable": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[1] for x in fcfile]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(fc_vectors).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(fc_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gcn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_14": {
                "obj": {
                    "value": "gcn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(save_path, name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_15": {
                "obj": {
                    "value": "pred_obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "{'wnids': wnids, 'pred': output_vectors}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(save_path, name + '.pred')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "trlog",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_resnet_fit.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "model.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fcw[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "model.fc.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fcw[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_57": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.resnet_base.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_47": {
                "f": {
                    "value": "materials/resnet50-base.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_77": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_78": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(args.pred)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_78": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_97": {
                "obj": {
                    "value": "trlog",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "model.resnet_base.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(save_path, 'epoch-{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_67": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_39": {
                "tensors": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(o)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}