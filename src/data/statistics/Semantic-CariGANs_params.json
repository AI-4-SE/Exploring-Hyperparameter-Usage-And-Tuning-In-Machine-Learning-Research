{
    "AdaIn/adain.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "decoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/decoder_iter_320000.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/vgg_normalised.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdaIn/function.py": {
        "torch": {
            "svd_37": {
                "variable": {
                    "value": "(U, D, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_57": {
                "variable": {
                    "value": "source_f_norm_transfer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mat_sqrt(target_f_cov_eye)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.mm(torch.inverse(_mat_sqrt(source_f_cov_eye)), source_f_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_38": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "D.pow(0.5).diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_49": {
                "input": {
                    "value": "source_f_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_f - source_f_mean.expand_as(source_f)) / source_f_std.expand_as(source_f)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "source_f_norm.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_49": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_55": {
                "input": {
                    "value": "target_f_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_f - target_f_mean.expand_as(target_f)) / target_f_std.expand_as(target_f)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "target_f_norm.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_59": {
                "input": {
                    "value": "torch.inverse(_mat_sqrt(source_f_cov_eye))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "source_f_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_f - source_f_mean.expand_as(source_f)) / source_f_std.expand_as(source_f)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_59": {
                "input": {
                    "value": "_mat_sqrt(source_f_cov_eye)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "AdaIn/models/decoder.py": {
        "torch": {}
    },
    "AdaIn/models/vgg_normalised.py": {
        "torch": {}
    },
    "AdaIn/net.py": {
        "torch": {
            "Sequential_6": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d((1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 3, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_7": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_10": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_11": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_14": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_17": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_20": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_23": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_24": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_27": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_30": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_31": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_34": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_40": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_43": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_47": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_50": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_54": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_57": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_60": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_63": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_67": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_70": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_73": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_76": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_81": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_84": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_87": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_90": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.enc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_layers[:4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.enc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_layers[4:11]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.enc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_layers[11:18]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.enc_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_layers[18:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MSELoss_105": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdaIn/predict.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "decoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/decoder_iter_320000.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/vgg_normalised.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdaIn/sampler.py": {
        "torch": {}
    },
    "AdaIn/test.py": {
        "torch": {
            "device_90": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "args.decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "args.vgg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_138": {
                "variable": {
                    "value": "style",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[style_tf(Image.open(p).convert('RGB')) for p in style_paths]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_163": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style_transfer(vgg, decoder, content, style, args.alpha, interpolation_weights)",
                            "Call"
                        ],
                        [
                            "output.cpu()",
                            "Call"
                        ],
                        [
                            "style_transfer(vgg, decoder, content, style, args.alpha)",
                            "Call"
                        ],
                        [
                            "F.upsample(output, size=(256, 256), mode='nearest')",
                            "Call"
                        ],
                        [
                            "output.cpu()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdaIn/torch_to_pytorch.py": {
        "torch": {
            "Sequential_308": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_310": {
                "obj": {
                    "value": "n.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outputname + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "m.nInputPlane",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "m.nOutputPlane",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(m.kW, m.kH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(m.dW, m.dH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(m.padW, m.padH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "m.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "m.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_269": {
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_lua(t7_filename, unknown_classes=True)",
                            "Call"
                        ],
                        [
                            "model.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "m.running_mean.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "m.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "m.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "m.affine",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(m.kW, m.kH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(m.dW, m.dH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(m.padW, m.padH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "m.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_81": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(m.kW, m.kH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(m.dW, m.dH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(m.padW, m.padH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "m.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_85": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "m.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "m.weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "m.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "m.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_103": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_109": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "m.nInputPlane",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "m.nOutputPlane",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(m.kW, m.kH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(m.dW, m.dH)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(m.padW, m.padH)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_113": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(m.pad_l, m.pad_r, m.pad_t, m.pad_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_116": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(m.pad_l, m.pad_r, m.pad_t, m.pad_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.dimension",
                            "Attribute"
                        ],
                        [
                            "m.dimension",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "AdaIn/train.py": {
        "torch": {
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "args.vgg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "dataset": {
                    "value": "content_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FlatFolderDataset(args.content_dir, content_tf)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteSamplerWrapper(content_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "dataset": {
                    "value": "style_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FlatFolderDataset(args.style_dir, style_tf)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteSamplerWrapper(style_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.decoder.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{:s}/decoder_iter_{:d}.pth.tar'.format(args.save_dir, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_139": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "data/parseref_dataset.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "T[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.logical_xor(layer.numpy(), mask.numpy())).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_model.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_130": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "str(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_103": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/grid_sample.py": {
        "torch": {
            "grid_sample_7": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grid_sample_12": {
                "variable": {
                    "value": "output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(input.data.new(input.size()).fill_(1))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/inverse_tps_grid_gen.py": {
        "torch": {
            "zeros_44": {
                "variable": {
                    "value": "forward_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "N + 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_54": {
                "variable": {
                    "value": "inverse_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forward_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(N + 3, N + 3).cuda(target_control_points.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_59": {
                "variable": {
                    "value": "target_coordinate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "target_coordinate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "target_coordinate_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_coordinate_partial_repr, torch.ones(HW, 1).cuda(target_control_points.get_device()), target_coordinate]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_control_points, self.padding_matrix.expand(batch_size, 3, 2).cuda(source_control_points.get_device())]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "mapping_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inverse_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(forward_kernel)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y * 2 / (target_height - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([source_control_points, self.padding_matrix.expand(batch_size, 3, 2).cuda(source_control_points.get_device())], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "source_coordinate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_coordinate_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([target_coordinate_partial_repr, torch.ones(HW, 1).cuda(target_control_points.get_device()), target_coordinate], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mapping_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(inverse_kernel, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_16": {
                "input": {
                    "value": "pairwise_dist + 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "HW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_height * target_width",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "arange_165": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-(N - 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(0), y.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_37": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_50": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_61": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_62": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_72": {
                "variable": {
                    "value": "feat1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(self.pool1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_73": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(self.pool2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LambdaLR_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MSELoss_220": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_235": {
                "variable": {
                    "value": "x_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, self.w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_236": {
                "variable": {
                    "value": "x_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.w, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "y_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.t()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, self.w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_239": {
                "variable": {
                    "value": "y_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.t()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.w, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_241": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(fullx - fully, fullx - fully)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_249": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_255": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_255": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_338": {
                "variable": {
                    "value": "target_control_points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "target_control_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_378": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_379": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "grid_width * grid_height * ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_399": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_400": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_440": {
                "variable": {
                    "value": "target_control_points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "target_control_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_479": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_480": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "grid_width * grid_width * ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_499": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_500": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "hardtanh_502": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min_val": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "source_coordinate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(source_coordinate_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_524": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_550": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(n_channels_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_567": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_596": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "self.warp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_615": {
                "variable": {
                    "value": "fullx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_diffgrid[:, 0, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filterx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_616": {
                "variable": {
                    "value": "fully",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_diffgrid[:, 1, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filtery",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "variable": {
                    "value": "output_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fullx[:, :, 0:self.w, 0:self.w], fully[:, :, 0:self.w, 0:self.w])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_634": {
                "variable": {
                    "value": "fullx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_diffgrid[:, 0, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filterx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_635": {
                "variable": {
                    "value": "fully",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_diffgrid[:, 1, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filtery",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_636": {
                "variable": {
                    "value": "output_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fullx[:, :, 0:self.w, -self.w:], fully[:, :, -self.w:, 0:self.w])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_648": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_673": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(n_channels_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_687": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Hardtanh_725": {
                "variable": {
                    "value": "self.cutter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_val": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_753": {
                "variable": {
                    "value": "dp0_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, input_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_755": {
                "variable": {
                    "value": "dp0_zW",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dp0_z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_773": {
                "variable": {
                    "value": "dp0_zr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dp0_cari1, dp0_photo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_851": {
                "variable": {
                    "value": "self.model1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_852": {
                "variable": {
                    "value": "self.model2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_853": {
                "variable": {
                    "value": "self.model3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_860": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_911": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_1006": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_1008": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_1010": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_1039": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1117": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1185": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1186": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1187": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_1192": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_1217": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "dot_1250": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight.new_empty(height).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.matmul(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_1273": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_1306": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_1332": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1333": {
                "variable": {
                    "value": "self.psp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PyramidPooling(curr_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_1376": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_1382": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "(x, feat1, feat2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_97": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_302": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_304": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * grid_width * grid_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "affine_grid_404": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_405": {
                "variable": {
                    "value": "transformed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x, c], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0)), 0)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0).repeat(batchSize, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, input.size())",
                            "Call"
                        ],
                        [
                            "source_coordinate.view(batch_size, self.image_height, self.image_width, 2)",
                            "Call"
                        ],
                        [
                            "source_coordinate.view(batch_size, self.image_height, self.image_width, 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_408": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.model1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_482": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * 17",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_780": {
                "variable": {
                    "value": "dp0_zr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dp0_cari0 * 0.2 + dp0_cari1 * 0.8 + dp0_cari2 * 0 + dp0_cari3 * 0, dp0_photo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_961": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_1014": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_99": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_222": {
                "start": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_227": {
                "start": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_237": {
                "input": {
                    "value": "x_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=(1, self.w))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filtery",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_240": {
                "input": {
                    "value": "y_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(y, kernel_size=(1, self.w))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filtery",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_241": {
                "input": {
                    "value": "fullx - fully",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "fullx - fully",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_284": {
                "input": {
                    "value": "torch.mul(self.y_diff, self.y_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_299": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_300": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_376": {
                "output_size": {
                    "value": "grid_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "from_numpy_387": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arctanh(target_control_points.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_477": {
                "output_size": {
                    "value": "grid_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "from_numpy_488": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arctanh(target_control_points.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_553": {
                "in_channels": {
                    "value": "n_channels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_554": {
                "kernel_size": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_568": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_676": {
                "in_channels": {
                    "value": "n_channels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_688": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_704": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_808": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_809": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_812": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_814": {
                "in_channels": {
                    "value": "num_style",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_817": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_847": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_848": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_849": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_881": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_882": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_885": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_907": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_908": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_909": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_1021": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_1028": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_1045": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_1065": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_1066": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1138": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_1139": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1157": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_1160": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1163": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1164": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1167": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1168": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1171": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1172": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1176": {
                "in_channels": {
                    "value": "ndf * nf_mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1177": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1179": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_1207": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1208": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1209": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_1211": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1212": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "no_grad_1246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_1248": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(weight_mat.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_1249": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1250": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "weight_mat.reshape(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1258": {
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / sigma",
                            "BinOp"
                        ],
                        [
                            "getattr(module, self.name)",
                            "Call"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_1307": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_1308": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_1309": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1310": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_1311": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1322": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1323": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_1335": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1336": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1351": {
                "in_channels": {
                    "value": "3 + c_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_1352": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_1353": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1374": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_1375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_101": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "opt.niter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_268": {
                "input": {
                    "value": "torch.abs(x[:, :, :-1, :] - x[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_284": {
                "input": {
                    "value": "self.y_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.y_diff",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_349": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_351": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_353": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_354": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_357": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0, 0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_451": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_453": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_455": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_456": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_459": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0, 0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_526": {
                "*args": {
                    "value": "norm_layer(n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_650": {
                "*args": {
                    "value": "norm_layer(n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_823": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_826": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_827": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_830": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_841": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_846": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_890": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_893": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_901": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_906": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_927": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_936": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_938": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_940": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_941": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_943": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_947": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_955": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_959": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Tanh_1018": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_1100": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1104": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_1107": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1112": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Sigmoid_1115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_1148": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_1151": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_1182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_1215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_1327": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1328": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_1358": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_1359": {
                "num_features": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_1360": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_1369": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_1370": {
                "num_features": {
                    "value": "curr_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_1371": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_268": {
                "input": {
                    "value": "x[:, :, :-1, :] - x[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_364": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_366": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_369": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_464": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_465": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_467": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_470": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_529": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_653": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_929": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_949": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_1079": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1086": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_1089": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1097": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_1110": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "matmul_1248": {
                "input": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight.new_empty(height).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1249": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "weight_mat.reshape(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_1076": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Dropout_1035": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/parseref_gan_model.py": {
        "torch": {
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "self.CLSloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "coord_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_65": {
                "variable": {
                    "value": "coord_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_67": {
                "variable": {
                    "value": "coord_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(64)",
                            "Call"
                        ],
                        [
                            "coord_y.repeat(64, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(coord_y)",
                            "Call"
                        ],
                        [
                            "coord_y.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_69": {
                "variable": {
                    "value": "coord_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coord_x, coord_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.size(0)",
                            "Call"
                        ],
                        [
                            "self.parse_in.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_133": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "variable": {
                    "value": "dydx_l2norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dydx ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_350": {
                "variable": {
                    "value": "x_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.parse_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_parse_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.parse_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.parse_in, self.parse_ref)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_353": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_356": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.parse_ref.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_377": {
                "variable": {
                    "value": "transformed_parse_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.parse_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_parse_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.parse_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.parse_in, self.parse_ref)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_378": {
                "variable": {
                    "value": "transformed_parse_in_coord_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((coord_x, coord_y), 0)",
                            "Call"
                        ],
                        [
                            "coord_embedding.repeat(opt.batch_size, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.coord_embedding[:batch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "transformed_parse_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.parse_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.parse_in, self.parse_ref)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_379": {
                "variable": {
                    "value": "parse_in_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_parse_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_381": {
                "variable": {
                    "value": "transformed_parse_in_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.parse_in_face",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "parse_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_384": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_val_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref_A, True, True, self.parse_ref_B, self.parse_ref_C)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_385": {
                "variable": {
                    "value": "val_in_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_val_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_386": {
                "variable": {
                    "value": "transformed_val_in_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_face",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_394": {
                "variable": {
                    "value": "rec_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_parse_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(self.parse_in, transformed_parse_in_Wact, padding_mode='border')",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "rec_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(transformed_parse_in, self.parse_in)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_395": {
                "variable": {
                    "value": "rec_coord_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_parse_in_coord_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(coord_embedding, transformed_parse_in_Wact, padding_mode='border')",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "rec_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(transformed_parse_in, self.parse_in)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_398": {
                "variable": {
                    "value": "g_loss_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.parse_in - rec_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_399": {
                "variable": {
                    "value": "g_loss_rec_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(coord_embedding - rec_coord_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_400": {
                "variable": {
                    "value": "rec_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rec_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_401": {
                "variable": {
                    "value": "rec_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_parse_in_face",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(self.parse_in_face, parse_in_face_Wact.permute(0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "rec_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_403": {
                "variable": {
                    "value": "back_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.parse_ref.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.parse_ref.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.parse_ref.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_404": {
                "variable": {
                    "value": "skin_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.parse_ref.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.parse_ref.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.parse_ref.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "face_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(back_weight, skin_weight, component_eye_weight, component_nose_weight, component_up_mouth_weight, component_middle_mouth_weight, component_down_mouth_weight)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_412": {
                "variable": {
                    "value": "g_loss_ref_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_weight * torch.abs(self.parse_ref - transformed_parse_in)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_413": {
                "variable": {
                    "value": "parse_ref_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_weight * self.parse_ref",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.parse_ref.size(2), self.parse_ref.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_415": {
                "variable": {
                    "value": "transformed_parse_in_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_weight * transformed_parse_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.parse_ref.size(2), self.parse_ref.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_416": {
                "variable": {
                    "value": "g_loss_ref_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(parse_ref_sum - transformed_parse_in_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_427": {
                "variable": {
                    "value": "tmp_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(64) / 64.0",
                            "BinOp"
                        ],
                        [
                            "tmp_y.repeat(64, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(tmp_y)",
                            "Call"
                        ],
                        [
                            "tmp_y.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_431": {
                "variable": {
                    "value": "parse_ref_loc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_weight * pixel_location_x * self.parse_ref",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.parse_ref.size(2), self.parse_ref.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_432": {
                "variable": {
                    "value": "parse_ref_loc_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_weight * pixel_location_y * self.parse_ref",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.parse_ref.size(2), self.parse_ref.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_433": {
                "variable": {
                    "value": "transformed_parse_in_loc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_weight * pixel_location_x * transformed_parse_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.parse_ref.size(2), self.parse_ref.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_434": {
                "variable": {
                    "value": "transformed_parse_in_loc_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_weight * pixel_location_y * transformed_parse_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.parse_ref.size(2), self.parse_ref.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_435": {
                "variable": {
                    "value": "g_loss_ref_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(parse_ref_loc_x - transformed_parse_in_loc_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_601": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_val_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref_A, True, True, self.parse_ref_B, self.parse_ref_C)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_602": {
                "variable": {
                    "value": "val_in_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_val_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_603": {
                "variable": {
                    "value": "transformed_val_in_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_face",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_623": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_val_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref_A, True, True, self.parse_ref_B, self.parse_ref_C)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_624": {
                "variable": {
                    "value": "val_in_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_val_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_625": {
                "variable": {
                    "value": "transformed_val_in_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_face",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_646": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_val_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref_A, True, True, self.parse_ref_B, self.parse_ref_C)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_647": {
                "variable": {
                    "value": "val_in_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_val_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_648": {
                "variable": {
                    "value": "transformed_val_in_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_face",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_649": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_662": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_val_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref_A, True, True, self.parse_ref_B, self.parse_ref_C)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_663": {
                "variable": {
                    "value": "val_in_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_val_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_664": {
                "variable": {
                    "value": "transformed_val_in_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_face",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_665": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_705": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_val_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref_A, True, True, self.parse_ref_B, self.parse_ref_C)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_706": {
                "variable": {
                    "value": "val_in_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_val_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_707": {
                "variable": {
                    "value": "transformed_val_in_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_face",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_731": {
                "variable": {
                    "value": "transformed_val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "transformed_val_in_Wact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref)",
                            "Call"
                        ],
                        [
                            "self.netG(self.val_in, self.parse_ref_A, True, True, self.parse_ref_B, self.parse_ref_C)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_732": {
                "variable": {
                    "value": "val_in_face_Wact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_val_in_Wact.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_733": {
                "variable": {
                    "value": "transformed_val_in_face",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_in_face",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "val_in_face_Wact.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_143": {
                "input": {
                    "value": "(dydx_l2norm - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_134": {
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(y.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "dydx ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_347": {
                "input": {
                    "value": "out_src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_392": {
                "input": {
                    "value": "out_src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_398": {
                "input": {
                    "value": "self.parse_in - rec_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_399": {
                "input": {
                    "value": "coord_embedding - rec_coord_embedding",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_406": {
                "*size": {
                    "value": "self.parse_ref.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.parse_ref.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.parse_ref.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_407": {
                "*size": {
                    "value": "self.parse_ref.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.parse_ref.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.parse_ref.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_408": {
                "*size": {
                    "value": "self.parse_ref.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.parse_ref.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.parse_ref.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_409": {
                "*size": {
                    "value": "self.parse_ref.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.parse_ref.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.parse_ref.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_410": {
                "*size": {
                    "value": "self.parse_ref.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.parse_ref.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.parse_ref.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_416": {
                "input": {
                    "value": "parse_ref_sum - transformed_parse_in_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_421": {
                "start": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_425": {
                "start": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_435": {
                "input": {
                    "value": "parse_ref_loc_x - transformed_parse_in_loc_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_436": {
                "input": {
                    "value": "torch.abs(parse_ref_loc_y - transformed_parse_in_loc_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_412": {
                "input": {
                    "value": "self.parse_ref - transformed_parse_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_436": {
                "input": {
                    "value": "parse_ref_loc_y - transformed_parse_in_loc_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "ndarray": {
                    "value": "val_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_197": {
                "ndarray": {
                    "value": "parse_ref_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['A'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "parse_ref_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(parse_ref_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "parse_ref_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "input['A'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "parse_ref_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(parse_ref_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "parse_ref_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_210": {
                "ndarray": {
                    "value": "parse_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['B'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "parse_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(parse_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "parse_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "self.parse_in_color[0].cpu().float().numpy()",
                            "Call"
                        ],
                        [
                            "(parse_in_color + 1.0) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "Image.fromarray(parse_in_color.transpose(1, 2, 0).astype(np.uint8)).convert('RGB').resize((128, 128))",
                            "Call"
                        ],
                        [
                            "np.asarray(canvas, np.uint8)",
                            "Call"
                        ],
                        [
                            "self.val_in_large_color[0].cpu().float().numpy()",
                            "Call"
                        ],
                        [
                            "(parse_in_color + 1.0) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "Image.fromarray(parse_in_color.transpose(1, 2, 0).astype(np.uint8)).convert('RGB').resize((256, 256))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_243": {
                "ndarray": {
                    "value": "val_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "val_in_large_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['val_large'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_large_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_large_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_large_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_large_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_large_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_272": {
                "ndarray": {
                    "value": "parse_ref_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['A'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "parse_ref_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(parse_ref_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "parse_ref_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "input['A'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "parse_ref_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(parse_ref_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "parse_ref_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_313": {
                "ndarray": {
                    "value": "val_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "input['val'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "val_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_329": {
                "ndarray": {
                    "value": "parse_ref_A_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['A'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "parse_ref_A_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(parse_ref_A_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_A_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_A_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "parse_ref_A_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_341": {
                "ndarray": {
                    "value": "parse_ref_B_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input['B'][0].numpy().copy()",
                            "Call"
                        ],
                        [
                            "parse_ref_B_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(parse_ref_B_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_B_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "parse_ref_B_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "parse_ref_B_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_507": {
                "ndarray": {
                    "value": "parse_in_color_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "parse_in_color_grid[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "np.asarray(canvas, np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_520": {
                "ndarray": {
                    "value": "transformed_parse_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformed_parse_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_parse_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_parse_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_parse_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_parse_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_parse_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_537": {
                "ndarray": {
                    "value": "transformed_val_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_570": {
                "ndarray": {
                    "value": "real_A_color_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_A_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "real_A_color_grid[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_584": {
                "ndarray": {
                    "value": "rec_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rec_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "rec_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(rec_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "rec_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "rec_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "rec_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_617": {
                "ndarray": {
                    "value": "transformed_val_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_639": {
                "ndarray": {
                    "value": "transformed_val_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_721": {
                "ndarray": {
                    "value": "transformed_val_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_747": {
                "ndarray": {
                    "value": "transformed_val_in_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "transformed_val_in.data[0].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(transformed_val_in_color, axis=2), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color_numpy.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "transformed_val_in_color[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/pix2pix_model.py": {
        "torch": {
            "cat_77": {
                "variable": {
                    "value": "real_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "fake_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_49": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/tps_grid_gen.py": {
        "torch": {
            "zeros_34": {
                "variable": {
                    "value": "forward_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "N + 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_42": {
                "variable": {
                    "value": "inverse_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forward_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(N + 3, N + 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_47": {
                "variable": {
                    "value": "target_coordinate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "target_coordinate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "target_coordinate_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_coordinate_partial_repr, torch.ones(HW, 1), target_coordinate]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_control_points, Variable(self.padding_matrix.expand(batch_size, 3, 2))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "mapping_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(self.inverse_kernel)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y * 2 / (target_height - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([source_control_points, Variable(self.padding_matrix.expand(batch_size, 3, 2))], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "source_coordinate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(self.target_coordinate_repr)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "mapping_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Variable(self.inverse_kernel), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_17": {
                "input": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_diff_square[:, :, 0] + pairwise_diff_square[:, :, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "HW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_height * target_width",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_117": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "parsing/base.py": {
        "torch": {}
    },
    "parsing/celeba_dataset.py": {
        "torch": {}
    },
    "parsing/fcn.py": {
        "torch": {
            "upsample_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.head(c4)",
                            "Call"
                        ],
                        [
                            "upsample(x, imsize, **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, inter_channels, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_56": {
                "variable": {
                    "value": "auxout",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxlayer(c3)",
                            "Call"
                        ],
                        [
                            "upsample(auxout, imsize, **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_68": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_105": {
                "f": {
                    "value": "get_model_file('fcn_%s_%s' % (backbone, acronyms[dataset]), root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "parsing/logger.py": {
        "torch": {
            "is_initialized_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parsing/loss.py": {
        "torch": {
            "Sequential_50": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 19, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 19, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net1(inten)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits1, inten.size()[2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "inten.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net2(inten)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits2, inten.size()[2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "inten.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sort_23": {
                "variable": {
                    "value": "(loss, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss1 + loss2",
                            "BinOp"
                        ],
                        [
                            "self.criteria(logits, labels).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.thresh]",
                            "Subscript"
                        ],
                        [
                            "loss[:self.n_min]",
                            "Subscript"
                        ],
                        [
                            "self.nll(log_score, labels)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "NLLLoss_35": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_39": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "log_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_62": {
                "variable": {
                    "value": "inten",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_63": {
                "variable": {
                    "value": "lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "[16, 20, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_28": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss1 + loss2",
                            "BinOp"
                        ],
                        [
                            "self.criteria(logits, labels).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.thresh]",
                            "Subscript"
                        ],
                        [
                            "loss[:self.n_min]",
                            "Subscript"
                        ],
                        [
                            "self.nll(log_score, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "torch.tensor(thresh, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parsing/predict.py": {
        "torch": {
            "Upsample_34": {
                "variable": {
                    "value": "resize",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "img_384",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_384",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_384)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_384, 0)",
                            "Call"
                        ],
                        [
                            "img_384.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ],
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "img_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_256)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_256, 0)",
                            "Call"
                        ],
                        [
                            "img_256.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ],
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "models/19999_iter.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parsing/psp.py": {
        "torch": {
            "AdaptiveAvgPool2d_23": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_24": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_25": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_26": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_37": {
                "variable": {
                    "value": "feat1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(self.pool1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_38": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(self.pool2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_39": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(self.pool3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_40": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(self.pool4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, inter_channels, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.head(c4)",
                            "Call"
                        ],
                        [
                            "upsample(x, (h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PyramidPooling(in_channels, norm_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "(x, feat1, feat2, feat3, feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_75": {
                "variable": {
                    "value": "auxout",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxlayer(c3)",
                            "Call"
                        ],
                        [
                            "upsample(auxout, (h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ],
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_50": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ],
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_89": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ],
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "get_model_file('psp_%s_%s' % (backbone, acronyms[dataset]), root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "parsing/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "previous_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "previous_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_157": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_170": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_258": {
                "f": {
                    "value": "get_model_file('resnet50', root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_272": {
                "f": {
                    "value": "get_model_file('resnet101', root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_287": {
                "f": {
                    "value": "os.path.join(root, 'MS_DeepLab_resnet_pretrained_COCO_init.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "parsing/test.py": {
        "torch": {
            "Upsample_36": {
                "variable": {
                    "value": "resize",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "img_384",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_384",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_384)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_384, 0)",
                            "Call"
                        ],
                        [
                            "img_384.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ],
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "img_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_256)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_256, 0)",
                            "Call"
                        ],
                        [
                            "img_256.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ],
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_28": {
                "f": {
                    "value": "models/model_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "parsing/train.py": {
        "torch": {
            "DataLoader_79": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FaceMask(data_root, cropsize=cropsize, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_img_per_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "train_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.002",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lb.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lb, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.module.state_dict() if hasattr(net, 'module') else net.state_dict()",
                            "IfExp"
                        ],
                        [
                            "net.module.state_dict() if hasattr(net, 'module') else net.state_dict()",
                            "IfExp"
                        ]
                    ]
                },
                "f": {
                    "value": "save_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(respth, 'model_final_diss.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_151": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.module.state_dict() if hasattr(net, 'module') else net.state_dict()",
                            "IfExp"
                        ],
                        [
                            "net.module.state_dict() if hasattr(net, 'module') else net.state_dict()",
                            "IfExp"
                        ]
                    ]
                },
                "f": {
                    "value": "'./res/cp/{}_iter.pth'.format(it)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "torch": {
            "Upsample_73": {
                "variable": {
                    "value": "resize",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "style_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "T[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.logical_xor(layer.numpy(), mask.numpy())).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "img_384",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_384",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_384)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_384, 0)",
                            "Call"
                        ],
                        [
                            "img_384.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ],
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "img_256",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_256)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_256, 0)",
                            "Call"
                        ],
                        [
                            "img_256.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ],
                        [
                            "to_tensor(image_flip)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_flip, 0)",
                            "Call"
                        ],
                        [
                            "img_flip.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_276": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style_transfer(style_encoder, style_decoder, content, style, alpha)",
                            "Call"
                        ],
                        [
                            "output.cpu()",
                            "Call"
                        ],
                        [
                            "F.upsample(output, size=(256, 256))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_143": {
                "f": {
                    "value": "opt.parsing_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_217": {
                "f": {
                    "value": "opt.style_decoder_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_218": {
                "f": {
                    "value": "opt.style_encoder_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_174": {
                "f": {
                    "value": "opt.retrieval_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "retrieval/DAENet.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(n_channels_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(n_channels_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "n_channels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "kernel_size": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_99": {
                "in_channels": {
                    "value": "n_channels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "*args": {
                    "value": "norm_layer(n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "*args": {
                    "value": "norm_layer(n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_59": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "retrieval/base_dataset.py": {
        "torch": {}
    },
    "retrieval/image_folder.py": {
        "torch": {}
    },
    "retrieval/networks.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_34": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_58": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_59": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_69": {
                "variable": {
                    "value": "feat1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(self.pool1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_70": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(self.pool2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LambdaLR_92": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(n_channels_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_224": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "self.warp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_243": {
                "variable": {
                    "value": "fullx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_diffgrid[:, 0, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filterx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_244": {
                "variable": {
                    "value": "fully",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_diffgrid[:, 1, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filtery",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "output_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fullx[:, :, 0:self.w, 0:self.w], fully[:, :, 0:self.w, 0:self.w])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_262": {
                "variable": {
                    "value": "fullx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_diffgrid[:, 0, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filterx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_263": {
                "variable": {
                    "value": "fully",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_diffgrid[:, 1, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filtery",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "output_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fullx[:, :, 0:self.w, -self.w:], fully[:, :, -self.w:, 0:self.w])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_276": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(n_channels_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Hardtanh_353": {
                "variable": {
                    "value": "self.cutter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_val": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "(x, feat1, feat2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_94": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_96": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "n_channels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_182": {
                "kernel_size": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_304": {
                "in_channels": {
                    "value": "n_channels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_316": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_332": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_98": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "opt.niter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "norm_layer(n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_278": {
                "*args": {
                    "value": "norm_layer(n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_281": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "retrieval/predict.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "T[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.logical_xor(layer.numpy(), mask.numpy())).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 7, stride=2, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_174": {
                "variable": {
                    "value": "euclidean_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "loss_contrastive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(euclidean_distance, 2).squeeze() * (1 - label.float()) + torch.pow(torch.clamp(self.margin - euclidean_distance, min=0.0), 2).squeeze() * label.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_180": {
                "f": {
                    "value": "models/siamese.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_98": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_129": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_175": {
                "input": {
                    "value": "euclidean_distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pairwise_distance(output1, output2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_176": {
                "input": {
                    "value": "torch.clamp(self.margin - euclidean_distance, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_176": {
                "input": {
                    "value": "self.margin - euclidean_distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "retrieval/siamese.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "T[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.logical_xor(layer.numpy(), mask.numpy())).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 7, stride=2, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_98": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_129": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "retrieval/siamese_dataset.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "T[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.logical_xor(layer.numpy(), mask.numpy())).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "retrieval/test_siamese_celeba.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "T[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.logical_xor(layer.numpy(), mask.numpy())).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 7, stride=2, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_173": {
                "variable": {
                    "value": "euclidean_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_174": {
                "variable": {
                    "value": "loss_contrastive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(euclidean_distance, 2).squeeze() * (1 - label.float()) + torch.pow(torch.clamp(self.margin - euclidean_distance, min=0.0), 2).squeeze() * label.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_179": {
                "f": {
                    "value": "siamese.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_97": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_128": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_174": {
                "input": {
                    "value": "euclidean_distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pairwise_distance(output1, output2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_175": {
                "input": {
                    "value": "torch.clamp(self.margin - euclidean_distance, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_175": {
                "input": {
                    "value": "self.margin - euclidean_distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "retrieval/train_siamese.py": {
        "torch": {
            "DataLoader_161": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "siamese_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SiameseDataset()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "L1Loss_169": {
                "variable": {
                    "value": "criterion_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SiameseDataset(mode='Val')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 7, stride=2, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_155": {
                "variable": {
                    "value": "euclidean_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_156": {
                "variable": {
                    "value": "loss_contrastive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(euclidean_distance, 2).squeeze() * label.float() + torch.pow(torch.clamp(self.margin - euclidean_distance, min=0.0), 2).squeeze() * (1 - label.float())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "siamese.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_86": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_117": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "torch.abs(img1 - output2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_196": {
                "input": {
                    "value": "torch.abs(img1 - output2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_156": {
                "input": {
                    "value": "euclidean_distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pairwise_distance(output1, output2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_157": {
                "input": {
                    "value": "torch.clamp(self.margin - euclidean_distance, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_185": {
                "input": {
                    "value": "img1 - output2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_196": {
                "input": {
                    "value": "img1 - output2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_157": {
                "input": {
                    "value": "self.margin - euclidean_distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "util/image_pool.py": {
        "torch": {
            "cat_31": {
                "variable": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(return_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_17": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "upsample_12": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.upsample(input_image, size=(256, 256), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_28": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_28": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}