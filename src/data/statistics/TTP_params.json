{
    "NRP.py": {
        "torch": {
            "rand_86": {
                "variable": {
                    "value": "test_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf + gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf + 2 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf + 3 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf + 4 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_20": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.trunk_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "pretrained_purifiers/NRP_resG.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_dir, data_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_150": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(adv, img - eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_151": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(netG(img)).detach()",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv, img - eps), img + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "purifier(adv).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_68": {
                "f": {
                    "value": "'pretrained_generators/netG_{}_{}_19_{}.pth'.format(args.source_model, args.source_domain, args.target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_81": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.target_model](pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_82": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_models/resnet50_train_60_epochs-c8e5653e.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_158": {
                "input": {
                    "value": "out.argmax(dim=-1) == target_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_86": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.target_model](pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_87": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_models/checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_98": {
                "f": {
                    "value": "pretrained_purifiers/NRP.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_150": {
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(netG(img)).detach()",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv, img - eps), img + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "purifier(adv).detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "eval_all.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_dir, data_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_74": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.target_model](pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_75": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_models/resnet50_train_60_epochs-c8e5653e.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_158": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(adv, img - eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_159": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(netG(img)).detach()",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv, img - eps), img + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "purifier(adv).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.target_model](pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_80": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_models/checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "pretrained_purifiers/NRP.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "'pretrained_generators/netG_{}_{}_19_{}.pth'.format(args.source_model, args.source_domain, target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "out.argmax(dim=-1) == target_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_158": {
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(netG(img)).detach()",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv, img - eps), img + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "purifier(adv).detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "eval_sub.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_dir, data_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.target_model](pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_models/resnet50_train_60_epochs-c8e5653e.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_167": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(adv, img - eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_168": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(netG(img)).detach()",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv, img - eps), img + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "purifier(adv).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_80": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.target_model](pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_81": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_models/checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "pretrained_purifiers/NRP.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_149": {
                "f": {
                    "value": "'pretrained_generators/netG_{}_{}_19_{}.pth'.format(args.source_model, args.source_domain, target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_175": {
                "input": {
                    "value": "out.argmax(dim=-1) == target_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_167": {
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(netG(img)).detach()",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv, img - eps), img + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "purifier(adv).detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gaussian_smoothing.py": {
        "torch": {
            "arange_9": {
                "variable": {
                    "value": "x_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_12": {
                "variable": {
                    "value": "xy_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_grid, y_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "gaussian_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size - pad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_21": {
                "input": {
                    "value": "-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "gaussian_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * math.pi * variance) * torch.exp(-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance))",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel / torch.sum(gaussian_kernel)",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel.view(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "gaussian_kernel.repeat(channels, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_22": {
                "input": {
                    "value": "(xy_grid - mean) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "generators.py": {
        "torch": {
            "rand_126": {
                "variable": {
                    "value": "test_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf, ngf * 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf * 2, ngf * 4, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.upsampl1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(ngf * 4, ngf * 2, kernel_size=3, stride=2, padding=1, output_padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.upsampl2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(ngf * 2, ngf, kernel_size=3, stride=2, padding=1, output_padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.blockf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad2d_79": {
                "variable": {
                    "value": "self.crop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, -1, -1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_28": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_60": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_74": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_105": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "num_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_113": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_98": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(input)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.resblock1(x)",
                            "Call"
                        ],
                        [
                            "self.resblock2(x)",
                            "Call"
                        ],
                        [
                            "self.resblock3(x)",
                            "Call"
                        ],
                        [
                            "self.resblock4(x)",
                            "Call"
                        ],
                        [
                            "self.resblock5(x)",
                            "Call"
                        ],
                        [
                            "self.resblock6(x)",
                            "Call"
                        ],
                        [
                            "self.upsampl1(x)",
                            "Call"
                        ],
                        [
                            "self.upsampl2(x)",
                            "Call"
                        ],
                        [
                            "self.blockf(x)",
                            "Call"
                        ],
                        [
                            "self.crop(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/module_util.py": {
        "torch": {
            "Sequential_32": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "optimG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(args.src, TwoCropTransform(train_transform, img_size))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_210": {
                "variable": {
                    "value": "train_loader_match",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(args.match_dir, train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KLDivLoss_225": {
                "variable": {
                    "value": "criterion_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_256": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(adv, img - eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_257": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG(img)",
                            "Call"
                        ],
                        [
                            "kernel(adv)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv, img - eps), img + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_258": {
                "variable": {
                    "value": "adv_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(adv_rot, img_rot - eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_259": {
                "variable": {
                    "value": "adv_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG(img_rot)",
                            "Call"
                        ],
                        [
                            "kernel(adv_rot)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv_rot, img_rot - eps), img_rot + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_rot, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_260": {
                "variable": {
                    "value": "adv_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(adv_aug, img_aug - eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_261": {
                "variable": {
                    "value": "adv_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG(img_aug)",
                            "Call"
                        ],
                        [
                            "kernel(adv_aug)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv_aug, img_aug - eps), img_aug + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_aug, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_280": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_match_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(normalize(img_match))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "img_match_out.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_281": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linalg.norm(img_match_out, dim=1, ord=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(img_match_out, dim=1, ord=2).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_301": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_dir + '/netG_{}_{}_{}.pth'.format(args.model_type, epoch, args.match_target)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_284": {
                "variable": {
                    "value": "Ss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(normalize(adv))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linalg.norm(adv_out, dim=1, ord=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(out, dim=1, ord=2).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_256": {
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG(img)",
                            "Call"
                        ],
                        [
                            "kernel(adv)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv, img - eps), img + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_258": {
                "input": {
                    "value": "adv_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG(img_rot)",
                            "Call"
                        ],
                        [
                            "kernel(adv_rot)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv_rot, img_rot - eps), img_rot + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_rot, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_260": {
                "input": {
                    "value": "adv_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG(img_aug)",
                            "Call"
                        ],
                        [
                            "kernel(adv_aug)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(adv_aug, img_aug - eps), img_aug + eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_aug, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_281": {
                "input": {
                    "value": "img_match_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(normalize(img_match))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_285": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[adv_out, adv_rot_out, adv_aug_out]",
                            "List"
                        ],
                        [
                            "[adv_rot_out, adv_aug_out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rot90_28": {
                "variable": {
                    "value": "image[i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "input[i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "np.random.permutation([0, 1, 2, 3] * (int(batch / 4) + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}