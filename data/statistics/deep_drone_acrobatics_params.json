{
    "controller_learning/src/ControllerLearning/models/body_dataset.py": {
        "tensorflow": {
            "gather_221": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_num",
                            "Method Argument"
                        ],
                        [
                            "sample_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_229": {
                "variable": {
                    "value": "state_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "state_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(state_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "py_function_233": {
                "variable": {
                    "value": "fts_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.load_fts_sequence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[sample_num]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_226": {
                "params": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_num - idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "controller_learning/src/ControllerLearning/models/bodyrate_learner.py": {
        "tensorflow": {
            "list_physical_devices_22": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "self.min_val_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "min_val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MeanSquaredError_31": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_32": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Mean_34": {
                "variable": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_35": {
                "variable": {
                    "value": "self.val_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "validation_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "self.global_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Checkpoint_39": {
                "variable": {
                    "value": "self.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "self.global_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "net": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "create_file_writer_90": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.train_log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CheckpointManager_91": {
                "variable": {
                    "value": "self.ckpt_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "self.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "directory": {
                    "value": "self.train_log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_memory_growth_24": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_80": {
                "name": {
                    "value": "Train Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.train_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "self.optimizer.iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_83": {
                "name": {
                    "value": "v.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradients, self.network.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "self.optimizer.iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_108": {
                "x": {
                    "value": "k % self.config.summary_freq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_117": {
                "name": {
                    "value": "Validation Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.val_loss.result()",
                            "Call"
                        ],
                        [
                            "self.val_loss.result()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "tf.cast(self.global_epoch, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_117": {
                "x": {
                    "value": "self.global_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "controller_learning/src/ControllerLearning/models/nets.py": {
        "tensorflow": {
            "expand_dims_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "single_t_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "single_t_features",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_103": {
                "variable": {
                    "value": "preprocessed_fts",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self._pointnet_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "self.config.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "variable": {
                    "value": "preprocessed_fts",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "preprocessed_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(self._pointnet_branch, elems=input_features, parallel_iterations=self.config.seq_len)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preprocessed_fts, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "fts_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fts_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['fts']",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(fts_stack, (1, 0, 2, 3))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "total_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(fts_embeddings, states_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_77": {
                "filters": {
                    "value": "int(64 * g)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_79": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1D_80": {
                "filters": {
                    "value": "int(32 * g)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_81": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1D_82": {
                "filters": {
                    "value": "int(32 * g)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1D_84": {
                "filters": {
                    "value": "int(32 * g)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_86": {
                "units": {
                    "value": "int(64 * g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_88": {
                "units": {
                    "value": "64 * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_90": {
                "units": {
                    "value": "32 * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_92": {
                "units": {
                    "value": "16 * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_94": {
                "units": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_47": {
                "filters": {
                    "value": "int(16 * f)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.config.seq_len, int(64 * f))",
                            "Tuple"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_50": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_51": {
                "filters": {
                    "value": "int(32 * f)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_54": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_55": {
                "filters": {
                    "value": "int(64 * f)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_58": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_59": {
                "filters": {
                    "value": "int(64 * f)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GlobalAveragePooling2D_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_64": {
                "filters": {
                    "value": "int(64 * f)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.config.seq_len, int(64 * f))",
                            "Tuple"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_66": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1D_67": {
                "filters": {
                    "value": "int(32 * f)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_68": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1D_69": {
                "filters": {
                    "value": "int(32 * f)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1D_71": {
                "filters": {
                    "value": "int(32 * f)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_74": {
                "units": {
                    "value": "int(64 * f)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "controller_learning/src/ControllerLearning/models/tf_addons_normalizations.py": {
        "tensorflow": {
            "get_92": {
                "variable": {
                    "value": "self.beta_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "beta_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_93": {
                "variable": {
                    "value": "self.gamma_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "gamma_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ones'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_94": {
                "variable": {
                    "value": "self.beta_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "beta_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_95": {
                "variable": {
                    "value": "self.gamma_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "gamma_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_96": {
                "variable": {
                    "value": "self.beta_constraint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "beta_constraint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_97": {
                "variable": {
                    "value": "self.gamma_constraint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "gamma_constraint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_115": {
                "variable": {
                    "value": "tensor_input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normalized_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._apply_normalization(reshaped_inputs, input_shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(reshaped_inputs, mean=mean, variance=variance, scale=gamma, offset=beta, variance_epsilon=self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor_input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)",
                            "Call"
                        ],
                        [
                            "tensor_input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_163": {
                "variable": {
                    "value": "group_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "group_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._reshape_into_groups(inputs, input_shape, tensor_input_shape)",
                            "Call"
                        ],
                        [
                            "[tensor_input_shape[i] for i in range(len(input_shape))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(group_shape)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.int_shape(reshaped_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "reshaped_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "group_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._reshape_into_groups(inputs, input_shape, tensor_input_shape)",
                            "Call"
                        ],
                        [
                            "[tensor_input_shape[i] for i in range(len(input_shape))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(group_shape)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.int_shape(reshaped_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_173": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "reshaped_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._reshape_into_groups(inputs, input_shape, tensor_input_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, group_shape)",
                            "Call"
                        ],
                        [
                            "reshaped_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "group_reduction_axes[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_177": {
                "variable": {
                    "value": "normalized_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reshaped_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._reshape_into_groups(inputs, input_shape, tensor_input_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, group_shape)",
                            "Call"
                        ],
                        [
                            "reshaped_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(reshaped_inputs, group_reduction_axes[2:], keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(reshaped_inputs, group_reduction_axes[2:], keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_reshaped_weights(input_shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.reshape(self.gamma, broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_reshaped_weights(input_shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.reshape(self.beta, broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InputSpec_234": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "len(input_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "{self.axis: dim}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._create_broadcast_shape(input_shape)",
                            "Call"
                        ],
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._create_broadcast_shape(input_shape)",
                            "Call"
                        ],
                        [
                            "[1] * len(input_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "serialize_140": {
                "activation": {
                    "value": "self.beta_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_142": {
                "activation": {
                    "value": "self.gamma_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_144": {
                "activation": {
                    "value": "self.beta_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_146": {
                "activation": {
                    "value": "self.gamma_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_148": {
                "activation": {
                    "value": "self.beta_constraint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_150": {
                "activation": {
                    "value": "self.gamma_constraint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}