{
    "model/GVT.py": {
        "sklearn": {},
        "torch": {
            "Linear_68": {
                "variable": {
                    "value": "self.embedding_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.embedding_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_166": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gt_170": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_trg + self.mask[:, :mask_trg.size(-1), :mask_trg.size(-1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_247": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_248": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "NLLLoss_291": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_367": {
                "variable": {
                    "value": "sos_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "dec_batch_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sos_token, dec_batch[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_429": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(*params) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[DecoderLayer(*params) for l in range(num_layers)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_209": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.p_gen_linear(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_214": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_217": {
                "variable": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "enc_batch_extend_vocab_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_batch_extend_vocab.unsqueeze(1)] * x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_222": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_dist_.scatter_add(2, enc_batch_extend_vocab_, attn_dist_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_256": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kld_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "gaussian_kld(mean_p, log_var_p, mean, log_var)",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_258": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "NLLLoss_284": {
                "variable": {
                    "value": "self.emo_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_296": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_309": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_340": {
                "obj": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "self.optimizer.state.values()",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'encoder_state_dict': self.encoder.state_dict(), 'r_encoder_state_dict': self.r_encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'generator_dict': self.generator.state_dict(), 'embedding_dict': self.embedding.state_dict(), 'latent_dict': self.latent_layer.state_dict(), 'bow': self.bow.state_dict(), 'optimizer': self.optimizer.state_dict(), 'current_loss': running_avg_ppl}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}_{:.4f}_{:.4f}_{:.4f}'.format(iter, running_avg_ppl, f1_g, f1_b, ent_g, ent_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_400": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_444": {
                "variable": {
                    "value": "(_, next_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "enc_batch_extend_vocab_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_batch_extend_vocab_[0].unsqueeze(0)] * x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_225": {
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "torch.log(vocab_dist_.scatter_add(2, enc_batch_extend_vocab_, attn_dist_))",
                            "Call"
                        ],
                        [
                            "self.generator(pre_logit, attn_dist, enc_batch_extend_vocab if config.pointer_gen else None, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__409": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, next_word.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, next_word.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_253": {
                "tensors": {
                    "value": "(x_p, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "(x_p, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_311": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/SVT.py": {
        "sklearn": {},
        "torch": {
            "Linear_68": {
                "variable": {
                    "value": "self.embedding_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.vardec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[VarDecoderLayer1(*params) for l in range(config.num_var_layers)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[DecoderLayer(*params) for l in range(num_layers - config.num_var_layers)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.embedding_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gt_160": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_trg + self.mask[:, :mask_trg.size(-1), :mask_trg.size(-1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_240": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_308": {
                "variable": {
                    "value": "sos_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "dec_batch_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sos_token, dec_batch[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_412": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_471": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_473": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_542": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kld_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_563": {
                "variable": {
                    "value": "mask_trg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(enc_batch.size(0), 50)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_568": {
                "variable": {
                    "value": "(_, batch_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "probs",
                            "Name"
                        ],
                        [
                            "probs",
                            "Name"
                        ],
                        [
                            "self.generator(out, attn_dist, enc_batch_extend_vocab, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ],
                        [
                            "self.generator(out, attn_dist, enc_batch_extend_vocab, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ],
                        [
                            "self.generator(out, attn_dist, enc_batch_extend_vocab, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_593": {
                "variable": {
                    "value": "mask_trg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(enc_batch.size(0), 50)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_598": {
                "variable": {
                    "value": "(_, batch_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "probs",
                            "Name"
                        ],
                        [
                            "probs",
                            "Name"
                        ],
                        [
                            "self.generator(out, attn_dist, enc_batch_extend_vocab, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ],
                        [
                            "self.generator(out, attn_dist, enc_batch_extend_vocab, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ],
                        [
                            "self.generator(out, attn_dist, enc_batch_extend_vocab, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(*params) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "means[prior]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "means['prior']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "means[posterior]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "means['posterior']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "log_vars[prior]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_vars['prior']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "log_vars[posterior]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_vars['posterior']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_195": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.p_gen_linear(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "enc_batch_extend_vocab_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_batch_extend_vocab.unsqueeze(1)] * x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_208": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_dist_.scatter_add(2, enc_batch_extend_vocab_, attn_dist_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_247": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_259": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_288": {
                "obj": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "self.optimizer.state.values()",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'encoder_state_dict': self.encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'generator_dict': self.generator.state_dict(), 'embedding_dict': self.embedding.state_dict(), 'optimizer': self.optimizer.state_dict(), 'current_loss': running_avg_ppl}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'encoder_state_dict': self.encoder.state_dict(), 'r_encoder_state_dict': self.r_encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'generator_dict': self.generator.state_dict(), 'embedding_dict': self.embedding.state_dict(), 'optimizer': self.optimizer.state_dict(), 'current_loss': running_avg_ppl}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}_{:.4f}_{:.4f}_{:.4f}'.format(iter, running_avg_ppl, f1_g, f1_b, ent_g, ent_b))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}_{:.4f}_{:.4f}_{:.4f}'.format(iter, running_avg_ppl, f1_g, f1_b, ent_g, ent_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_329": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kld_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_337": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_338": {
                "variable": {
                    "value": "loss_aux",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_364": {
                "variable": {
                    "value": "sos_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "dec_batch_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sos_token, dec_batch[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__397": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_422": {
                "variable": {
                    "value": "(_, next_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_479": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_508": {
                "obj": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "self.optimizer.state.values()",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'encoder_state_dict': self.encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'generator_dict': self.generator.state_dict(), 'embedding_dict': self.embedding.state_dict(), 'optimizer': self.optimizer.state_dict(), 'current_loss': running_avg_ppl}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'encoder_state_dict': self.encoder.state_dict(), 'r_encoder_state_dict': self.r_encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'generator_dict': self.generator.state_dict(), 'embedding_dict': self.embedding.state_dict(), 'optimizer': self.optimizer.state_dict(), 'current_loss': running_avg_ppl}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}_{:.4f}_{:.4f}_{:.4f}'.format(iter, running_avg_ppl, f1_g, f1_b, ent_g, ent_b))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}_{:.4f}_{:.4f}_{:.4f}'.format(iter, running_avg_ppl, f1_g, f1_b, ent_g, ent_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_207": {
                "variable": {
                    "value": "enc_batch_extend_vocab_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_batch_extend_vocab_[0].unsqueeze(0)] * x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_211": {
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "torch.log(vocab_dist_.scatter_add(2, enc_batch_extend_vocab_, attn_dist_))",
                            "Call"
                        ],
                        [
                            "self.generator(pre_logit, attn_dist, enc_batch_extend_vocab if config.pointer_gen else None, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ],
                        [
                            "self.generator(pre_logit, attn_dist, enc_batch_extend_vocab if config.pointer_gen else None, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ],
                        [
                            "self.generator(pre_logit, attn_dist, enc_batch_extend_vocab if config.pointer_gen else None, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__342": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_385": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kld_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ],
                        [
                            "gaussian_kld(mean['posterior'], log_var['posterior'], mean['prior'], log_var['prior'])",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_393": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_394": {
                "variable": {
                    "value": "loss_aux",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_426": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, next_word.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, next_word.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__548": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_475": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_261": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/transformer.py": {
        "sklearn": {},
        "torch": {
            "Linear_68": {
                "variable": {
                    "value": "self.embedding_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.embedding_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_165": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gt_169": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_trg + self.mask[:, :mask_trg.size(-1), :mask_trg.size(-1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_250": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_252": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_303": {
                "variable": {
                    "value": "sos_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "dec_batch_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sos_token, dec_batch[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_338": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_384": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_429": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_430": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "variable": {
                    "value": "halting_probability",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "inputs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "variable": {
                    "value": "remainders",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "inputs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_441": {
                "variable": {
                    "value": "n_updates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "inputs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_443": {
                "variable": {
                    "value": "previous_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(*params) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[DecoderLayer(*params) for l in range(num_layers)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_210": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.p_gen_linear(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_218": {
                "variable": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "enc_batch_extend_vocab_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_batch_extend_vocab.unsqueeze(1)] * x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_223": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_dist_.scatter_add(2, enc_batch_extend_vocab_, attn_dist_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_258": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_285": {
                "obj": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'encoder_state_dict': self.encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'generator_dict': self.generator.state_dict(), 'embedding_dict': self.embedding.state_dict(), 'optimizer': self.optimizer.state_dict(), 'current_loss': running_avg_ppl}",
                            "Dict"
                        ],
                        [
                            "state + time_enc[:, :inputs.shape[1], :].type_as(inputs.data)",
                            "BinOp"
                        ],
                        [
                            "state + pos_enc[:, step, :].unsqueeze(1).repeat(1, inputs.shape[1], 1).type_as(inputs.data)",
                            "BinOp"
                        ],
                        [
                            "fn(state)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}_{:.4f}_{:.4f}_{:.4f}'.format(iter, running_avg_ppl, f1_g, f1_b, ent_g, ent_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_351": {
                "variable": {
                    "value": "(_, next_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_397": {
                "variable": {
                    "value": "(_, next_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "enc_batch_extend_vocab_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_batch_extend_vocab_[0].unsqueeze(0)] * x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_226": {
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "torch.log(vocab_dist_.scatter_add(2, enc_batch_extend_vocab_, attn_dist_))",
                            "Call"
                        ],
                        [
                            "self.generator(pre_logit, attn_dist, enc_batch_extend_vocab if config.pointer_gen else None, extra_zeros, attn_dist_db=None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_327": {
                "input": {
                    "value": "p_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R_t + N_t",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, next_word.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, next_word.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, next_word.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, next_word.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_254": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_492": {
                "variable": {
                    "value": "previous_att_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "interact.py": {
        "torch": {
            "DataLoader_64": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "Dataset(inp, vacab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "model/backup.py": {
        "torch": {
            "LSTM_53": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_63": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_66": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, config.hidden_dim), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out1(output)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.reduce_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.reduce_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "hidden_reduced_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce_h(h_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "hidden_reduced_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce_c(c_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.decode_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "encoder_feature + dec_fea_expanded",
                            "BinOp"
                        ],
                        [
                            "att_features + coverage_feature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "attn_dist_ / normalization_factor",
                            "BinOp"
                        ],
                        [
                            "attn_dist.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "attn_dist.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h.contiguous()",
                            "Call"
                        ],
                        [
                            "h.view(-1, n)",
                            "Call"
                        ],
                        [
                            "h.view(-1, t_k, n)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.x_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2 + config.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_167": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.out1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "s_t_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_decoder.view(-1, config.hidden_dim), c_decoder.view(-1, config.hidden_dim))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lstm_out.view(-1, config.hidden_dim), c_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, config.hidden_dim), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out1(output)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_268": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_323": {
                "variable": {
                    "value": "sum_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(step_losses, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_325": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avg_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum_losses / dec_lens_var.float().cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.oov_emb_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_85": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_87": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, config.hidden_dim), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out1(output)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_162": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 4 + config.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "s_t_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_decoder.view(-1, config.hidden_dim), c_decoder.view(-1, config.hidden_dim))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "p_gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_t, s_t_hat, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_207": {
                "variable": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.p_gen_linear(p_gen_input)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_263": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_285": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'encoder_state_dict': self.encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'reduce_state_dict': self.reduce_state.state_dict(), 'optimizer': self.optimizer.state_dict(), 'current_loss': running_avg_ppl}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}_{:.4f}_{:.4f}_{:.4f}'.format(iter, running_avg_ppl, f1_g, f1_b, ent_g, ent_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_311": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_311": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_358": {
                "variable": {
                    "value": "(_, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v(e)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "(c_t_1, y_t_1_embd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "vocab_dist_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vocab_dist_, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_314": {
                "variable": {
                    "value": "step_coverage_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(attn_dist, coverage)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_323": {
                "tensors": {
                    "value": "step_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__330": {
                "parameters": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__331": {
                "parameters": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__332": {
                "parameters": {
                    "value": "self.reduce_state.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_312": {
                "input": {
                    "value": "gold_probs + config.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "unk_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_314": {
                "input": {
                    "value": "attn_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "attn_dist_ / normalization_factor",
                            "BinOp"
                        ],
                        [
                            "attn_dist.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "attn_dist.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/common_layer.py": {
        "torch": {
            "from_numpy_644": {
                "variable": {
                    "value": "torch_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.triu(np.full([max_length, max_length], -np.inf), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_678": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_689": {
                "variable": {
                    "value": "self_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(attn_shape).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self_mask)",
                            "Call"
                        ],
                        [
                            "self_mask.unsqueeze(0).expand(batch_size, size, size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_832": {
                "variable": {
                    "value": "c_t_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * config.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_873": {
                "variable": {
                    "value": "seq_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_122": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_261": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_262": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_norm.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_387": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_388": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_norm.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_460": {
                "variable": {
                    "value": "self.query_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_key_depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "total_key_depth - total_key_depth % num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_461": {
                "variable": {
                    "value": "self.key_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_key_depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "total_key_depth - total_key_depth % num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_462": {
                "variable": {
                    "value": "self.value_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_value_depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "total_value_depth - total_value_depth % num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_463": {
                "variable": {
                    "value": "self.output_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "total_value_depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "total_value_depth - total_value_depth % num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_465": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_509": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_linear(queries)",
                            "Call"
                        ],
                        [
                            "self._split_heads(queries)",
                            "Call"
                        ],
                        [
                            "queries * self.query_scale",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "keys.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_524": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(queries, keys.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask, -1e+18)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_530": {
                "variable": {
                    "value": "contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.value_linear(values)",
                            "Call"
                        ],
                        [
                            "self._split_heads(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConstantPad1d_557": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(kernel_size - 1, 0) if pad_type == 'left' else (kernel_size // 2, (kernel_size - 1) // 2)",
                            "IfExp"
                        ],
                        [
                            "'left'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_558": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_598": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ReLU_599": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_600": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_618": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_619": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_630": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_664": {
                "ndarray": {
                    "value": "signal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate([np.sin(scaled_time), np.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "np.pad(signal, [[0, 0], [0, channels % 2]], 'constant', constant_values=[0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "signal.reshape([1, length, channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_737": {
                "variable": {
                    "value": "self.lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KLDivLoss_755": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_768": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.data == self.padding_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_836": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_1074": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(queries, keys.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask, -1e+18)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_1075": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_271": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_398": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_637": {
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_830": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, batch['max_art_oovs'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1054": {
                "input": {
                    "value": "1 + (recog_logvar - prior_logvar) - torch.div(torch.pow(prior_mu - recog_mu, 2), torch.exp(prior_logvar)) - torch.div(torch.exp(recog_logvar), torch.exp(prior_logvar))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_283": {
                "tensors": {
                    "value": "(x_norm, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_411": {
                "tensors": {
                    "value": "(x_norm, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_618": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_619": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_1075": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "(x_norm, x_norm_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "(x_norm, x_norm_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_278": {
                "tensors": {
                    "value": "(x_norm, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_404": {
                "tensors": {
                    "value": "(x_norm, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_1056": {
                "input": {
                    "value": "torch.exp(recog_logvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(prior_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_592": {
                "in_features": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "div_1055": {
                "input": {
                    "value": "torch.pow(prior_mu - recog_mu, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(prior_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_1056": {
                "input": {
                    "value": "prior_logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_1070": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(queries, keys.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask, -1e+18)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_1055": {
                "input": {
                    "value": "prior_mu - recog_mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_1055": {
                "input": {
                    "value": "prior_logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/rnn_cell.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.gain_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, self.hidden_size * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.hidden_size * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.gain_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, self.hidden_size * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.hidden_size * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(input_size, 3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size, 3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(input, dim=-1, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_36": {
                "variable": {
                    "value": "gi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_i",
                            "Name"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ],
                        [
                            "hidden_i",
                            "Name"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_37": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "current_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_95": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "current_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_16": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "var_26": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_i",
                            "Name"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ],
                        [
                            "hidden_i",
                            "Name"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_57": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_102": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/seq2seq.py": {
        "torch": {
            "GRU_53": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_63": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_66": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, 2 * config.hidden_dim), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out1(output)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.reduce_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.reduce_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "hidden_reduced_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce_h(h_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "hidden_reduced_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce_c(c_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.decode_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_135": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "encoder_feature + dec_fea_expanded",
                            "BinOp"
                        ],
                        [
                            "att_features + coverage_feature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_144": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "attn_dist_ / normalization_factor",
                            "BinOp"
                        ],
                        [
                            "attn_dist.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "attn_dist.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h.contiguous()",
                            "Call"
                        ],
                        [
                            "h.view(-1, n)",
                            "Call"
                        ],
                        [
                            "h.view(-1, t_k, n)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.reduce_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.x_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 2 + config.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_171": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.out1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lstm_out.view(-1, 2 * config.hidden_dim), c_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, 2 * config.hidden_dim), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out1(output)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_252": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_253": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.proj_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_323": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_328": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "s_t_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, s_t_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_402": {
                "variable": {
                    "value": "sum_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(step_losses, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_404": {
                "variable": {
                    "value": "loss_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avg_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum_losses / dec_lens_var.float().cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_432": {
                "variable": {
                    "value": "s_t_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, s_t_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.oov_emb_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_85": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_87": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, 2 * config.hidden_dim), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out1(output)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_163": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim * 4 + config.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "p_gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_t, s_t_hat, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_209": {
                "variable": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.p_gen_linear(p_gen_input)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_261": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kld_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "gaussian_kld(mean_p, log_var_p, mean, log_var)",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_loss)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_263": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_280": {
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_302": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_343": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'encoder_state_dict': self.encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'encoder_r_state_dict': self.encoder_r.state_dict(), 'latent': self.latent.state_dict(), 'optimizer': self.optimizer.state_dict(), 'current_loss': running_avg_ppl}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}_{:.4f}_{:.4f}_{:.4f}'.format(iter, running_avg_ppl, f1_g, f1_b, ent_g, ent_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_371": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_390": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_390": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_412": {
                "variable": {
                    "value": "loss_aux",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_446": {
                "variable": {
                    "value": "(_, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v(e)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "(c_t_1, y_t_1_embd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "vocab_dist_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vocab_dist_, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_393": {
                "variable": {
                    "value": "step_coverage_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(attn_dist, coverage)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_402": {
                "tensors": {
                    "value": "step_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "(x_p, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_259": {
                "tensors": {
                    "value": "(x_p, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_391": {
                "input": {
                    "value": "gold_probs + config.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "unk_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_393": {
                "input": {
                    "value": "attn_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "attn_dist_ / normalization_factor",
                            "BinOp"
                        ],
                        [
                            "attn_dist.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "attn_dist.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/vad.py": {
        "torch": {
            "cat_140": {
                "variable": {
                    "value": "attn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_141": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(attn_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_144": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v.repeat(context.size(0), 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.attn(attn_input))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_173": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "logvar_2 - logvar_1 + torch.exp(logvar_1) / torch.exp(logvar_2) + ((mu_1 - mu_2) ** 2 / torch.exp(logvar_2) - 1.0)",
                            "BinOp"
                        ],
                        [
                            "loss / 2",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_175": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "logvar_2 - logvar_1 + torch.exp(logvar_1) / torch.exp(logvar_2) + ((mu_1 - mu_2) ** 2 / torch.exp(logvar_2) - 1.0)",
                            "BinOp"
                        ],
                        [
                            "loss / 2",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.inference_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size + addtional_input_size, mlp_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.prior_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, mlp_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_215": {
                "variable": {
                    "value": "prior_gaussian_paramter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_gaussian_paramter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.prior_linear(input)",
                            "Call"
                        ],
                        [
                            "torch.clamp(prior_gaussian_paramter, -4, 4)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_216": {
                "variable": {
                    "value": "(prior_mu, prior_logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_gaussian_paramter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.prior_linear(input)",
                            "Call"
                        ],
                        [
                            "torch.clamp(prior_gaussian_paramter, -4, 4)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_240": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_num_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.context_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_size * (2 if bidirectional else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "context_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_259": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_261": {
                "variable": {
                    "value": "(rnn_output_padded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "variable": {
                    "value": "self.output_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_size + context_size + z_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_word",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_289": {
                "variable": {
                    "value": "self.bwd_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_size",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_num_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.bwd_output_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_word",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "self.bow_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(rnn_size + z_size, num_word)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.output_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_size + context_size + z_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_word",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.context_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "rnn_num_layer * rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "reverse_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[reverse_target[1:], reverse_zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "reverse_target_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[reverse_target_mask[1:], reverse_target_mask_zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_329": {
                "variable": {
                    "value": "reverse_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bwd_output.view(bwd_output.size(0) * bwd_output.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "reverse_target.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_333": {
                "variable": {
                    "value": "reverse_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reverse_ce * reverse_target_mask.view(seq_length * batch_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_417": {
                "variable": {
                    "value": "ce_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ce_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_417": {
                "variable": {
                    "value": "ce_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "vae_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_last_hidden, attn_context_step]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_input_step, attn_context_step, z_bwd_rnn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "output_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_last_hidden, attn_context_step, z_bwd_rnn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_459": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "common['num_word']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config.common",
                            "Attribute"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "common['emb_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config.common",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_483": {
                "variable": {
                    "value": "tgt_prefixed_wit_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt.new(1, batch_size).zero_(), tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_501": {
                "variable": {
                    "value": "tgt_prefixed_wit_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt.new(1, batch_size).zero_(), tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim + self.context_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "inference_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, additional_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_221": {
                "variable": {
                    "value": "inference_gaussian_paramter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inference_gaussian_paramter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.inference_linear(inference_input)",
                            "Call"
                        ],
                        [
                            "torch.clamp(inference_gaussian_paramter, -4, 4)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_222": {
                "variable": {
                    "value": "(inference_mu, inference_logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inference_gaussian_paramter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.inference_linear(inference_input)",
                            "Call"
                        ],
                        [
                            "torch.clamp(inference_gaussian_paramter, -4, 4)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_301": {
                "variable": {
                    "value": "mean_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Call",
                    "possible_values": [
                        [
                            "context.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "context.repeat(1, sample_number, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_emb, src_len)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_emb, src_len)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_emb, src_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bernoulli_352": {
                "variable": {
                    "value": "dropout_mask_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dropout_mask_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "emb_input.new(seq_length, batch_size * sample_number, 1).fill_(1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(dropout_mask_data)",
                            "Call"
                        ],
                        [
                            "dropout_mask_data.repeat(1, 1, emb_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_381": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_input_step, attn_context_step, z_bwd_rnn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "output_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_last_hidden, attn_context_step, z_bwd_rnn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_385": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.context_linear(rnn_output_padded)",
                            "Call"
                        ],
                        [
                            "self.output_linear(output_input)",
                            "Call"
                        ],
                        [
                            "self.output_linear(output_input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target[step_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_421": {
                "variable": {
                    "value": "bwd_rnn_kld_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bwd_rnn_kld_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_421": {
                "variable": {
                    "value": "bwd_rnn_kld_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_422": {
                "variable": {
                    "value": "aux_bow_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aux_bow_loss_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_422": {
                "variable": {
                    "value": "aux_bow_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "attn_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context[0], context[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "attn_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_context",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([context[0], context[-1]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(attn_context, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(context, dim=0)",
                            "Call"
                        ],
                        [
                            "attn_score.unsqueeze(1).bmm(context)",
                            "Call"
                        ],
                        [
                            "attn_context.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "input_size + addtional_input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_190": {
                "in_features": {
                    "value": "mlp_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * z_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "mlp_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * z_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "in_features": {
                    "value": "rnn_size + z_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_word",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "bow_predicted_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_last_hidden, z_bwd_rnn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_398": {
                "variable": {
                    "value": "aux_bow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bow_predicted",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bow_linear(bow_predicted_input)",
                            "Call"
                        ],
                        [
                            "bow_predicted.repeat(bow_truncated - step_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "bow_target.view(batch_size * sample_number * (bow_truncated - step_i))",
                    "type": "Call",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_406": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ce",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.cross_entropy(output, target[step_i], reduce=False)",
                            "Call"
                        ],
                        [
                            "ce * target_mask_step",
                            "BinOp"
                        ],
                        [
                            "ce.reshape(batch_size, sample_number)",
                            "Call"
                        ],
                        [
                            "torch.mean(ce, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_408": {
                "variable": {
                    "value": "kld_bwd_rnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kld_bwd_rnn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kld_bwd_rnn.reshape(batch_size, sample_number)",
                            "Call"
                        ],
                        [
                            "torch.mean(kld_bwd_rnn, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_410": {
                "variable": {
                    "value": "aux_bow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_bow_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aux_bow_loss.reshape(batch_size, sample_number)",
                            "Call"
                        ],
                        [
                            "torch.mean(aux_bow_loss, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.cross_entropy(bow_predicted, bow_target.view(batch_size * sample_number * (bow_truncated - step_i)), reduce=False)",
                            "Call"
                        ],
                        [
                            "aux_bow_loss.reshape(-1, bow_truncated - step_i)",
                            "Call"
                        ],
                        [
                            "aux_bow_loss.mean(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_115": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_158": {
                "variable": {
                    "value": "attn_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Call",
                    "possible_values": [
                        [
                            "context.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "context.repeat(1, sample_number, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_emb, src_len)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_emb, src_len)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_emb, src_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_170": {
                "input": {
                    "value": "logvar_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "variable": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score(H, context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_371": {
                "tensors": {
                    "value": "[rnn_last_hidden, attn_context_step]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_377": {
                "tensors": {
                    "value": "[rnn_last_hidden, attn_context_step]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/beam_cvae.py": {
        "torch": {
            "arange_265": {
                "variable": {
                    "value": "seq_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "c_t_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * config.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_114": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if config.USE_CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_76": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, batch['max_art_oovs'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_28": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_158": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[b.get_current_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_163": {
                "variable": {
                    "value": "dec_partial_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len_dec_seq + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "mask_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask_src[0].unsqueeze(0)] * mask_trg.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/beam_omt.py": {
        "torch": {
            "arange_261": {
                "variable": {
                    "value": "seq_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "c_t_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * config.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_114": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if config.USE_CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_76": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, batch['max_art_oovs'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_28": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_158": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[b.get_current_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_163": {
                "variable": {
                    "value": "dec_partial_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len_dec_seq + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "mask_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask_src[0].unsqueeze(0)] * mask_trg.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_loader.py": {
        "torch": {
            "DataLoader_150": {
                "variable": {
                    "value": "data_loader_tra",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(pairs_tra, vocab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(pairs_val, vocab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_160": {
                "variable": {
                    "value": "data_loader_tst",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(pairs_tst, vocab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_94": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_101": {
                "key": {
                    "value": "lambda x: len(x['context'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_reader.py": {
        "torch": {}
    },
    "utils/mojitalk_reader.py": {
        "torch": {}
    },
    "utils/persona_ed_reader.py": {
        "torch": {}
    },
    "utils/persona_reader.py": {
        "torch": {}
    }
}